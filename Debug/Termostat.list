
Termostat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a258  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800a3e8  0800a3e8  0001a3e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8dc  0800a8dc  00020238  2**0
                  CONTENTS
  4 .ARM          00000000  0800a8dc  0800a8dc  00020238  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a8dc  0800a8dc  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8dc  0800a8dc  0001a8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8e0  0800a8e0  0001a8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800a8e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000238  0800ab1c  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  0800ab1c  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018987  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c5  00000000  00000000  00038bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  0003c1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  0003d858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b6b3  00000000  00000000  0003ed40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ad62  00000000  00000000  0006a3f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b74c  00000000  00000000  00085155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001908a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070a0  00000000  00000000  001908f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a3d0 	.word	0x0800a3d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0800a3d0 	.word	0x0800a3d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
 8000bc8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bca:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <MX_ADC1_Init+0xe4>)
 8000bcc:	4a30      	ldr	r2, [pc, #192]	; (8000c90 <MX_ADC1_Init+0xe8>)
 8000bce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bd0:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <MX_ADC1_Init+0xe4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <MX_ADC1_Init+0xe4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <MX_ADC1_Init+0xe4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000be2:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <MX_ADC1_Init+0xe4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be8:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <MX_ADC1_Init+0xe4>)
 8000bea:	2204      	movs	r2, #4
 8000bec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bee:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <MX_ADC1_Init+0xe4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bf4:	4b25      	ldr	r3, [pc, #148]	; (8000c8c <MX_ADC1_Init+0xe4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000bfa:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <MX_ADC1_Init+0xe4>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c00:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <MX_ADC1_Init+0xe4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c08:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <MX_ADC1_Init+0xe4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_ADC1_Init+0xe4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_ADC1_Init+0xe4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <MX_ADC1_Init+0xe4>)
 8000c1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c22:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_ADC1_Init+0xe4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c2c:	4817      	ldr	r0, [pc, #92]	; (8000c8c <MX_ADC1_Init+0xe4>)
 8000c2e:	f001 fff9 	bl	8002c24 <HAL_ADC_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000c38:	f001 fa92 	bl	8002160 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	4811      	ldr	r0, [pc, #68]	; (8000c8c <MX_ADC1_Init+0xe4>)
 8000c48:	f003 f86a 	bl	8003d20 <HAL_ADCEx_MultiModeConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000c52:	f001 fa85 	bl	8002160 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_ADC1_Init+0xec>)
 8000c58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c5a:	2306      	movs	r3, #6
 8000c5c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000c5e:	2307      	movs	r3, #7
 8000c60:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c62:	237f      	movs	r3, #127	; 0x7f
 8000c64:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c66:	2304      	movs	r3, #4
 8000c68:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MX_ADC1_Init+0xe4>)
 8000c74:	f002 facc 	bl	8003210 <HAL_ADC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000c7e:	f001 fa6f 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	; 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000254 	.word	0x20000254
 8000c90:	50040000 	.word	0x50040000
 8000c94:	04300002 	.word	0x04300002

08000c98 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b0ac      	sub	sp, #176	; 0xb0
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2288      	movs	r2, #136	; 0x88
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f006 fc0f 	bl	80074dc <memset>
  if(adcHandle->Instance==ADC1)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a27      	ldr	r2, [pc, #156]	; (8000d60 <HAL_ADC_MspInit+0xc8>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d146      	bne.n	8000d56 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ccc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000cce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000cde:	2308      	movs	r3, #8
 8000ce0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ce2:	2307      	movs	r3, #7
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000cea:	2304      	movs	r3, #4
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000cee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cf2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f005 f861 	bl	8005dc0 <HAL_RCCEx_PeriphCLKConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000d04:	f001 fa2c 	bl	8002160 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <HAL_ADC_MspInit+0xcc>)
 8000d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0c:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <HAL_ADC_MspInit+0xcc>)
 8000d0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <HAL_ADC_MspInit+0xcc>)
 8000d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <HAL_ADC_MspInit+0xcc>)
 8000d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d24:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <HAL_ADC_MspInit+0xcc>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <HAL_ADC_MspInit+0xcc>)
 8000d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d3e:	230b      	movs	r3, #11
 8000d40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <HAL_ADC_MspInit+0xd0>)
 8000d52:	f003 f9a7 	bl	80040a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d56:	bf00      	nop
 8000d58:	37b0      	adds	r7, #176	; 0xb0
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	50040000 	.word	0x50040000
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48000800 	.word	0x48000800

08000d6c <eeprom_wait>:
#define WRITE_TIMEOUT   6

static uint32_t last_write;

void eeprom_wait(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 8000d70:	bf00      	nop
 8000d72:	f001 fcfd 	bl	8002770 <HAL_GetTick>
 8000d76:	4602      	mov	r2, r0
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <eeprom_wait+0x1c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d9f7      	bls.n	8000d72 <eeprom_wait+0x6>
    {
    }
}
 8000d82:	bf00      	nop
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200002b8 	.word	0x200002b8

08000d8c <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af04      	add	r7, sp, #16
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 8000d98:	f7ff ffe8 	bl	8000d6c <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	9102      	str	r1, [sp, #8]
 8000daa:	9301      	str	r3, [sp, #4]
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2301      	movs	r3, #1
 8000db2:	21a0      	movs	r1, #160	; 0xa0
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <eeprom_read+0x38>)
 8000db6:	f003 fcf3 	bl	80047a0 <HAL_I2C_Mem_Read>
 8000dba:	4603      	mov	r3, r0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	200002bc 	.word	0x200002bc

08000dc8 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af04      	add	r7, sp, #16
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8000dd4:	f7ff ffca 	bl	8000d6c <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295
 8000de4:	9102      	str	r1, [sp, #8]
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2301      	movs	r3, #1
 8000dee:	21a0      	movs	r1, #160	; 0xa0
 8000df0:	4807      	ldr	r0, [pc, #28]	; (8000e10 <eeprom_write+0x48>)
 8000df2:	f003 fbc1 	bl	8004578 <HAL_I2C_Mem_Write>
 8000df6:	4603      	mov	r3, r0
 8000df8:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 8000dfa:	f001 fcb9 	bl	8002770 <HAL_GetTick>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <eeprom_write+0x4c>)
 8000e02:	6013      	str	r3, [r2, #0]

    return rc;
 8000e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200002bc 	.word	0x200002bc
 8000e14:	200002b8 	.word	0x200002b8

08000e18 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2e:	4b57      	ldr	r3, [pc, #348]	; (8000f8c <MX_GPIO_Init+0x174>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	4a56      	ldr	r2, [pc, #344]	; (8000f8c <MX_GPIO_Init+0x174>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3a:	4b54      	ldr	r3, [pc, #336]	; (8000f8c <MX_GPIO_Init+0x174>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e46:	4b51      	ldr	r3, [pc, #324]	; (8000f8c <MX_GPIO_Init+0x174>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a50      	ldr	r2, [pc, #320]	; (8000f8c <MX_GPIO_Init+0x174>)
 8000e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b4e      	ldr	r3, [pc, #312]	; (8000f8c <MX_GPIO_Init+0x174>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b4b      	ldr	r3, [pc, #300]	; (8000f8c <MX_GPIO_Init+0x174>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	4a4a      	ldr	r2, [pc, #296]	; (8000f8c <MX_GPIO_Init+0x174>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6a:	4b48      	ldr	r3, [pc, #288]	; (8000f8c <MX_GPIO_Init+0x174>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	4b45      	ldr	r3, [pc, #276]	; (8000f8c <MX_GPIO_Init+0x174>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	4a44      	ldr	r2, [pc, #272]	; (8000f8c <MX_GPIO_Init+0x174>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e82:	4b42      	ldr	r3, [pc, #264]	; (8000f8c <MX_GPIO_Init+0x174>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	21a0      	movs	r1, #160	; 0xa0
 8000e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e96:	f003 faaf 	bl	80043f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_7|OUTPUT_SIG_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000ea0:	483b      	ldr	r0, [pc, #236]	; (8000f90 <MX_GPIO_Init+0x178>)
 8000ea2:	f003 faa9 	bl	80043f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2170      	movs	r1, #112	; 0x70
 8000eaa:	483a      	ldr	r0, [pc, #232]	; (8000f94 <MX_GPIO_Init+0x17c>)
 8000eac:	f003 faa4 	bl	80043f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eb0:	230c      	movs	r3, #12
 8000eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ece:	f003 f8e9 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 8000ed2:	23a0      	movs	r3, #160	; 0xa0
 8000ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eec:	f003 f8da 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC7 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7|OUTPUT_SIG_Pin;
 8000ef0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4821      	ldr	r0, [pc, #132]	; (8000f90 <MX_GPIO_Init+0x178>)
 8000f0a:	f003 f8cb 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MENU_BUTTON_Pin|DEST_TEMP_CHANGE_Pin|TEMP_MINUS_Pin|TEMP_PLUS_Pin;
 8000f0e:	f24e 0302 	movw	r3, #57346	; 0xe002
 8000f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f14:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	481b      	ldr	r0, [pc, #108]	; (8000f94 <MX_GPIO_Init+0x17c>)
 8000f26:	f003 f8bd 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DAY_INPUT_Pin|MINUTE_INPUT_Pin|HOUR_INPUT_Pin;
 8000f2a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f30:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4813      	ldr	r0, [pc, #76]	; (8000f90 <MX_GPIO_Init+0x178>)
 8000f42:	f003 f8af 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000f46:	2370      	movs	r3, #112	; 0x70
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <MX_GPIO_Init+0x17c>)
 8000f5e:	f003 f8a1 	bl	80040a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 10, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	210a      	movs	r1, #10
 8000f66:	2007      	movs	r0, #7
 8000f68:	f003 f865 	bl	8004036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f6c:	2007      	movs	r0, #7
 8000f6e:	f003 f87e 	bl	800406e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	210a      	movs	r1, #10
 8000f76:	2028      	movs	r0, #40	; 0x28
 8000f78:	f003 f85d 	bl	8004036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f7c:	2028      	movs	r0, #40	; 0x28
 8000f7e:	f003 f876 	bl	800406e <HAL_NVIC_EnableIRQ>

}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	; 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	48000800 	.word	0x48000800
 8000f94:	48000400 	.word	0x48000400

08000f98 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_I2C1_Init+0x74>)
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <MX_I2C1_Init+0x78>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_I2C1_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_I2C1_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_I2C1_Init+0x74>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_I2C1_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_I2C1_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_I2C1_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_I2C1_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_I2C1_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd2:	480e      	ldr	r0, [pc, #56]	; (800100c <MX_I2C1_Init+0x74>)
 8000fd4:	f003 fa40 	bl	8004458 <HAL_I2C_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fde:	f001 f8bf 	bl	8002160 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4809      	ldr	r0, [pc, #36]	; (800100c <MX_I2C1_Init+0x74>)
 8000fe6:	f003 ff9b 	bl	8004f20 <HAL_I2CEx_ConfigAnalogFilter>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ff0:	f001 f8b6 	bl	8002160 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_I2C1_Init+0x74>)
 8000ff8:	f003 ffdd 	bl	8004fb6 <HAL_I2CEx_ConfigDigitalFilter>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001002:	f001 f8ad 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200002bc 	.word	0x200002bc
 8001010:	40005400 	.word	0x40005400

08001014 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b0ac      	sub	sp, #176	; 0xb0
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2288      	movs	r2, #136	; 0x88
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f006 fa51 	bl	80074dc <memset>
  if(i2cHandle->Instance==I2C1)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a21      	ldr	r2, [pc, #132]	; (80010c4 <HAL_I2C_MspInit+0xb0>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d13b      	bne.n	80010bc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001044:	2340      	movs	r3, #64	; 0x40
 8001046:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001048:	2300      	movs	r3, #0
 800104a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4618      	mov	r0, r3
 8001052:	f004 feb5 	bl	8005dc0 <HAL_RCCEx_PeriphCLKConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800105c:	f001 f880 	bl	8002160 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <HAL_I2C_MspInit+0xb4>)
 8001062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001064:	4a18      	ldr	r2, [pc, #96]	; (80010c8 <HAL_I2C_MspInit+0xb4>)
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <HAL_I2C_MspInit+0xb4>)
 800106e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001078:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800107c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001080:	2312      	movs	r3, #18
 8001082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001092:	2304      	movs	r3, #4
 8001094:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800109c:	4619      	mov	r1, r3
 800109e:	480b      	ldr	r0, [pc, #44]	; (80010cc <HAL_I2C_MspInit+0xb8>)
 80010a0:	f003 f800 	bl	80040a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <HAL_I2C_MspInit+0xb4>)
 80010a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a8:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <HAL_I2C_MspInit+0xb4>)
 80010aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ae:	6593      	str	r3, [r2, #88]	; 0x58
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_I2C_MspInit+0xb4>)
 80010b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010bc:	bf00      	nop
 80010be:	37b0      	adds	r7, #176	; 0xb0
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40005400 	.word	0x40005400
 80010c8:	40021000 	.word	0x40021000
 80010cc:	48000400 	.word	0x48000400

080010d0 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80010de:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80010e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80010e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80010ea:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80010ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ee:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80010f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80010f2:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f80e 	bl	8001126 <Lcd_init>

	return lcd;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	461d      	mov	r5, r3
 800110e:	f107 0410 	add.w	r4, r7, #16
 8001112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001116:	e894 0003 	ldmia.w	r4, {r0, r1}
 800111a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	3728      	adds	r7, #40	; 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bdb0      	pop	{r4, r5, r7, pc}

08001126 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	7d9b      	ldrb	r3, [r3, #22]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10c      	bne.n	8001150 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8001136:	2133      	movs	r1, #51	; 0x33
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f87b 	bl	8001234 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800113e:	2132      	movs	r1, #50	; 0x32
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 f877 	bl	8001234 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8001146:	2128      	movs	r1, #40	; 0x28
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 f873 	bl	8001234 <lcd_write_command>
 800114e:	e003      	b.n	8001158 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8001150:	2138      	movs	r1, #56	; 0x38
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f86e 	bl	8001234 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8001158:	2101      	movs	r1, #1
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f86a 	bl	8001234 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001160:	210c      	movs	r1, #12
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f866 	bl	8001234 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001168:	2106      	movs	r1, #6
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f862 	bl	8001234 <lcd_write_command>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	4906      	ldr	r1, [pc, #24]	; (80011a4 <Lcd_int+0x2c>)
 800118a:	4618      	mov	r0, r3
 800118c:	f006 fea6 	bl	8007edc <siprintf>

	Lcd_string(lcd, buffer);
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	4619      	mov	r1, r3
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f806 	bl	80011a8 <Lcd_string>
}
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	0800a3e8 	.word	0x0800a3e8

080011a8 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	73fb      	strb	r3, [r7, #15]
 80011b6:	e00a      	b.n	80011ce <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	4413      	add	r3, r2
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f864 	bl	8001290 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	3301      	adds	r3, #1
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	7bfc      	ldrb	r4, [r7, #15]
 80011d0:	6838      	ldr	r0, [r7, #0]
 80011d2:	f7fe fffd 	bl	80001d0 <strlen>
 80011d6:	4603      	mov	r3, r0
 80011d8:	429c      	cmp	r4, r3
 80011da:	d3ed      	bcc.n	80011b8 <Lcd_string+0x10>
	}
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd90      	pop	{r4, r7, pc}
	...

080011e8 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
 80011f4:	4613      	mov	r3, r2
 80011f6:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	4a07      	ldr	r2, [pc, #28]	; (8001218 <Lcd_cursor+0x30>)
 80011fc:	5cd2      	ldrb	r2, [r2, r3]
 80011fe:	78bb      	ldrb	r3, [r7, #2]
 8001200:	4413      	add	r3, r2
 8001202:	b2db      	uxtb	r3, r3
 8001204:	3b80      	subs	r3, #128	; 0x80
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4619      	mov	r1, r3
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f812 	bl	8001234 <lcd_write_command>
	#endif
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	0800a4c0 	.word	0x0800a4c0

0800121c <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8001224:	2101      	movs	r1, #1
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f804 	bl	8001234 <lcd_write_command>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6898      	ldr	r0, [r3, #8]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	899b      	ldrh	r3, [r3, #12]
 8001248:	2200      	movs	r2, #0
 800124a:	4619      	mov	r1, r3
 800124c:	f003 f8d4 	bl	80043f8 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7d9b      	ldrb	r3, [r3, #22]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d111      	bne.n	800127c <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	091b      	lsrs	r3, r3, #4
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2204      	movs	r2, #4
 8001260:	4619      	mov	r1, r3
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 f842 	bl	80012ec <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2204      	movs	r2, #4
 8001272:	4619      	mov	r1, r3
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 f839 	bl	80012ec <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800127a:	e005      	b.n	8001288 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	2208      	movs	r2, #8
 8001280:	4619      	mov	r1, r3
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 f832 	bl	80012ec <lcd_write>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6898      	ldr	r0, [r3, #8]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	899b      	ldrh	r3, [r3, #12]
 80012a4:	2201      	movs	r2, #1
 80012a6:	4619      	mov	r1, r3
 80012a8:	f003 f8a6 	bl	80043f8 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7d9b      	ldrb	r3, [r3, #22]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d111      	bne.n	80012d8 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	091b      	lsrs	r3, r3, #4
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2204      	movs	r2, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f814 	bl	80012ec <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80012c4:	78fb      	ldrb	r3, [r7, #3]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2204      	movs	r2, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f80b 	bl	80012ec <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80012d6:	e005      	b.n	80012e4 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	2208      	movs	r2, #8
 80012dc:	4619      	mov	r1, r3
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 f804 	bl	80012ec <lcd_write>
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	70fb      	strb	r3, [r7, #3]
 80012f8:	4613      	mov	r3, r2
 80012fa:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	73fb      	strb	r3, [r7, #15]
 8001300:	e019      	b.n	8001336 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	8819      	ldrh	r1, [r3, #0]
 800131a:	78fa      	ldrb	r2, [r7, #3]
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	fa42 f303 	asr.w	r3, r2, r3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	b2db      	uxtb	r3, r3
 800132a:	461a      	mov	r2, r3
 800132c:	f003 f864 	bl	80043f8 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	3301      	adds	r3, #1
 8001334:	73fb      	strb	r3, [r7, #15]
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	78bb      	ldrb	r3, [r7, #2]
 800133a:	429a      	cmp	r2, r3
 800133c:	d3e1      	bcc.n	8001302 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6918      	ldr	r0, [r3, #16]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	8a9b      	ldrh	r3, [r3, #20]
 8001346:	2201      	movs	r2, #1
 8001348:	4619      	mov	r1, r3
 800134a:	f003 f855 	bl	80043f8 <HAL_GPIO_WritePin>
	DELAY(1);
 800134e:	2001      	movs	r0, #1
 8001350:	f001 fa1a 	bl	8002788 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6918      	ldr	r0, [r3, #16]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	8a9b      	ldrh	r3, [r3, #20]
 800135c:	2200      	movs	r2, #0
 800135e:	4619      	mov	r1, r3
 8001360:	f003 f84a 	bl	80043f8 <HAL_GPIO_WritePin>
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <CheckHisteresis>:
bool p_mode = false;

volatile bool menu_enabled = false;

void CheckHisteresis()//changes boiler state according to histeresis
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	if(work_state == true)
 8001370:	4b35      	ldr	r3, [pc, #212]	; (8001448 <CheckHisteresis+0xdc>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d032      	beq.n	80013de <CheckHisteresis+0x72>
			  {
				  if(temp<=dest_temp_H-0.4f)
 8001378:	4b34      	ldr	r3, [pc, #208]	; (800144c <CheckHisteresis+0xe0>)
 800137a:	edd3 7a00 	vldr	s15, [r3]
 800137e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001450 <CheckHisteresis+0xe4>
 8001382:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001386:	4b33      	ldr	r3, [pc, #204]	; (8001454 <CheckHisteresis+0xe8>)
 8001388:	edd3 7a00 	vldr	s15, [r3]
 800138c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001394:	db09      	blt.n	80013aa <CheckHisteresis+0x3e>
				  {
					  boiler_state = true;
 8001396:	4b30      	ldr	r3, [pc, #192]	; (8001458 <CheckHisteresis+0xec>)
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
					  HAL_GPIO_WritePin(OUTPUT_SIG_GPIO_Port, OUTPUT_SIG_Pin, GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a2:	482e      	ldr	r0, [pc, #184]	; (800145c <CheckHisteresis+0xf0>)
 80013a4:	f003 f828 	bl	80043f8 <HAL_GPIO_WritePin>
				  	{
				  		boiler_state = false;
				  		HAL_GPIO_WritePin(OUTPUT_SIG_GPIO_Port, OUTPUT_SIG_Pin, GPIO_PIN_RESET);
				  	}
			  }
}
 80013a8:	e04b      	b.n	8001442 <CheckHisteresis+0xd6>
				  else if(temp>=dest_temp_H+0.4f)
 80013aa:	4b28      	ldr	r3, [pc, #160]	; (800144c <CheckHisteresis+0xe0>)
 80013ac:	edd3 7a00 	vldr	s15, [r3]
 80013b0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001450 <CheckHisteresis+0xe4>
 80013b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013b8:	4b26      	ldr	r3, [pc, #152]	; (8001454 <CheckHisteresis+0xe8>)
 80013ba:	edd3 7a00 	vldr	s15, [r3]
 80013be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c6:	d900      	bls.n	80013ca <CheckHisteresis+0x5e>
}
 80013c8:	e03b      	b.n	8001442 <CheckHisteresis+0xd6>
					  boiler_state = false;
 80013ca:	4b23      	ldr	r3, [pc, #140]	; (8001458 <CheckHisteresis+0xec>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
					  HAL_GPIO_WritePin(OUTPUT_SIG_GPIO_Port, OUTPUT_SIG_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d6:	4821      	ldr	r0, [pc, #132]	; (800145c <CheckHisteresis+0xf0>)
 80013d8:	f003 f80e 	bl	80043f8 <HAL_GPIO_WritePin>
}
 80013dc:	e031      	b.n	8001442 <CheckHisteresis+0xd6>
				  if(temp<=dest_temp_C-0.4f)
 80013de:	4b20      	ldr	r3, [pc, #128]	; (8001460 <CheckHisteresis+0xf4>)
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001450 <CheckHisteresis+0xe4>
 80013e8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <CheckHisteresis+0xe8>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fa:	db09      	blt.n	8001410 <CheckHisteresis+0xa4>
				  		boiler_state = true;
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <CheckHisteresis+0xec>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
				  		HAL_GPIO_WritePin(OUTPUT_SIG_GPIO_Port, OUTPUT_SIG_Pin, GPIO_PIN_SET);
 8001402:	2201      	movs	r2, #1
 8001404:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001408:	4814      	ldr	r0, [pc, #80]	; (800145c <CheckHisteresis+0xf0>)
 800140a:	f002 fff5 	bl	80043f8 <HAL_GPIO_WritePin>
}
 800140e:	e018      	b.n	8001442 <CheckHisteresis+0xd6>
				  	else if(temp>=dest_temp_C+0.4f)
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <CheckHisteresis+0xf4>)
 8001412:	edd3 7a00 	vldr	s15, [r3]
 8001416:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001450 <CheckHisteresis+0xe4>
 800141a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <CheckHisteresis+0xe8>)
 8001420:	edd3 7a00 	vldr	s15, [r3]
 8001424:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142c:	d900      	bls.n	8001430 <CheckHisteresis+0xc4>
}
 800142e:	e008      	b.n	8001442 <CheckHisteresis+0xd6>
				  		boiler_state = false;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <CheckHisteresis+0xec>)
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
				  		HAL_GPIO_WritePin(OUTPUT_SIG_GPIO_Port, OUTPUT_SIG_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 7180 	mov.w	r1, #256	; 0x100
 800143c:	4807      	ldr	r0, [pc, #28]	; (800145c <CheckHisteresis+0xf0>)
 800143e:	f002 ffdb 	bl	80043f8 <HAL_GPIO_WritePin>
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008
 800144c:	20000004 	.word	0x20000004
 8001450:	3ecccccd 	.word	0x3ecccccd
 8001454:	20000314 	.word	0x20000314
 8001458:	20000325 	.word	0x20000325
 800145c:	48000800 	.word	0x48000800
 8001460:	20000000 	.word	0x20000000

08001464 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	if(tick_stopped == true)
 800146c:	4b24      	ldr	r3, [pc, #144]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00b      	beq.n	800148c <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		HAL_ResumeTick();
 8001474:	f001 f9bc 	bl	80027f0 <HAL_ResumeTick>
		tick_stopped = false;
 8001478:	4b21      	ldr	r3, [pc, #132]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim6,0);
 800147e:	4b21      	ldr	r3, [pc, #132]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim6);
 8001486:	481f      	ldr	r0, [pc, #124]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001488:	f005 fcd8 	bl	8006e3c <HAL_TIM_Base_Start_IT>
	}

	if(htim==&htim7)//ADC reading for temperature sensor
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a1e      	ldr	r2, [pc, #120]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d120      	bne.n	80014d6 <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		HAL_ADC_Start(&hadc1);
 8001494:	481d      	ldr	r0, [pc, #116]	; (800150c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001496:	f001 fd1b 	bl	8002ed0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800149a:	f04f 31ff 	mov.w	r1, #4294967295
 800149e:	481b      	ldr	r0, [pc, #108]	; (800150c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80014a0:	f001 fdd0 	bl	8003044 <HAL_ADC_PollForConversion>
		value = HAL_ADC_GetValue(&hadc1);
 80014a4:	4819      	ldr	r0, [pc, #100]	; (800150c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80014a6:	f001 fea5 	bl	80031f4 <HAL_ADC_GetValue>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a18      	ldr	r2, [pc, #96]	; (8001510 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80014ae:	6013      	str	r3, [r2, #0]
		temp = value*330.0f/4096.0f;
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014bc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001514 <HAL_TIM_PeriodElapsedCallback+0xb0>
 80014c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014c4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001518 <HAL_TIM_PeriodElapsedCallback+0xb4>
 80014c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80014ce:	edc3 7a00 	vstr	s15, [r3]
		CheckHisteresis();
 80014d2:	f7ff ff4b 	bl	800136c <CheckHisteresis>
		//printf("przerwanie\n");
	}
	if(htim==&htim6)//sleep mode activation
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d10b      	bne.n	80014f6 <HAL_TIM_PeriodElapsedCallback+0x92>
	{
		HAL_TIM_Base_Stop_IT(&htim6);
 80014de:	4809      	ldr	r0, [pc, #36]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80014e0:	f005 fd1c 	bl	8006f1c <HAL_TIM_Base_Stop_IT>
		tick_stopped = true;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
		HAL_SuspendTick();
 80014ea:	f001 f971 	bl	80027d0 <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80014ee:	2101      	movs	r1, #1
 80014f0:	2000      	movs	r0, #0
 80014f2:	f003 fdbd 	bl	8005070 <HAL_PWR_EnterSLEEPMode>
	}
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000327 	.word	0x20000327
 8001504:	20000440 	.word	0x20000440
 8001508:	2000048c 	.word	0x2000048c
 800150c:	20000254 	.word	0x20000254
 8001510:	20000310 	.word	0x20000310
 8001514:	43a50000 	.word	0x43a50000
 8001518:	45800000 	.word	0x45800000
 800151c:	20000314 	.word	0x20000314

08001520 <HAL_GPIO_EXTI_Callback>:
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
	return 1;
}*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//interruptions from buttons
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6,0);
 800152a:	4ba3      	ldr	r3, [pc, #652]	; (80017b8 <HAL_GPIO_EXTI_Callback+0x298>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
	if(tick_stopped == true)
 8001532:	4ba2      	ldr	r3, [pc, #648]	; (80017bc <HAL_GPIO_EXTI_Callback+0x29c>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00b      	beq.n	8001552 <HAL_GPIO_EXTI_Callback+0x32>
	{
		HAL_ResumeTick();
 800153a:	f001 f959 	bl	80027f0 <HAL_ResumeTick>
		tick_stopped = false;
 800153e:	4b9f      	ldr	r3, [pc, #636]	; (80017bc <HAL_GPIO_EXTI_Callback+0x29c>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim6,0);
 8001544:	4b9c      	ldr	r3, [pc, #624]	; (80017b8 <HAL_GPIO_EXTI_Callback+0x298>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2200      	movs	r2, #0
 800154a:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim6);
 800154c:	489a      	ldr	r0, [pc, #616]	; (80017b8 <HAL_GPIO_EXTI_Callback+0x298>)
 800154e:	f005 fc75 	bl	8006e3c <HAL_TIM_Base_Start_IT>
	}
	RTC_TimeTypeDef time = {0};
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = {0};
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]

	time.TimeFormat = RTC_HOURFORMAT_24;
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	2200      	movs	r2, #0
 8001570:	4619      	mov	r1, r3
 8001572:	4893      	ldr	r0, [pc, #588]	; (80017c0 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001574:	f005 fa08 	bl	8006988 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001578:	f107 0308 	add.w	r3, r7, #8
 800157c:	2200      	movs	r2, #0
 800157e:	4619      	mov	r1, r3
 8001580:	488f      	ldr	r0, [pc, #572]	; (80017c0 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001582:	f005 fae4 	bl	8006b4e <HAL_RTC_GetDate>


	switch(GPIO_Pin)
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800158c:	f000 80d5 	beq.w	800173a <HAL_GPIO_EXTI_Callback+0x21a>
 8001590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001594:	f300 8177 	bgt.w	8001886 <HAL_GPIO_EXTI_Callback+0x366>
 8001598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800159c:	f000 8120 	beq.w	80017e0 <HAL_GPIO_EXTI_Callback+0x2c0>
 80015a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015a4:	f300 816f 	bgt.w	8001886 <HAL_GPIO_EXTI_Callback+0x366>
 80015a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ac:	f000 8084 	beq.w	80016b8 <HAL_GPIO_EXTI_Callback+0x198>
 80015b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015b4:	f300 8167 	bgt.w	8001886 <HAL_GPIO_EXTI_Callback+0x366>
 80015b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015bc:	d039      	beq.n	8001632 <HAL_GPIO_EXTI_Callback+0x112>
 80015be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015c2:	f300 8160 	bgt.w	8001886 <HAL_GPIO_EXTI_Callback+0x366>
 80015c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015ca:	d05a      	beq.n	8001682 <HAL_GPIO_EXTI_Callback+0x162>
 80015cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015d0:	f300 8159 	bgt.w	8001886 <HAL_GPIO_EXTI_Callback+0x366>
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	f000 8140 	beq.w	800185a <HAL_GPIO_EXTI_Callback+0x33a>
 80015da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015de:	f040 8152 	bne.w	8001886 <HAL_GPIO_EXTI_Callback+0x366>
	{
		case DAY_INPUT_Pin://changes day in main view or schedule menu
		{
			if(menu_enabled == false)
 80015e2:	4b78      	ldr	r3, [pc, #480]	; (80017c4 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	f083 0301 	eor.w	r3, r3, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d011      	beq.n	8001616 <HAL_GPIO_EXTI_Callback+0xf6>
			{
				if(date.WeekDay == RTC_WEEKDAY_SUNDAY)
 80015f2:	7a3b      	ldrb	r3, [r7, #8]
 80015f4:	2b07      	cmp	r3, #7
 80015f6:	d102      	bne.n	80015fe <HAL_GPIO_EXTI_Callback+0xde>
					date.WeekDay = RTC_WEEKDAY_MONDAY;
 80015f8:	2301      	movs	r3, #1
 80015fa:	723b      	strb	r3, [r7, #8]
 80015fc:	e003      	b.n	8001606 <HAL_GPIO_EXTI_Callback+0xe6>
				else
					date.WeekDay++;
 80015fe:	7a3b      	ldrb	r3, [r7, #8]
 8001600:	3301      	adds	r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	723b      	strb	r3, [r7, #8]
				HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	2200      	movs	r2, #0
 800160c:	4619      	mov	r1, r3
 800160e:	486c      	ldr	r0, [pc, #432]	; (80017c0 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001610:	f005 fa16 	bl	8006a40 <HAL_RTC_SetDate>
				if(week_day<6)
					week_day++;
				else
					week_day = 0;
			}
			break;
 8001614:	e137      	b.n	8001886 <HAL_GPIO_EXTI_Callback+0x366>
				if(week_day<6)
 8001616:	4b6c      	ldr	r3, [pc, #432]	; (80017c8 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b05      	cmp	r3, #5
 800161c:	dc05      	bgt.n	800162a <HAL_GPIO_EXTI_Callback+0x10a>
					week_day++;
 800161e:	4b6a      	ldr	r3, [pc, #424]	; (80017c8 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	4a68      	ldr	r2, [pc, #416]	; (80017c8 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001626:	6013      	str	r3, [r2, #0]
			break;
 8001628:	e12d      	b.n	8001886 <HAL_GPIO_EXTI_Callback+0x366>
					week_day = 0;
 800162a:	4b67      	ldr	r3, [pc, #412]	; (80017c8 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
			break;
 8001630:	e129      	b.n	8001886 <HAL_GPIO_EXTI_Callback+0x366>
		}
		case HOUR_INPUT_Pin://changes hour in main view or schedule menu
		{
			if(menu_enabled == false)
 8001632:	4b64      	ldr	r3, [pc, #400]	; (80017c4 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	f083 0301 	eor.w	r3, r3, #1
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d011      	beq.n	8001666 <HAL_GPIO_EXTI_Callback+0x146>
			{
				if(time.Hours>=23)
 8001642:	7b3b      	ldrb	r3, [r7, #12]
 8001644:	2b16      	cmp	r3, #22
 8001646:	d902      	bls.n	800164e <HAL_GPIO_EXTI_Callback+0x12e>
				{
					time.Hours = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	733b      	strb	r3, [r7, #12]
 800164c:	e003      	b.n	8001656 <HAL_GPIO_EXTI_Callback+0x136>
				}

				else
				{
					time.Hours++;
 800164e:	7b3b      	ldrb	r3, [r7, #12]
 8001650:	3301      	adds	r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	733b      	strb	r3, [r7, #12]
				}
				HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	2200      	movs	r2, #0
 800165c:	4619      	mov	r1, r3
 800165e:	4858      	ldr	r0, [pc, #352]	; (80017c0 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001660:	f005 f8f5 	bl	800684e <HAL_RTC_SetTime>
				if(hour<23)
					hour++;
				else
					hour = 0;
			}
			break;
 8001664:	e10f      	b.n	8001886 <HAL_GPIO_EXTI_Callback+0x366>
				if(hour<23)
 8001666:	4b59      	ldr	r3, [pc, #356]	; (80017cc <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b16      	cmp	r3, #22
 800166c:	dc05      	bgt.n	800167a <HAL_GPIO_EXTI_Callback+0x15a>
					hour++;
 800166e:	4b57      	ldr	r3, [pc, #348]	; (80017cc <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	4a55      	ldr	r2, [pc, #340]	; (80017cc <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001676:	6013      	str	r3, [r2, #0]
			break;
 8001678:	e105      	b.n	8001886 <HAL_GPIO_EXTI_Callback+0x366>
					hour = 0;
 800167a:	4b54      	ldr	r3, [pc, #336]	; (80017cc <HAL_GPIO_EXTI_Callback+0x2ac>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
			break;
 8001680:	e101      	b.n	8001886 <HAL_GPIO_EXTI_Callback+0x366>
		}
		case MINUTE_INPUT_Pin://changes minute in main view
		{
			if(menu_enabled == false)
 8001682:	4b50      	ldr	r3, [pc, #320]	; (80017c4 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	f083 0301 	eor.w	r3, r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80f4 	beq.w	800187c <HAL_GPIO_EXTI_Callback+0x35c>
			{
				if(time.Minutes >= 59)
 8001694:	7b7b      	ldrb	r3, [r7, #13]
 8001696:	2b3a      	cmp	r3, #58	; 0x3a
 8001698:	d902      	bls.n	80016a0 <HAL_GPIO_EXTI_Callback+0x180>
				{
					time.Minutes = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	737b      	strb	r3, [r7, #13]
 800169e:	e003      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x188>
				}
				else
				{
					time.Minutes++;
 80016a0:	7b7b      	ldrb	r3, [r7, #13]
 80016a2:	3301      	adds	r3, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	737b      	strb	r3, [r7, #13]
				}
				HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	2200      	movs	r2, #0
 80016ae:	4619      	mov	r1, r3
 80016b0:	4843      	ldr	r0, [pc, #268]	; (80017c0 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80016b2:	f005 f8cc 	bl	800684e <HAL_RTC_SetTime>
			}
			break;
 80016b6:	e0e1      	b.n	800187c <HAL_GPIO_EXTI_Callback+0x35c>
		}
		case DEST_TEMP_CHANGE_Pin://changes destination temperature to high or low (work_state)
		{
			if(menu_enabled == false)
 80016b8:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	f083 0301 	eor.w	r3, r3, #1
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d011      	beq.n	80016ec <HAL_GPIO_EXTI_Callback+0x1cc>
			{
				work_state = !work_state;
 80016c8:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	bf14      	ite	ne
 80016d0:	2301      	movne	r3, #1
 80016d2:	2300      	moveq	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f083 0301 	eor.w	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80016e4:	701a      	strb	r2, [r3, #0]
				CheckHisteresis();
 80016e6:	f7ff fe41 	bl	800136c <CheckHisteresis>
			}
			else
			{
				schedule[week_day][hour] = !schedule[week_day][hour];
			}
			break;
 80016ea:	e0cc      	b.n	8001886 <HAL_GPIO_EXTI_Callback+0x366>
				schedule[week_day][hour] = !schedule[week_day][hour];
 80016ec:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b36      	ldr	r3, [pc, #216]	; (80017cc <HAL_GPIO_EXTI_Callback+0x2ac>)
 80016f2:	6819      	ldr	r1, [r3, #0]
 80016f4:	4837      	ldr	r0, [pc, #220]	; (80017d4 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4403      	add	r3, r0
 8001700:	440b      	add	r3, r1
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf14      	ite	ne
 8001708:	2301      	movne	r3, #1
 800170a:	2300      	moveq	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f083 0301 	eor.w	r3, r3, #1
 8001712:	b2db      	uxtb	r3, r3
 8001714:	4618      	mov	r0, r3
 8001716:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4b2c      	ldr	r3, [pc, #176]	; (80017cc <HAL_GPIO_EXTI_Callback+0x2ac>)
 800171c:	6819      	ldr	r1, [r3, #0]
 800171e:	4603      	mov	r3, r0
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	b2dc      	uxtb	r4, r3
 8001726:	482b      	ldr	r0, [pc, #172]	; (80017d4 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4403      	add	r3, r0
 8001732:	440b      	add	r3, r1
 8001734:	4622      	mov	r2, r4
 8001736:	701a      	strb	r2, [r3, #0]
			break;
 8001738:	e0a5      	b.n	8001886 <HAL_GPIO_EXTI_Callback+0x366>
		}
		case TEMP_PLUS_Pin://changes value of destination temperature
		{
			if(menu_enabled == false)
 800173a:	4b22      	ldr	r3, [pc, #136]	; (80017c4 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	f083 0301 	eor.w	r3, r3, #1
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 809a 	beq.w	8001880 <HAL_GPIO_EXTI_Callback+0x360>
			{
				if(work_state == true)
 800174c:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d014      	beq.n	800177e <HAL_GPIO_EXTI_Callback+0x25e>
				{
					if(dest_temp_H<30.0f)
 8001754:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001756:	edd3 7a00 	vldr	s15, [r3]
 800175a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800175e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001766:	d523      	bpl.n	80017b0 <HAL_GPIO_EXTI_Callback+0x290>
						dest_temp_H += 0.5f;
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001772:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001778:	edc3 7a00 	vstr	s15, [r3]
 800177c:	e018      	b.n	80017b0 <HAL_GPIO_EXTI_Callback+0x290>
				}
				else
				{
					if(dest_temp_C<=dest_temp_H-1.0f)
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001780:	edd3 7a00 	vldr	s15, [r3]
 8001784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001788:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800178c:	4b13      	ldr	r3, [pc, #76]	; (80017dc <HAL_GPIO_EXTI_Callback+0x2bc>)
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179a:	db09      	blt.n	80017b0 <HAL_GPIO_EXTI_Callback+0x290>
						dest_temp_C += 0.5f;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <HAL_GPIO_EXTI_Callback+0x2bc>)
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_GPIO_EXTI_Callback+0x2bc>)
 80017ac:	edc3 7a00 	vstr	s15, [r3]
				}
				CheckHisteresis();
 80017b0:	f7ff fddc 	bl	800136c <CheckHisteresis>
			}
			break;
 80017b4:	e064      	b.n	8001880 <HAL_GPIO_EXTI_Callback+0x360>
 80017b6:	bf00      	nop
 80017b8:	20000440 	.word	0x20000440
 80017bc:	20000327 	.word	0x20000327
 80017c0:	20000418 	.word	0x20000418
 80017c4:	200003fd 	.word	0x200003fd
 80017c8:	200003ec 	.word	0x200003ec
 80017cc:	200003f4 	.word	0x200003f4
 80017d0:	20000008 	.word	0x20000008
 80017d4:	20000344 	.word	0x20000344
 80017d8:	20000004 	.word	0x20000004
 80017dc:	20000000 	.word	0x20000000
		}
		case TEMP_MINUS_Pin://changes value of destination temperature
		{
			if(menu_enabled == false)
 80017e0:	4b2c      	ldr	r3, [pc, #176]	; (8001894 <HAL_GPIO_EXTI_Callback+0x374>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f083 0301 	eor.w	r3, r3, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d049      	beq.n	8001884 <HAL_GPIO_EXTI_Callback+0x364>
			{
				if(work_state == true)
 80017f0:	4b29      	ldr	r3, [pc, #164]	; (8001898 <HAL_GPIO_EXTI_Callback+0x378>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d019      	beq.n	800182c <HAL_GPIO_EXTI_Callback+0x30c>
				{
					if(dest_temp_H>=dest_temp_C+1.0f)
 80017f8:	4b28      	ldr	r3, [pc, #160]	; (800189c <HAL_GPIO_EXTI_Callback+0x37c>)
 80017fa:	edd3 7a00 	vldr	s15, [r3]
 80017fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001802:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001806:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <HAL_GPIO_EXTI_Callback+0x380>)
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001814:	d81e      	bhi.n	8001854 <HAL_GPIO_EXTI_Callback+0x334>
						dest_temp_H = dest_temp_H - 0.5f;
 8001816:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <HAL_GPIO_EXTI_Callback+0x380>)
 8001818:	edd3 7a00 	vldr	s15, [r3]
 800181c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001820:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001824:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <HAL_GPIO_EXTI_Callback+0x380>)
 8001826:	edc3 7a00 	vstr	s15, [r3]
 800182a:	e013      	b.n	8001854 <HAL_GPIO_EXTI_Callback+0x334>
				}
				else
				{
					if(dest_temp_C>5)
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_GPIO_EXTI_Callback+0x37c>)
 800182e:	edd3 7a00 	vldr	s15, [r3]
 8001832:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001836:	eef4 7ac7 	vcmpe.f32	s15, s14
 800183a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183e:	dd09      	ble.n	8001854 <HAL_GPIO_EXTI_Callback+0x334>
						dest_temp_C -= 0.5f;
 8001840:	4b16      	ldr	r3, [pc, #88]	; (800189c <HAL_GPIO_EXTI_Callback+0x37c>)
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800184a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800184e:	4b13      	ldr	r3, [pc, #76]	; (800189c <HAL_GPIO_EXTI_Callback+0x37c>)
 8001850:	edc3 7a00 	vstr	s15, [r3]
				}
				CheckHisteresis();
 8001854:	f7ff fd8a 	bl	800136c <CheckHisteresis>
			}
			break;
 8001858:	e014      	b.n	8001884 <HAL_GPIO_EXTI_Callback+0x364>
		}
		case MENU_BUTTON_Pin://enters or leaves schedule menu
		{
			menu_enabled = !menu_enabled;
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_GPIO_EXTI_Callback+0x374>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	bf14      	ite	ne
 8001864:	2301      	movne	r3, #1
 8001866:	2300      	moveq	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	f083 0301 	eor.w	r3, r3, #1
 800186e:	b2db      	uxtb	r3, r3
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4b07      	ldr	r3, [pc, #28]	; (8001894 <HAL_GPIO_EXTI_Callback+0x374>)
 8001878:	701a      	strb	r2, [r3, #0]
			break;
 800187a:	e004      	b.n	8001886 <HAL_GPIO_EXTI_Callback+0x366>
			break;
 800187c:	bf00      	nop
 800187e:	e002      	b.n	8001886 <HAL_GPIO_EXTI_Callback+0x366>
			break;
 8001880:	bf00      	nop
 8001882:	e000      	b.n	8001886 <HAL_GPIO_EXTI_Callback+0x366>
			break;
 8001884:	bf00      	nop
		}
	}
	HAL_Delay(50);
 8001886:	2032      	movs	r0, #50	; 0x32
 8001888:	f000 ff7e 	bl	8002788 <HAL_Delay>
}
 800188c:	bf00      	nop
 800188e:	3724      	adds	r7, #36	; 0x24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd90      	pop	{r4, r7, pc}
 8001894:	200003fd 	.word	0x200003fd
 8001898:	20000008 	.word	0x20000008
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000004 	.word	0x20000004

080018a4 <DisplayDay>:
  // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
  Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_4};
  Lcd_HandleTypeDef lcd;

void DisplayDay()//displays day in main view
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	Lcd_cursor(&lcd, 0,0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	4807      	ldr	r0, [pc, #28]	; (80018cc <DisplayDay+0x28>)
 80018ae:	f7ff fc9b 	bl	80011e8 <Lcd_cursor>
	Lcd_string(&lcd, days[date.WeekDay-1]);
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <DisplayDay+0x2c>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <DisplayDay+0x30>)
 80018ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018be:	4619      	mov	r1, r3
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <DisplayDay+0x28>)
 80018c2:	f7ff fc71 	bl	80011a8 <Lcd_string>
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000400 	.word	0x20000400
 80018d0:	2000033c 	.word	0x2000033c
 80018d4:	2000000c 	.word	0x2000000c

080018d8 <DisplayDayInMenu>:
void DisplayDayInMenu()//displays day in menu
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	Lcd_cursor(&lcd, 1,0);
 80018dc:	2200      	movs	r2, #0
 80018de:	2101      	movs	r1, #1
 80018e0:	4806      	ldr	r0, [pc, #24]	; (80018fc <DisplayDayInMenu+0x24>)
 80018e2:	f7ff fc81 	bl	80011e8 <Lcd_cursor>
	Lcd_string(&lcd, days[week_day]);
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <DisplayDayInMenu+0x28>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a06      	ldr	r2, [pc, #24]	; (8001904 <DisplayDayInMenu+0x2c>)
 80018ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f0:	4619      	mov	r1, r3
 80018f2:	4802      	ldr	r0, [pc, #8]	; (80018fc <DisplayDayInMenu+0x24>)
 80018f4:	f7ff fc58 	bl	80011a8 <Lcd_string>
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000400 	.word	0x20000400
 8001900:	200003ec 	.word	0x200003ec
 8001904:	2000000c 	.word	0x2000000c

08001908 <DisplayHourInMenu>:
void DisplayHourInMenu()//displays hour in menu
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	Lcd_cursor(&lcd, 1,5);
 800190c:	2205      	movs	r2, #5
 800190e:	2101      	movs	r1, #1
 8001910:	480b      	ldr	r0, [pc, #44]	; (8001940 <DisplayHourInMenu+0x38>)
 8001912:	f7ff fc69 	bl	80011e8 <Lcd_cursor>
	Lcd_string(&lcd, "godz:");
 8001916:	490b      	ldr	r1, [pc, #44]	; (8001944 <DisplayHourInMenu+0x3c>)
 8001918:	4809      	ldr	r0, [pc, #36]	; (8001940 <DisplayHourInMenu+0x38>)
 800191a:	f7ff fc45 	bl	80011a8 <Lcd_string>
	if(hour<10)
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <DisplayHourInMenu+0x40>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b09      	cmp	r3, #9
 8001924:	dc03      	bgt.n	800192e <DisplayHourInMenu+0x26>
		Lcd_int(&lcd, 0);
 8001926:	2100      	movs	r1, #0
 8001928:	4805      	ldr	r0, [pc, #20]	; (8001940 <DisplayHourInMenu+0x38>)
 800192a:	f7ff fc25 	bl	8001178 <Lcd_int>
	Lcd_int(&lcd, hour);
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <DisplayHourInMenu+0x40>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4619      	mov	r1, r3
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <DisplayHourInMenu+0x38>)
 8001936:	f7ff fc1f 	bl	8001178 <Lcd_int>
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000400 	.word	0x20000400
 8001944:	0800a42c 	.word	0x0800a42c
 8001948:	200003f4 	.word	0x200003f4

0800194c <DisplayModeInMenu>:
void DisplayModeInMenu()//displays chosen target temperature in schedule menu
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	Lcd_cursor(&lcd, 1,12);
 8001950:	220c      	movs	r2, #12
 8001952:	2101      	movs	r1, #1
 8001954:	4811      	ldr	r0, [pc, #68]	; (800199c <DisplayModeInMenu+0x50>)
 8001956:	f7ff fc47 	bl	80011e8 <Lcd_cursor>
	Lcd_string(&lcd, "->");
 800195a:	4911      	ldr	r1, [pc, #68]	; (80019a0 <DisplayModeInMenu+0x54>)
 800195c:	480f      	ldr	r0, [pc, #60]	; (800199c <DisplayModeInMenu+0x50>)
 800195e:	f7ff fc23 	bl	80011a8 <Lcd_string>
	if(schedule[week_day][hour]==true)
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <DisplayModeInMenu+0x58>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <DisplayModeInMenu+0x5c>)
 8001968:	6819      	ldr	r1, [r3, #0]
 800196a:	4810      	ldr	r0, [pc, #64]	; (80019ac <DisplayModeInMenu+0x60>)
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4403      	add	r3, r0
 8001976:	440b      	add	r3, r1
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d006      	beq.n	800198c <DisplayModeInMenu+0x40>
	{
		Lcd_string(&lcd, work_state_strings[0]);
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <DisplayModeInMenu+0x64>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <DisplayModeInMenu+0x50>)
 8001986:	f7ff fc0f 	bl	80011a8 <Lcd_string>
	}
	else
	{
		Lcd_string(&lcd, work_state_strings[1]);
	}
}
 800198a:	e005      	b.n	8001998 <DisplayModeInMenu+0x4c>
		Lcd_string(&lcd, work_state_strings[1]);
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <DisplayModeInMenu+0x64>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4619      	mov	r1, r3
 8001992:	4802      	ldr	r0, [pc, #8]	; (800199c <DisplayModeInMenu+0x50>)
 8001994:	f7ff fc08 	bl	80011a8 <Lcd_string>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000400 	.word	0x20000400
 80019a0:	0800a434 	.word	0x0800a434
 80019a4:	200003ec 	.word	0x200003ec
 80019a8:	200003f4 	.word	0x200003f4
 80019ac:	20000344 	.word	0x20000344
 80019b0:	20000028 	.word	0x20000028

080019b4 <DisplayTime>:
void DisplayTime()//displays time in main view
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	Lcd_cursor(&lcd, 0,5);
 80019b8:	2205      	movs	r2, #5
 80019ba:	2100      	movs	r1, #0
 80019bc:	481b      	ldr	r0, [pc, #108]	; (8001a2c <DisplayTime+0x78>)
 80019be:	f7ff fc13 	bl	80011e8 <Lcd_cursor>
	if(time.Hours<=9)
 80019c2:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <DisplayTime+0x7c>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b09      	cmp	r3, #9
 80019c8:	d80a      	bhi.n	80019e0 <DisplayTime+0x2c>
	    {
	    	Lcd_int(&lcd, 0);
 80019ca:	2100      	movs	r1, #0
 80019cc:	4817      	ldr	r0, [pc, #92]	; (8001a2c <DisplayTime+0x78>)
 80019ce:	f7ff fbd3 	bl	8001178 <Lcd_int>
	    	Lcd_int(&lcd, time.Hours);
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <DisplayTime+0x7c>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	4619      	mov	r1, r3
 80019d8:	4814      	ldr	r0, [pc, #80]	; (8001a2c <DisplayTime+0x78>)
 80019da:	f7ff fbcd 	bl	8001178 <Lcd_int>
 80019de:	e005      	b.n	80019ec <DisplayTime+0x38>
	    }
	    else
	    	Lcd_int(&lcd, time.Hours);
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <DisplayTime+0x7c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	4811      	ldr	r0, [pc, #68]	; (8001a2c <DisplayTime+0x78>)
 80019e8:	f7ff fbc6 	bl	8001178 <Lcd_int>


	    Lcd_string(&lcd, ":");
 80019ec:	4911      	ldr	r1, [pc, #68]	; (8001a34 <DisplayTime+0x80>)
 80019ee:	480f      	ldr	r0, [pc, #60]	; (8001a2c <DisplayTime+0x78>)
 80019f0:	f7ff fbda 	bl	80011a8 <Lcd_string>
	    Lcd_cursor(&lcd, 0,8);
 80019f4:	2208      	movs	r2, #8
 80019f6:	2100      	movs	r1, #0
 80019f8:	480c      	ldr	r0, [pc, #48]	; (8001a2c <DisplayTime+0x78>)
 80019fa:	f7ff fbf5 	bl	80011e8 <Lcd_cursor>
	    if(time.Minutes<=9)
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <DisplayTime+0x7c>)
 8001a00:	785b      	ldrb	r3, [r3, #1]
 8001a02:	2b09      	cmp	r3, #9
 8001a04:	d80a      	bhi.n	8001a1c <DisplayTime+0x68>
	        {
	        	Lcd_int(&lcd, 0);
 8001a06:	2100      	movs	r1, #0
 8001a08:	4808      	ldr	r0, [pc, #32]	; (8001a2c <DisplayTime+0x78>)
 8001a0a:	f7ff fbb5 	bl	8001178 <Lcd_int>
	        	Lcd_int(&lcd, time.Minutes);
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <DisplayTime+0x7c>)
 8001a10:	785b      	ldrb	r3, [r3, #1]
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	; (8001a2c <DisplayTime+0x78>)
 8001a16:	f7ff fbaf 	bl	8001178 <Lcd_int>
	        }
	    else
	    	Lcd_int(&lcd, time.Minutes);
}
 8001a1a:	e005      	b.n	8001a28 <DisplayTime+0x74>
	    	Lcd_int(&lcd, time.Minutes);
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <DisplayTime+0x7c>)
 8001a1e:	785b      	ldrb	r3, [r3, #1]
 8001a20:	4619      	mov	r1, r3
 8001a22:	4802      	ldr	r0, [pc, #8]	; (8001a2c <DisplayTime+0x78>)
 8001a24:	f7ff fba8 	bl	8001178 <Lcd_int>
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000400 	.word	0x20000400
 8001a30:	20000328 	.word	0x20000328
 8001a34:	0800a438 	.word	0x0800a438

08001a38 <DisplayCurrentTemp>:
void DisplayCurrentTemp()//displays current temperature in main view
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
	Lcd_cursor(&lcd, 0,11);
 8001a3e:	220b      	movs	r2, #11
 8001a40:	2100      	movs	r1, #0
 8001a42:	481a      	ldr	r0, [pc, #104]	; (8001aac <DisplayCurrentTemp+0x74>)
 8001a44:	f7ff fbd0 	bl	80011e8 <Lcd_cursor>
	int temp_float = (int)(temp*10)%10;
 8001a48:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <DisplayCurrentTemp+0x78>)
 8001a4a:	edd3 7a00 	vldr	s15, [r3]
 8001a4e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a5a:	ee17 2a90 	vmov	r2, s15
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <DisplayCurrentTemp+0x7c>)
 8001a60:	fb83 1302 	smull	r1, r3, r3, r2
 8001a64:	1099      	asrs	r1, r3, #2
 8001a66:	17d3      	asrs	r3, r2, #31
 8001a68:	1ac9      	subs	r1, r1, r3
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	440b      	add	r3, r1
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	607b      	str	r3, [r7, #4]
	Lcd_int(&lcd, (int)temp);
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <DisplayCurrentTemp+0x78>)
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a80:	ee17 1a90 	vmov	r1, s15
 8001a84:	4809      	ldr	r0, [pc, #36]	; (8001aac <DisplayCurrentTemp+0x74>)
 8001a86:	f7ff fb77 	bl	8001178 <Lcd_int>
	Lcd_string(&lcd, ".");
 8001a8a:	490b      	ldr	r1, [pc, #44]	; (8001ab8 <DisplayCurrentTemp+0x80>)
 8001a8c:	4807      	ldr	r0, [pc, #28]	; (8001aac <DisplayCurrentTemp+0x74>)
 8001a8e:	f7ff fb8b 	bl	80011a8 <Lcd_string>
	Lcd_int(&lcd, temp_float);
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4805      	ldr	r0, [pc, #20]	; (8001aac <DisplayCurrentTemp+0x74>)
 8001a96:	f7ff fb6f 	bl	8001178 <Lcd_int>
	Lcd_string(&lcd, "C");
 8001a9a:	4908      	ldr	r1, [pc, #32]	; (8001abc <DisplayCurrentTemp+0x84>)
 8001a9c:	4803      	ldr	r0, [pc, #12]	; (8001aac <DisplayCurrentTemp+0x74>)
 8001a9e:	f7ff fb83 	bl	80011a8 <Lcd_string>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000400 	.word	0x20000400
 8001ab0:	20000314 	.word	0x20000314
 8001ab4:	66666667 	.word	0x66666667
 8001ab8:	0800a43c 	.word	0x0800a43c
 8001abc:	0800a440 	.word	0x0800a440

08001ac0 <DisplayBoilerState>:
void DisplayBoilerState()//displays state of boiler
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	if(boiler_state == true)
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <DisplayBoilerState+0x38>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d009      	beq.n	8001ae0 <DisplayBoilerState+0x20>
	{
	    	Lcd_cursor(&lcd, 1,0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2101      	movs	r1, #1
 8001ad0:	480a      	ldr	r0, [pc, #40]	; (8001afc <DisplayBoilerState+0x3c>)
 8001ad2:	f7ff fb89 	bl	80011e8 <Lcd_cursor>
	    	Lcd_string(&lcd, "Grzanie");
 8001ad6:	490a      	ldr	r1, [pc, #40]	; (8001b00 <DisplayBoilerState+0x40>)
 8001ad8:	4808      	ldr	r0, [pc, #32]	; (8001afc <DisplayBoilerState+0x3c>)
 8001ada:	f7ff fb65 	bl	80011a8 <Lcd_string>
	else
	{
		Lcd_cursor(&lcd, 1,0);
	    Lcd_string(&lcd, "       ");
	}
}
 8001ade:	e008      	b.n	8001af2 <DisplayBoilerState+0x32>
		Lcd_cursor(&lcd, 1,0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	4805      	ldr	r0, [pc, #20]	; (8001afc <DisplayBoilerState+0x3c>)
 8001ae6:	f7ff fb7f 	bl	80011e8 <Lcd_cursor>
	    Lcd_string(&lcd, "       ");
 8001aea:	4906      	ldr	r1, [pc, #24]	; (8001b04 <DisplayBoilerState+0x44>)
 8001aec:	4803      	ldr	r0, [pc, #12]	; (8001afc <DisplayBoilerState+0x3c>)
 8001aee:	f7ff fb5b 	bl	80011a8 <Lcd_string>
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000325 	.word	0x20000325
 8001afc:	20000400 	.word	0x20000400
 8001b00:	0800a444 	.word	0x0800a444
 8001b04:	0800a44c 	.word	0x0800a44c

08001b08 <DisplayWorkState>:
void DisplayWorkState()//displays work state and destination temperature
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
	int temp_float, temp;
	if(work_state == true)
 8001b0e:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <DisplayWorkState+0x124>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d040      	beq.n	8001b98 <DisplayWorkState+0x90>
	    {
			temp = (int)dest_temp_H;
 8001b16:	4b46      	ldr	r3, [pc, #280]	; (8001c30 <DisplayWorkState+0x128>)
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b20:	ee17 3a90 	vmov	r3, s15
 8001b24:	607b      	str	r3, [r7, #4]
	    	Lcd_cursor(&lcd, 1,8);
 8001b26:	2208      	movs	r2, #8
 8001b28:	2101      	movs	r1, #1
 8001b2a:	4842      	ldr	r0, [pc, #264]	; (8001c34 <DisplayWorkState+0x12c>)
 8001b2c:	f7ff fb5c 	bl	80011e8 <Lcd_cursor>
	    	Lcd_string(&lcd, "GT:");
 8001b30:	4941      	ldr	r1, [pc, #260]	; (8001c38 <DisplayWorkState+0x130>)
 8001b32:	4840      	ldr	r0, [pc, #256]	; (8001c34 <DisplayWorkState+0x12c>)
 8001b34:	f7ff fb38 	bl	80011a8 <Lcd_string>
	    	temp_float = (int)(dest_temp_H*10)%10;
 8001b38:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <DisplayWorkState+0x128>)
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b4a:	ee17 2a90 	vmov	r2, s15
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <DisplayWorkState+0x134>)
 8001b50:	fb83 1302 	smull	r1, r3, r3, r2
 8001b54:	1099      	asrs	r1, r3, #2
 8001b56:	17d3      	asrs	r3, r2, #31
 8001b58:	1ac9      	subs	r1, r1, r3
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	440b      	add	r3, r1
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	603b      	str	r3, [r7, #0]
	    	Lcd_int(&lcd, temp);
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4832      	ldr	r0, [pc, #200]	; (8001c34 <DisplayWorkState+0x12c>)
 8001b6a:	f7ff fb05 	bl	8001178 <Lcd_int>
	    	Lcd_string(&lcd, ".");
 8001b6e:	4934      	ldr	r1, [pc, #208]	; (8001c40 <DisplayWorkState+0x138>)
 8001b70:	4830      	ldr	r0, [pc, #192]	; (8001c34 <DisplayWorkState+0x12c>)
 8001b72:	f7ff fb19 	bl	80011a8 <Lcd_string>
	    	Lcd_int(&lcd, temp_float);
 8001b76:	6839      	ldr	r1, [r7, #0]
 8001b78:	482e      	ldr	r0, [pc, #184]	; (8001c34 <DisplayWorkState+0x12c>)
 8001b7a:	f7ff fafd 	bl	8001178 <Lcd_int>
	    	if(temp<10)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b09      	cmp	r3, #9
 8001b82:	dc04      	bgt.n	8001b8e <DisplayWorkState+0x86>
	    		Lcd_string(&lcd, "C ");
 8001b84:	492f      	ldr	r1, [pc, #188]	; (8001c44 <DisplayWorkState+0x13c>)
 8001b86:	482b      	ldr	r0, [pc, #172]	; (8001c34 <DisplayWorkState+0x12c>)
 8001b88:	f7ff fb0e 	bl	80011a8 <Lcd_string>
	    	if(temp<10)
	    		Lcd_string(&lcd, "C ");
	    	else
	    		Lcd_string(&lcd, "C");
	    }
}
 8001b8c:	e04a      	b.n	8001c24 <DisplayWorkState+0x11c>
	    		Lcd_string(&lcd, "C");
 8001b8e:	492e      	ldr	r1, [pc, #184]	; (8001c48 <DisplayWorkState+0x140>)
 8001b90:	4828      	ldr	r0, [pc, #160]	; (8001c34 <DisplayWorkState+0x12c>)
 8001b92:	f7ff fb09 	bl	80011a8 <Lcd_string>
}
 8001b96:	e045      	b.n	8001c24 <DisplayWorkState+0x11c>
	    	temp = (int)dest_temp_C;
 8001b98:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <DisplayWorkState+0x144>)
 8001b9a:	edd3 7a00 	vldr	s15, [r3]
 8001b9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ba2:	ee17 3a90 	vmov	r3, s15
 8001ba6:	607b      	str	r3, [r7, #4]
	    	Lcd_cursor(&lcd, 1,8);
 8001ba8:	2208      	movs	r2, #8
 8001baa:	2101      	movs	r1, #1
 8001bac:	4821      	ldr	r0, [pc, #132]	; (8001c34 <DisplayWorkState+0x12c>)
 8001bae:	f7ff fb1b 	bl	80011e8 <Lcd_cursor>
	    	Lcd_string(&lcd, "DT:");
 8001bb2:	4927      	ldr	r1, [pc, #156]	; (8001c50 <DisplayWorkState+0x148>)
 8001bb4:	481f      	ldr	r0, [pc, #124]	; (8001c34 <DisplayWorkState+0x12c>)
 8001bb6:	f7ff faf7 	bl	80011a8 <Lcd_string>
	    	temp_float = (int)(dest_temp_C*10)%10;
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <DisplayWorkState+0x144>)
 8001bbc:	edd3 7a00 	vldr	s15, [r3]
 8001bc0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bcc:	ee17 2a90 	vmov	r2, s15
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <DisplayWorkState+0x134>)
 8001bd2:	fb83 1302 	smull	r1, r3, r3, r2
 8001bd6:	1099      	asrs	r1, r3, #2
 8001bd8:	17d3      	asrs	r3, r2, #31
 8001bda:	1ac9      	subs	r1, r1, r3
 8001bdc:	460b      	mov	r3, r1
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	603b      	str	r3, [r7, #0]
	    	Lcd_int(&lcd, (int)dest_temp_C);
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <DisplayWorkState+0x144>)
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bf2:	ee17 1a90 	vmov	r1, s15
 8001bf6:	480f      	ldr	r0, [pc, #60]	; (8001c34 <DisplayWorkState+0x12c>)
 8001bf8:	f7ff fabe 	bl	8001178 <Lcd_int>
	    	Lcd_string(&lcd, ".");
 8001bfc:	4910      	ldr	r1, [pc, #64]	; (8001c40 <DisplayWorkState+0x138>)
 8001bfe:	480d      	ldr	r0, [pc, #52]	; (8001c34 <DisplayWorkState+0x12c>)
 8001c00:	f7ff fad2 	bl	80011a8 <Lcd_string>
	    	Lcd_int(&lcd, temp_float);
 8001c04:	6839      	ldr	r1, [r7, #0]
 8001c06:	480b      	ldr	r0, [pc, #44]	; (8001c34 <DisplayWorkState+0x12c>)
 8001c08:	f7ff fab6 	bl	8001178 <Lcd_int>
	    	if(temp<10)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b09      	cmp	r3, #9
 8001c10:	dc04      	bgt.n	8001c1c <DisplayWorkState+0x114>
	    		Lcd_string(&lcd, "C ");
 8001c12:	490c      	ldr	r1, [pc, #48]	; (8001c44 <DisplayWorkState+0x13c>)
 8001c14:	4807      	ldr	r0, [pc, #28]	; (8001c34 <DisplayWorkState+0x12c>)
 8001c16:	f7ff fac7 	bl	80011a8 <Lcd_string>
}
 8001c1a:	e003      	b.n	8001c24 <DisplayWorkState+0x11c>
	    		Lcd_string(&lcd, "C");
 8001c1c:	490a      	ldr	r1, [pc, #40]	; (8001c48 <DisplayWorkState+0x140>)
 8001c1e:	4805      	ldr	r0, [pc, #20]	; (8001c34 <DisplayWorkState+0x12c>)
 8001c20:	f7ff fac2 	bl	80011a8 <Lcd_string>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	20000004 	.word	0x20000004
 8001c34:	20000400 	.word	0x20000400
 8001c38:	0800a454 	.word	0x0800a454
 8001c3c:	66666667 	.word	0x66666667
 8001c40:	0800a43c 	.word	0x0800a43c
 8001c44:	0800a458 	.word	0x0800a458
 8001c48:	0800a440 	.word	0x0800a440
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	0800a45c 	.word	0x0800a45c

08001c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c54:	b5b0      	push	{r4, r5, r7, lr}
 8001c56:	b08c      	sub	sp, #48	; 0x30
 8001c58:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c5a:	f000 fd19 	bl	8002690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c5e:	f000 fa23 	bl	80020a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c62:	f7ff f8d9 	bl	8000e18 <MX_GPIO_Init>
  MX_RTC_Init();
 8001c66:	f000 fa81 	bl	800216c <MX_RTC_Init>
  MX_ADC1_Init();
 8001c6a:	f7fe ff9d 	bl	8000ba8 <MX_ADC1_Init>
  MX_TIM7_Init();
 8001c6e:	f000 fc6b 	bl	8002548 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001c72:	f7ff f991 	bl	8000f98 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001c76:	f000 fc31 	bl	80024dc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 8001c7a:	4c80      	ldr	r4, [pc, #512]	; (8001e7c <main+0x228>)
 8001c7c:	4638      	mov	r0, r7
 8001c7e:	2300      	movs	r3, #0
 8001c80:	9303      	str	r3, [sp, #12]
 8001c82:	2310      	movs	r3, #16
 8001c84:	9302      	str	r3, [sp, #8]
 8001c86:	4b7e      	ldr	r3, [pc, #504]	; (8001e80 <main+0x22c>)
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	4b7c      	ldr	r3, [pc, #496]	; (8001e80 <main+0x22c>)
 8001c90:	4a7c      	ldr	r2, [pc, #496]	; (8001e84 <main+0x230>)
 8001c92:	497d      	ldr	r1, [pc, #500]	; (8001e88 <main+0x234>)
 8001c94:	f7ff fa1c 	bl	80010d0 <Lcd_create>
 8001c98:	4625      	mov	r5, r4
 8001c9a:	463c      	mov	r4, r7
 8001c9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ca4:	e885 0003 	stmia.w	r5, {r0, r1}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start_IT(&htim7);//timer starts
 8001ca8:	4878      	ldr	r0, [pc, #480]	; (8001e8c <main+0x238>)
 8001caa:	f005 f8c7 	bl	8006e3c <HAL_TIM_Base_Start_IT>
  __HAL_TIM_SET_COUNTER(&htim7,1474);
 8001cae:	4b77      	ldr	r3, [pc, #476]	; (8001e8c <main+0x238>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f240 52c2 	movw	r2, #1474	; 0x5c2
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start_IT(&htim6);
 8001cb8:	4875      	ldr	r0, [pc, #468]	; (8001e90 <main+0x23c>)
 8001cba:	f005 f8bf 	bl	8006e3c <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);//calibration of ADC
 8001cbe:	217f      	movs	r1, #127	; 0x7f
 8001cc0:	4874      	ldr	r0, [pc, #464]	; (8001e94 <main+0x240>)
 8001cc2:	f001 ffcd 	bl	8003c60 <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start(&hadc1);
 8001cc6:	4873      	ldr	r0, [pc, #460]	; (8001e94 <main+0x240>)
 8001cc8:	f001 f902 	bl	8002ed0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);//first reading
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd0:	4870      	ldr	r0, [pc, #448]	; (8001e94 <main+0x240>)
 8001cd2:	f001 f9b7 	bl	8003044 <HAL_ADC_PollForConversion>


  value = HAL_ADC_GetValue(&hadc1);
 8001cd6:	486f      	ldr	r0, [pc, #444]	; (8001e94 <main+0x240>)
 8001cd8:	f001 fa8c 	bl	80031f4 <HAL_ADC_GetValue>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4a6e      	ldr	r2, [pc, #440]	; (8001e98 <main+0x244>)
 8001ce0:	6013      	str	r3, [r2, #0]
  temp = value*330.0f/4096.0f;
 8001ce2:	4b6d      	ldr	r3, [pc, #436]	; (8001e98 <main+0x244>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	ee07 3a90 	vmov	s15, r3
 8001cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cee:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001e9c <main+0x248>
 8001cf2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cf6:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8001ea0 <main+0x24c>
 8001cfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cfe:	4b69      	ldr	r3, [pc, #420]	; (8001ea4 <main+0x250>)
 8001d00:	edc3 7a00 	vstr	s15, [r3]


  time.Hours = 00;
 8001d04:	4b68      	ldr	r3, [pc, #416]	; (8001ea8 <main+0x254>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
  time.Minutes = 00;
 8001d0a:	4b67      	ldr	r3, [pc, #412]	; (8001ea8 <main+0x254>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	705a      	strb	r2, [r3, #1]
  time.Seconds = 00;
 8001d10:	4b65      	ldr	r3, [pc, #404]	; (8001ea8 <main+0x254>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	709a      	strb	r2, [r3, #2]
  time.TimeFormat = RTC_HOURFORMAT_24;
 8001d16:	4b64      	ldr	r3, [pc, #400]	; (8001ea8 <main+0x254>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	70da      	strb	r2, [r3, #3]
  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4962      	ldr	r1, [pc, #392]	; (8001ea8 <main+0x254>)
 8001d20:	4862      	ldr	r0, [pc, #392]	; (8001eac <main+0x258>)
 8001d22:	f004 fd94 	bl	800684e <HAL_RTC_SetTime>
  time.TimeFormat = RTC_HOURFORMAT_24;
 8001d26:	4b60      	ldr	r3, [pc, #384]	; (8001ea8 <main+0x254>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	70da      	strb	r2, [r3, #3]


  if(eeprom_read(0x00, schedule, sizeof(schedule))==HAL_OK)
 8001d2c:	22a8      	movs	r2, #168	; 0xa8
 8001d2e:	4960      	ldr	r1, [pc, #384]	; (8001eb0 <main+0x25c>)
 8001d30:	2000      	movs	r0, #0
 8001d32:	f7ff f82b 	bl	8000d8c <eeprom_read>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d103      	bne.n	8001d44 <main+0xf0>
  {
	  printf("successful read\n");
 8001d3c:	485d      	ldr	r0, [pc, #372]	; (8001eb4 <main+0x260>)
 8001d3e:	f006 f8c5 	bl	8007ecc <puts>
 8001d42:	e002      	b.n	8001d4a <main+0xf6>
  }
  else
	  printf("failed read\n");
 8001d44:	485c      	ldr	r0, [pc, #368]	; (8001eb8 <main+0x264>)
 8001d46:	f006 f8c1 	bl	8007ecc <puts>

  while (1)
  {
	  if(menu_enabled==true)
 8001d4a:	4b5c      	ldr	r3, [pc, #368]	; (8001ebc <main+0x268>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 80f5 	beq.w	8001f40 <main+0x2ec>
	  {
		  HAL_TIM_Base_Stop_IT(&htim6);
 8001d56:	484e      	ldr	r0, [pc, #312]	; (8001e90 <main+0x23c>)
 8001d58:	f005 f8e0 	bl	8006f1c <HAL_TIM_Base_Stop_IT>
		  Lcd_clear(&lcd);
 8001d5c:	4847      	ldr	r0, [pc, #284]	; (8001e7c <main+0x228>)
 8001d5e:	f7ff fa5d 	bl	800121c <Lcd_clear>
		  Lcd_cursor(&lcd, 0,3);
 8001d62:	2203      	movs	r2, #3
 8001d64:	2100      	movs	r1, #0
 8001d66:	4845      	ldr	r0, [pc, #276]	; (8001e7c <main+0x228>)
 8001d68:	f7ff fa3e 	bl	80011e8 <Lcd_cursor>
		  Lcd_string(&lcd, "Ustaw plan");
 8001d6c:	4954      	ldr	r1, [pc, #336]	; (8001ec0 <main+0x26c>)
 8001d6e:	4843      	ldr	r0, [pc, #268]	; (8001e7c <main+0x228>)
 8001d70:	f7ff fa1a 	bl	80011a8 <Lcd_string>
		  DisplayDayInMenu();
 8001d74:	f7ff fdb0 	bl	80018d8 <DisplayDayInMenu>
		  DisplayHourInMenu();
 8001d78:	f7ff fdc6 	bl	8001908 <DisplayHourInMenu>
		  DisplayModeInMenu();
 8001d7c:	f7ff fde6 	bl	800194c <DisplayModeInMenu>
		  HAL_Delay(200);
 8001d80:	20c8      	movs	r0, #200	; 0xc8
 8001d82:	f000 fd01 	bl	8002788 <HAL_Delay>

		  while(menu_enabled == true)
 8001d86:	e037      	b.n	8001df8 <main+0x1a4>
		  {
			  if(p_week_day != week_day)
 8001d88:	4b4e      	ldr	r3, [pc, #312]	; (8001ec4 <main+0x270>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b4e      	ldr	r3, [pc, #312]	; (8001ec8 <main+0x274>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d005      	beq.n	8001da0 <main+0x14c>
			  {
				  p_week_day = week_day;
 8001d94:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <main+0x274>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a4a      	ldr	r2, [pc, #296]	; (8001ec4 <main+0x270>)
 8001d9a:	6013      	str	r3, [r2, #0]
				  DisplayDayInMenu();
 8001d9c:	f7ff fd9c 	bl	80018d8 <DisplayDayInMenu>
			  }
			  if(p_hour != hour)
 8001da0:	4b4a      	ldr	r3, [pc, #296]	; (8001ecc <main+0x278>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b4a      	ldr	r3, [pc, #296]	; (8001ed0 <main+0x27c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d005      	beq.n	8001db8 <main+0x164>
			  {
				  p_hour = hour;
 8001dac:	4b48      	ldr	r3, [pc, #288]	; (8001ed0 <main+0x27c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a46      	ldr	r2, [pc, #280]	; (8001ecc <main+0x278>)
 8001db2:	6013      	str	r3, [r2, #0]
				  DisplayHourInMenu();
 8001db4:	f7ff fda8 	bl	8001908 <DisplayHourInMenu>
			  }
			  if(p_mode != schedule[week_day][hour])
 8001db8:	4b43      	ldr	r3, [pc, #268]	; (8001ec8 <main+0x274>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b44      	ldr	r3, [pc, #272]	; (8001ed0 <main+0x27c>)
 8001dbe:	6819      	ldr	r1, [r3, #0]
 8001dc0:	483b      	ldr	r0, [pc, #236]	; (8001eb0 <main+0x25c>)
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	4403      	add	r3, r0
 8001dcc:	440b      	add	r3, r1
 8001dce:	781a      	ldrb	r2, [r3, #0]
 8001dd0:	4b40      	ldr	r3, [pc, #256]	; (8001ed4 <main+0x280>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d00f      	beq.n	8001df8 <main+0x1a4>
			  {
				  p_mode = schedule[week_day][hour];
 8001dd8:	4b3b      	ldr	r3, [pc, #236]	; (8001ec8 <main+0x274>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b3c      	ldr	r3, [pc, #240]	; (8001ed0 <main+0x27c>)
 8001dde:	6819      	ldr	r1, [r3, #0]
 8001de0:	4833      	ldr	r0, [pc, #204]	; (8001eb0 <main+0x25c>)
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4403      	add	r3, r0
 8001dec:	440b      	add	r3, r1
 8001dee:	781a      	ldrb	r2, [r3, #0]
 8001df0:	4b38      	ldr	r3, [pc, #224]	; (8001ed4 <main+0x280>)
 8001df2:	701a      	strb	r2, [r3, #0]
				  DisplayModeInMenu();
 8001df4:	f7ff fdaa 	bl	800194c <DisplayModeInMenu>
		  while(menu_enabled == true)
 8001df8:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <main+0x268>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1c2      	bne.n	8001d88 <main+0x134>
		  }
			  /*if(HAL_GPIO_ReadPin(MENU_BUTTON_GPIO_Port, MENU_BUTTON_Pin) == GPIO_PIN_RESET)
			  {*/
				  //menu_enabled = false;

				  Lcd_clear(&lcd);
 8001e02:	481e      	ldr	r0, [pc, #120]	; (8001e7c <main+0x228>)
 8001e04:	f7ff fa0a 	bl	800121c <Lcd_clear>
				  Lcd_cursor(&lcd, 0, 2);
 8001e08:	2202      	movs	r2, #2
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	481b      	ldr	r0, [pc, #108]	; (8001e7c <main+0x228>)
 8001e0e:	f7ff f9eb 	bl	80011e8 <Lcd_cursor>
				  Lcd_string(&lcd, "Zapisywanie");
 8001e12:	4931      	ldr	r1, [pc, #196]	; (8001ed8 <main+0x284>)
 8001e14:	4819      	ldr	r0, [pc, #100]	; (8001e7c <main+0x228>)
 8001e16:	f7ff f9c7 	bl	80011a8 <Lcd_string>

				  work_state = schedule[date.WeekDay-1][time.Hours];
 8001e1a:	4b30      	ldr	r3, [pc, #192]	; (8001edc <main+0x288>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	1e5a      	subs	r2, r3, #1
 8001e20:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <main+0x254>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	4922      	ldr	r1, [pc, #136]	; (8001eb0 <main+0x25c>)
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	440b      	add	r3, r1
 8001e32:	4403      	add	r3, r0
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <main+0x28c>)
 8001e38:	701a      	strb	r2, [r3, #0]
				  uint8_t day,hour,address = 0x00;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	777b      	strb	r3, [r7, #29]
				  for(day=0;day<7;day++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	77fb      	strb	r3, [r7, #31]
 8001e42:	e063      	b.n	8001f0c <main+0x2b8>
				  {
					  for(hour=0;hour<24;hour++)
 8001e44:	2300      	movs	r3, #0
 8001e46:	77bb      	strb	r3, [r7, #30]
 8001e48:	e05a      	b.n	8001f00 <main+0x2ac>
					  {
						  if(eeprom_write(address, &schedule[day][hour], 1)==HAL_OK)
 8001e4a:	7f78      	ldrb	r0, [r7, #29]
 8001e4c:	7ffa      	ldrb	r2, [r7, #31]
 8001e4e:	7fb9      	ldrb	r1, [r7, #30]
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	440b      	add	r3, r1
 8001e5a:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <main+0x25c>)
 8001e5c:	4413      	add	r3, r2
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4619      	mov	r1, r3
 8001e62:	f7fe ffb1 	bl	8000dc8 <eeprom_write>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d13d      	bne.n	8001ee8 <main+0x294>
							  printf("%d %d write success\n",day,hour);
 8001e6c:	7ffb      	ldrb	r3, [r7, #31]
 8001e6e:	7fba      	ldrb	r2, [r7, #30]
 8001e70:	4619      	mov	r1, r3
 8001e72:	481c      	ldr	r0, [pc, #112]	; (8001ee4 <main+0x290>)
 8001e74:	f005 ffa4 	bl	8007dc0 <iprintf>
 8001e78:	e03c      	b.n	8001ef4 <main+0x2a0>
 8001e7a:	bf00      	nop
 8001e7c:	20000400 	.word	0x20000400
 8001e80:	48000400 	.word	0x48000400
 8001e84:	20000054 	.word	0x20000054
 8001e88:	20000044 	.word	0x20000044
 8001e8c:	2000048c 	.word	0x2000048c
 8001e90:	20000440 	.word	0x20000440
 8001e94:	20000254 	.word	0x20000254
 8001e98:	20000310 	.word	0x20000310
 8001e9c:	43a50000 	.word	0x43a50000
 8001ea0:	45800000 	.word	0x45800000
 8001ea4:	20000314 	.word	0x20000314
 8001ea8:	20000328 	.word	0x20000328
 8001eac:	20000418 	.word	0x20000418
 8001eb0:	20000344 	.word	0x20000344
 8001eb4:	0800a460 	.word	0x0800a460
 8001eb8:	0800a470 	.word	0x0800a470
 8001ebc:	200003fd 	.word	0x200003fd
 8001ec0:	0800a47c 	.word	0x0800a47c
 8001ec4:	200003f0 	.word	0x200003f0
 8001ec8:	200003ec 	.word	0x200003ec
 8001ecc:	200003f8 	.word	0x200003f8
 8001ed0:	200003f4 	.word	0x200003f4
 8001ed4:	200003fc 	.word	0x200003fc
 8001ed8:	0800a488 	.word	0x0800a488
 8001edc:	2000033c 	.word	0x2000033c
 8001ee0:	20000008 	.word	0x20000008
 8001ee4:	0800a494 	.word	0x0800a494
						  else
							  printf("%d %d write failed\n",day,hour);
 8001ee8:	7ffb      	ldrb	r3, [r7, #31]
 8001eea:	7fba      	ldrb	r2, [r7, #30]
 8001eec:	4619      	mov	r1, r3
 8001eee:	485b      	ldr	r0, [pc, #364]	; (800205c <main+0x408>)
 8001ef0:	f005 ff66 	bl	8007dc0 <iprintf>
						  address++;
 8001ef4:	7f7b      	ldrb	r3, [r7, #29]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	777b      	strb	r3, [r7, #29]
					  for(hour=0;hour<24;hour++)
 8001efa:	7fbb      	ldrb	r3, [r7, #30]
 8001efc:	3301      	adds	r3, #1
 8001efe:	77bb      	strb	r3, [r7, #30]
 8001f00:	7fbb      	ldrb	r3, [r7, #30]
 8001f02:	2b17      	cmp	r3, #23
 8001f04:	d9a1      	bls.n	8001e4a <main+0x1f6>
				  for(day=0;day<7;day++)
 8001f06:	7ffb      	ldrb	r3, [r7, #31]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	77fb      	strb	r3, [r7, #31]
 8001f0c:	7ffb      	ldrb	r3, [r7, #31]
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d998      	bls.n	8001e44 <main+0x1f0>
					  }
				  }


				  Lcd_clear(&lcd);
 8001f12:	4853      	ldr	r0, [pc, #332]	; (8002060 <main+0x40c>)
 8001f14:	f7ff f982 	bl	800121c <Lcd_clear>
				  DisplayTime();
 8001f18:	f7ff fd4c 	bl	80019b4 <DisplayTime>
				  DisplayDay();
 8001f1c:	f7ff fcc2 	bl	80018a4 <DisplayDay>
				  DisplayCurrentTemp();
 8001f20:	f7ff fd8a 	bl	8001a38 <DisplayCurrentTemp>
				  DisplayBoilerState();
 8001f24:	f7ff fdcc 	bl	8001ac0 <DisplayBoilerState>
				  DisplayWorkState();
 8001f28:	f7ff fdee 	bl	8001b08 <DisplayWorkState>


				  HAL_Delay(200);
 8001f2c:	20c8      	movs	r0, #200	; 0xc8
 8001f2e:	f000 fc2b 	bl	8002788 <HAL_Delay>
				  /*while(HAL_GPIO_ReadPin(MENU_BUTTON_GPIO_Port, MENU_BUTTON_Pin) == GPIO_PIN_RESET)
				  {}*/
			  //}
	  	  //}
		  __HAL_TIM_SET_COUNTER(&htim6,0);
 8001f32:	4b4c      	ldr	r3, [pc, #304]	; (8002064 <main+0x410>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2200      	movs	r2, #0
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
		  HAL_TIM_Base_Start_IT(&htim6);
 8001f3a:	484a      	ldr	r0, [pc, #296]	; (8002064 <main+0x410>)
 8001f3c:	f004 ff7e 	bl	8006e3c <HAL_TIM_Base_Start_IT>
	  }
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001f40:	2200      	movs	r2, #0
 8001f42:	4949      	ldr	r1, [pc, #292]	; (8002068 <main+0x414>)
 8001f44:	4849      	ldr	r0, [pc, #292]	; (800206c <main+0x418>)
 8001f46:	f004 fd1f 	bl	8006988 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	4948      	ldr	r1, [pc, #288]	; (8002070 <main+0x41c>)
 8001f4e:	4847      	ldr	r0, [pc, #284]	; (800206c <main+0x418>)
 8001f50:	f004 fdfd 	bl	8006b4e <HAL_RTC_GetDate>
	  if(pTime.Minutes!=time.Minutes || pTime.Hours!=time.Hours)
 8001f54:	4b47      	ldr	r3, [pc, #284]	; (8002074 <main+0x420>)
 8001f56:	785a      	ldrb	r2, [r3, #1]
 8001f58:	4b43      	ldr	r3, [pc, #268]	; (8002068 <main+0x414>)
 8001f5a:	785b      	ldrb	r3, [r3, #1]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d105      	bne.n	8001f6c <main+0x318>
 8001f60:	4b44      	ldr	r3, [pc, #272]	; (8002074 <main+0x420>)
 8001f62:	781a      	ldrb	r2, [r3, #0]
 8001f64:	4b40      	ldr	r3, [pc, #256]	; (8002068 <main+0x414>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d01f      	beq.n	8001fac <main+0x358>
	  {
		  if(pTime.Hours!=time.Hours)
 8001f6c:	4b41      	ldr	r3, [pc, #260]	; (8002074 <main+0x420>)
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <main+0x414>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d00f      	beq.n	8001f98 <main+0x344>
		  {
			  work_state = schedule[date.WeekDay-1][time.Hours];
 8001f78:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <main+0x41c>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	1e5a      	subs	r2, r3, #1
 8001f7e:	4b3a      	ldr	r3, [pc, #232]	; (8002068 <main+0x414>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	493c      	ldr	r1, [pc, #240]	; (8002078 <main+0x424>)
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	4403      	add	r3, r0
 8001f92:	781a      	ldrb	r2, [r3, #0]
 8001f94:	4b39      	ldr	r3, [pc, #228]	; (800207c <main+0x428>)
 8001f96:	701a      	strb	r2, [r3, #0]
		  }
		  DisplayTime();
 8001f98:	f7ff fd0c 	bl	80019b4 <DisplayTime>
		  pTime = time;
 8001f9c:	4a35      	ldr	r2, [pc, #212]	; (8002074 <main+0x420>)
 8001f9e:	4b32      	ldr	r3, [pc, #200]	; (8002068 <main+0x414>)
 8001fa0:	4614      	mov	r4, r2
 8001fa2:	461d      	mov	r5, r3
 8001fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fa8:	682b      	ldr	r3, [r5, #0]
 8001faa:	6023      	str	r3, [r4, #0]
	  }
	  if(pDate.WeekDay!=date.WeekDay)
 8001fac:	4b34      	ldr	r3, [pc, #208]	; (8002080 <main+0x42c>)
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <main+0x41c>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d005      	beq.n	8001fc4 <main+0x370>
	  {
		  DisplayDay();
 8001fb8:	f7ff fc74 	bl	80018a4 <DisplayDay>
		  pDate = date;
 8001fbc:	4a30      	ldr	r2, [pc, #192]	; (8002080 <main+0x42c>)
 8001fbe:	4b2c      	ldr	r3, [pc, #176]	; (8002070 <main+0x41c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6013      	str	r3, [r2, #0]
	  }
	  if(p_temp!=temp)
 8001fc4:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <main+0x430>)
 8001fc6:	ed93 7a00 	vldr	s14, [r3]
 8001fca:	4b2f      	ldr	r3, [pc, #188]	; (8002088 <main+0x434>)
 8001fcc:	edd3 7a00 	vldr	s15, [r3]
 8001fd0:	eeb4 7a67 	vcmp.f32	s14, s15
 8001fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd8:	d005      	beq.n	8001fe6 <main+0x392>
	  {
		  DisplayCurrentTemp();
 8001fda:	f7ff fd2d 	bl	8001a38 <DisplayCurrentTemp>
		  p_temp = temp;
 8001fde:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <main+0x434>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a28      	ldr	r2, [pc, #160]	; (8002084 <main+0x430>)
 8001fe4:	6013      	str	r3, [r2, #0]
	  }
	  if(p_boiler_state!=boiler_state)
 8001fe6:	4b29      	ldr	r3, [pc, #164]	; (800208c <main+0x438>)
 8001fe8:	781a      	ldrb	r2, [r3, #0]
 8001fea:	4b29      	ldr	r3, [pc, #164]	; (8002090 <main+0x43c>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d005      	beq.n	8001ffe <main+0x3aa>
	  {
		  DisplayBoilerState();
 8001ff2:	f7ff fd65 	bl	8001ac0 <DisplayBoilerState>
		  p_boiler_state = boiler_state;
 8001ff6:	4b26      	ldr	r3, [pc, #152]	; (8002090 <main+0x43c>)
 8001ff8:	781a      	ldrb	r2, [r3, #0]
 8001ffa:	4b24      	ldr	r3, [pc, #144]	; (800208c <main+0x438>)
 8001ffc:	701a      	strb	r2, [r3, #0]
	  }
	  if(p_work_state!=work_state || p_dest_temp_C!=dest_temp_C || p_dest_temp_H!=dest_temp_H)
 8001ffe:	4b25      	ldr	r3, [pc, #148]	; (8002094 <main+0x440>)
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	4b1e      	ldr	r3, [pc, #120]	; (800207c <main+0x428>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d116      	bne.n	8002038 <main+0x3e4>
 800200a:	4b23      	ldr	r3, [pc, #140]	; (8002098 <main+0x444>)
 800200c:	ed93 7a00 	vldr	s14, [r3]
 8002010:	4b22      	ldr	r3, [pc, #136]	; (800209c <main+0x448>)
 8002012:	edd3 7a00 	vldr	s15, [r3]
 8002016:	eeb4 7a67 	vcmp.f32	s14, s15
 800201a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201e:	d10b      	bne.n	8002038 <main+0x3e4>
 8002020:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <main+0x44c>)
 8002022:	ed93 7a00 	vldr	s14, [r3]
 8002026:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <main+0x450>)
 8002028:	edd3 7a00 	vldr	s15, [r3]
 800202c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002034:	f43f ae89 	beq.w	8001d4a <main+0xf6>
	  {
		  DisplayWorkState();
 8002038:	f7ff fd66 	bl	8001b08 <DisplayWorkState>
		  CheckHisteresis();
 800203c:	f7ff f996 	bl	800136c <CheckHisteresis>
		  p_work_state = work_state;
 8002040:	4b0e      	ldr	r3, [pc, #56]	; (800207c <main+0x428>)
 8002042:	781a      	ldrb	r2, [r3, #0]
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <main+0x440>)
 8002046:	701a      	strb	r2, [r3, #0]
		  p_dest_temp_C = dest_temp_C;
 8002048:	4b14      	ldr	r3, [pc, #80]	; (800209c <main+0x448>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a12      	ldr	r2, [pc, #72]	; (8002098 <main+0x444>)
 800204e:	6013      	str	r3, [r2, #0]
		  p_dest_temp_H = dest_temp_H;
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <main+0x450>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <main+0x44c>)
 8002056:	6013      	str	r3, [r2, #0]
	  if(menu_enabled==true)
 8002058:	e677      	b.n	8001d4a <main+0xf6>
 800205a:	bf00      	nop
 800205c:	0800a4ac 	.word	0x0800a4ac
 8002060:	20000400 	.word	0x20000400
 8002064:	20000440 	.word	0x20000440
 8002068:	20000328 	.word	0x20000328
 800206c:	20000418 	.word	0x20000418
 8002070:	2000033c 	.word	0x2000033c
 8002074:	20000030 	.word	0x20000030
 8002078:	20000344 	.word	0x20000344
 800207c:	20000008 	.word	0x20000008
 8002080:	20000340 	.word	0x20000340
 8002084:	20000318 	.word	0x20000318
 8002088:	20000314 	.word	0x20000314
 800208c:	20000326 	.word	0x20000326
 8002090:	20000325 	.word	0x20000325
 8002094:	20000324 	.word	0x20000324
 8002098:	2000031c 	.word	0x2000031c
 800209c:	20000000 	.word	0x20000000
 80020a0:	20000320 	.word	0x20000320
 80020a4:	20000004 	.word	0x20000004

080020a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b096      	sub	sp, #88	; 0x58
 80020ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	2244      	movs	r2, #68	; 0x44
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f005 fa10 	bl	80074dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020bc:	463b      	mov	r3, r7
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]
 80020c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80020ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80020ce:	f003 f811 	bl	80050f4 <HAL_PWREx_ControlVoltageScaling>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80020d8:	f000 f842 	bl	8002160 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80020dc:	f002 ffb8 	bl	8005050 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80020e0:	4b1e      	ldr	r3, [pc, #120]	; (800215c <SystemClock_Config+0xb4>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e6:	4a1d      	ldr	r2, [pc, #116]	; (800215c <SystemClock_Config+0xb4>)
 80020e8:	f023 0318 	bic.w	r3, r3, #24
 80020ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80020f0:	2316      	movs	r3, #22
 80020f2:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80020f4:	2301      	movs	r3, #1
 80020f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020fe:	2310      	movs	r3, #16
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002102:	2301      	movs	r3, #1
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800210a:	2340      	movs	r3, #64	; 0x40
 800210c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800210e:	2300      	movs	r3, #0
 8002110:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4618      	mov	r0, r3
 8002118:	f003 f88a 	bl	8005230 <HAL_RCC_OscConfig>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002122:	f000 f81d 	bl	8002160 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002126:	230f      	movs	r3, #15
 8002128:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800213a:	463b      	mov	r3, r7
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f003 fc52 	bl	80059e8 <HAL_RCC_ClockConfig>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800214a:	f000 f809 	bl	8002160 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800214e:	f004 f921 	bl	8006394 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002152:	bf00      	nop
 8002154:	3758      	adds	r7, #88	; 0x58
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000

08002160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002164:	b672      	cpsid	i
}
 8002166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002168:	e7fe      	b.n	8002168 <Error_Handler+0x8>
	...

0800216c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002170:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <MX_RTC_Init+0x48>)
 8002172:	4a11      	ldr	r2, [pc, #68]	; (80021b8 <MX_RTC_Init+0x4c>)
 8002174:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <MX_RTC_Init+0x48>)
 8002178:	2200      	movs	r2, #0
 800217a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <MX_RTC_Init+0x48>)
 800217e:	227f      	movs	r2, #127	; 0x7f
 8002180:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <MX_RTC_Init+0x48>)
 8002184:	22ff      	movs	r2, #255	; 0xff
 8002186:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <MX_RTC_Init+0x48>)
 800218a:	2200      	movs	r2, #0
 800218c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <MX_RTC_Init+0x48>)
 8002190:	2200      	movs	r2, #0
 8002192:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002194:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <MX_RTC_Init+0x48>)
 8002196:	2200      	movs	r2, #0
 8002198:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <MX_RTC_Init+0x48>)
 800219c:	2200      	movs	r2, #0
 800219e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021a0:	4804      	ldr	r0, [pc, #16]	; (80021b4 <MX_RTC_Init+0x48>)
 80021a2:	f004 fad9 	bl	8006758 <HAL_RTC_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80021ac:	f7ff ffd8 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000418 	.word	0x20000418
 80021b8:	40002800 	.word	0x40002800

080021bc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b0a4      	sub	sp, #144	; 0x90
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021c4:	f107 0308 	add.w	r3, r7, #8
 80021c8:	2288      	movs	r2, #136	; 0x88
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f005 f985 	bl	80074dc <memset>
  if(rtcHandle->Instance==RTC)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a10      	ldr	r2, [pc, #64]	; (8002218 <HAL_RTC_MspInit+0x5c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d118      	bne.n	800220e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021e0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80021e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021ea:	f107 0308 	add.w	r3, r7, #8
 80021ee:	4618      	mov	r0, r3
 80021f0:	f003 fde6 	bl	8005dc0 <HAL_RCCEx_PeriphCLKConfig>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80021fa:	f7ff ffb1 	bl	8002160 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <HAL_RTC_MspInit+0x60>)
 8002200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002204:	4a05      	ldr	r2, [pc, #20]	; (800221c <HAL_RTC_MspInit+0x60>)
 8002206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800220a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800220e:	bf00      	nop
 8002210:	3790      	adds	r7, #144	; 0x90
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40002800 	.word	0x40002800
 800221c:	40021000 	.word	0x40021000

08002220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002226:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_MspInit+0x44>)
 8002228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800222a:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <HAL_MspInit+0x44>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6613      	str	r3, [r2, #96]	; 0x60
 8002232:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <HAL_MspInit+0x44>)
 8002234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_MspInit+0x44>)
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	4a08      	ldr	r2, [pc, #32]	; (8002264 <HAL_MspInit+0x44>)
 8002244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002248:	6593      	str	r3, [r2, #88]	; 0x58
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_MspInit+0x44>)
 800224c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000

08002268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800226c:	e7fe      	b.n	800226c <NMI_Handler+0x4>

0800226e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002272:	e7fe      	b.n	8002272 <HardFault_Handler+0x4>

08002274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002278:	e7fe      	b.n	8002278 <MemManage_Handler+0x4>

0800227a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800227e:	e7fe      	b.n	800227e <BusFault_Handler+0x4>

08002280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <UsageFault_Handler+0x4>

08002286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b4:	f000 fa48 	bl	8002748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}

080022bc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_BUTTON_Pin);
 80022c0:	2002      	movs	r0, #2
 80022c2:	f002 f8b1 	bl	8004428 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}

080022ca <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DAY_INPUT_Pin);
 80022ce:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80022d2:	f002 f8a9 	bl	8004428 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MINUTE_INPUT_Pin);
 80022d6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80022da:	f002 f8a5 	bl	8004428 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HOUR_INPUT_Pin);
 80022de:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80022e2:	f002 f8a1 	bl	8004428 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DEST_TEMP_CHANGE_Pin);
 80022e6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022ea:	f002 f89d 	bl	8004428 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TEMP_MINUS_Pin);
 80022ee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80022f2:	f002 f899 	bl	8004428 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TEMP_PLUS_Pin);
 80022f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80022fa:	f002 f895 	bl	8004428 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <TIM6_DAC_IRQHandler+0x10>)
 800230a:	f004 fe36 	bl	8006f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000440 	.word	0x20000440

08002318 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <TIM7_IRQHandler+0x10>)
 800231e:	f004 fe2c 	bl	8006f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	2000048c 	.word	0x2000048c

0800232c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
	return 1;
 8002330:	2301      	movs	r3, #1
}
 8002332:	4618      	mov	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_kill>:

int _kill(int pid, int sig)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002346:	f005 f89f 	bl	8007488 <__errno>
 800234a:	4603      	mov	r3, r0
 800234c:	2216      	movs	r2, #22
 800234e:	601a      	str	r2, [r3, #0]
	return -1;
 8002350:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <_exit>:

void _exit (int status)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002364:	f04f 31ff 	mov.w	r1, #4294967295
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ffe7 	bl	800233c <_kill>
	while (1) {}		/* Make sure we hang here */
 800236e:	e7fe      	b.n	800236e <_exit+0x12>

08002370 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	e00a      	b.n	8002398 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002382:	f3af 8000 	nop.w
 8002386:	4601      	mov	r1, r0
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	60ba      	str	r2, [r7, #8]
 800238e:	b2ca      	uxtb	r2, r1
 8002390:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	3301      	adds	r3, #1
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	429a      	cmp	r2, r3
 800239e:	dbf0      	blt.n	8002382 <_read+0x12>
	}

return len;
 80023a0:	687b      	ldr	r3, [r7, #4]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e009      	b.n	80023d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	60ba      	str	r2, [r7, #8]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	3301      	adds	r3, #1
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	dbf1      	blt.n	80023bc <_write+0x12>
	}
	return len;
 80023d8:	687b      	ldr	r3, [r7, #4]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <_close>:

int _close(int file)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
	return -1;
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800240a:	605a      	str	r2, [r3, #4]
	return 0;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <_isatty>:

int _isatty(int file)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
	return 1;
 8002422:	2301      	movs	r3, #1
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
	return 0;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002454:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <_sbrk+0x5c>)
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <_sbrk+0x60>)
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002460:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <_sbrk+0x64>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <_sbrk+0x64>)
 800246a:	4a12      	ldr	r2, [pc, #72]	; (80024b4 <_sbrk+0x68>)
 800246c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	429a      	cmp	r2, r3
 800247a:	d207      	bcs.n	800248c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800247c:	f005 f804 	bl	8007488 <__errno>
 8002480:	4603      	mov	r3, r0
 8002482:	220c      	movs	r2, #12
 8002484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002486:	f04f 33ff 	mov.w	r3, #4294967295
 800248a:	e009      	b.n	80024a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <_sbrk+0x64>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <_sbrk+0x64>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <_sbrk+0x64>)
 800249c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800249e:	68fb      	ldr	r3, [r7, #12]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20018000 	.word	0x20018000
 80024ac:	00000400 	.word	0x00000400
 80024b0:	2000043c 	.word	0x2000043c
 80024b4:	200004f0 	.word	0x200004f0

080024b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <SystemInit+0x20>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	4a05      	ldr	r2, [pc, #20]	; (80024d8 <SystemInit+0x20>)
 80024c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80024ec:	4b14      	ldr	r3, [pc, #80]	; (8002540 <MX_TIM6_Init+0x64>)
 80024ee:	4a15      	ldr	r2, [pc, #84]	; (8002544 <MX_TIM6_Init+0x68>)
 80024f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19999;
 80024f2:	4b13      	ldr	r3, [pc, #76]	; (8002540 <MX_TIM6_Init+0x64>)
 80024f4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80024f8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <MX_TIM6_Init+0x64>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 249;
 8002500:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <MX_TIM6_Init+0x64>)
 8002502:	22f9      	movs	r2, #249	; 0xf9
 8002504:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002506:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <MX_TIM6_Init+0x64>)
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800250c:	480c      	ldr	r0, [pc, #48]	; (8002540 <MX_TIM6_Init+0x64>)
 800250e:	f004 fc3d 	bl	8006d8c <HAL_TIM_Base_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002518:	f7ff fe22 	bl	8002160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800251c:	2300      	movs	r3, #0
 800251e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	4619      	mov	r1, r3
 8002528:	4805      	ldr	r0, [pc, #20]	; (8002540 <MX_TIM6_Init+0x64>)
 800252a:	f004 ff07 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002534:	f7ff fe14 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000440 	.word	0x20000440
 8002544:	40001000 	.word	0x40001000

08002548 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002558:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <MX_TIM7_Init+0x68>)
 800255a:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <MX_TIM7_Init+0x6c>)
 800255c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 19999;
 800255e:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <MX_TIM7_Init+0x68>)
 8002560:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002564:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <MX_TIM7_Init+0x68>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1499;
 800256c:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <MX_TIM7_Init+0x68>)
 800256e:	f240 52db 	movw	r2, #1499	; 0x5db
 8002572:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002574:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <MX_TIM7_Init+0x68>)
 8002576:	2200      	movs	r2, #0
 8002578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800257a:	480d      	ldr	r0, [pc, #52]	; (80025b0 <MX_TIM7_Init+0x68>)
 800257c:	f004 fc06 	bl	8006d8c <HAL_TIM_Base_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002586:	f7ff fdeb 	bl	8002160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	4619      	mov	r1, r3
 8002596:	4806      	ldr	r0, [pc, #24]	; (80025b0 <MX_TIM7_Init+0x68>)
 8002598:	f004 fed0 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80025a2:	f7ff fddd 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	2000048c 	.word	0x2000048c
 80025b4:	40001400 	.word	0x40001400

080025b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1a      	ldr	r2, [pc, #104]	; (8002630 <HAL_TIM_Base_MspInit+0x78>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d114      	bne.n	80025f4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80025ca:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <HAL_TIM_Base_MspInit+0x7c>)
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ce:	4a19      	ldr	r2, [pc, #100]	; (8002634 <HAL_TIM_Base_MspInit+0x7c>)
 80025d0:	f043 0310 	orr.w	r3, r3, #16
 80025d4:	6593      	str	r3, [r2, #88]	; 0x58
 80025d6:	4b17      	ldr	r3, [pc, #92]	; (8002634 <HAL_TIM_Base_MspInit+0x7c>)
 80025d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 11, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	210b      	movs	r1, #11
 80025e6:	2036      	movs	r0, #54	; 0x36
 80025e8:	f001 fd25 	bl	8004036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025ec:	2036      	movs	r0, #54	; 0x36
 80025ee:	f001 fd3e 	bl	800406e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80025f2:	e018      	b.n	8002626 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <HAL_TIM_Base_MspInit+0x80>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d113      	bne.n	8002626 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80025fe:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <HAL_TIM_Base_MspInit+0x7c>)
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	4a0c      	ldr	r2, [pc, #48]	; (8002634 <HAL_TIM_Base_MspInit+0x7c>)
 8002604:	f043 0320 	orr.w	r3, r3, #32
 8002608:	6593      	str	r3, [r2, #88]	; 0x58
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_TIM_Base_MspInit+0x7c>)
 800260c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2105      	movs	r1, #5
 800261a:	2037      	movs	r0, #55	; 0x37
 800261c:	f001 fd0b 	bl	8004036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002620:	2037      	movs	r0, #55	; 0x37
 8002622:	f001 fd24 	bl	800406e <HAL_NVIC_EnableIRQ>
}
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40001000 	.word	0x40001000
 8002634:	40021000 	.word	0x40021000
 8002638:	40001400 	.word	0x40001400

0800263c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800263c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002674 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002640:	f7ff ff3a 	bl	80024b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002644:	480c      	ldr	r0, [pc, #48]	; (8002678 <LoopForever+0x6>)
  ldr r1, =_edata
 8002646:	490d      	ldr	r1, [pc, #52]	; (800267c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002648:	4a0d      	ldr	r2, [pc, #52]	; (8002680 <LoopForever+0xe>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800264c:	e002      	b.n	8002654 <LoopCopyDataInit>

0800264e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002652:	3304      	adds	r3, #4

08002654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002658:	d3f9      	bcc.n	800264e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800265a:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <LoopForever+0x12>)
  ldr r4, =_ebss
 800265c:	4c0a      	ldr	r4, [pc, #40]	; (8002688 <LoopForever+0x16>)
  movs r3, #0
 800265e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002660:	e001      	b.n	8002666 <LoopFillZerobss>

08002662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002664:	3204      	adds	r2, #4

08002666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002668:	d3fb      	bcc.n	8002662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800266a:	f004 ff13 	bl	8007494 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800266e:	f7ff faf1 	bl	8001c54 <main>

08002672 <LoopForever>:

LoopForever:
    b LoopForever
 8002672:	e7fe      	b.n	8002672 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002674:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800267c:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8002680:	0800a8e4 	.word	0x0800a8e4
  ldr r2, =_sbss
 8002684:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8002688:	200004ec 	.word	0x200004ec

0800268c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800268c:	e7fe      	b.n	800268c <ADC1_2_IRQHandler>
	...

08002690 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <HAL_Init+0x3c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a0b      	ldr	r2, [pc, #44]	; (80026cc <HAL_Init+0x3c>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a6:	2003      	movs	r0, #3
 80026a8:	f001 fcba 	bl	8004020 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026ac:	2000      	movs	r0, #0
 80026ae:	f000 f80f 	bl	80026d0 <HAL_InitTick>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	71fb      	strb	r3, [r7, #7]
 80026bc:	e001      	b.n	80026c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026be:	f7ff fdaf 	bl	8002220 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026c2:	79fb      	ldrb	r3, [r7, #7]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40022000 	.word	0x40022000

080026d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026dc:	4b17      	ldr	r3, [pc, #92]	; (800273c <HAL_InitTick+0x6c>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d023      	beq.n	800272c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026e4:	4b16      	ldr	r3, [pc, #88]	; (8002740 <HAL_InitTick+0x70>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b14      	ldr	r3, [pc, #80]	; (800273c <HAL_InitTick+0x6c>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	4619      	mov	r1, r3
 80026ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fa:	4618      	mov	r0, r3
 80026fc:	f001 fcc5 	bl	800408a <HAL_SYSTICK_Config>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10f      	bne.n	8002726 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b0f      	cmp	r3, #15
 800270a:	d809      	bhi.n	8002720 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800270c:	2200      	movs	r2, #0
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	f001 fc8f 	bl	8004036 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002718:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <HAL_InitTick+0x74>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e007      	b.n	8002730 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
 8002724:	e004      	b.n	8002730 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
 800272a:	e001      	b.n	8002730 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002730:	7bfb      	ldrb	r3, [r7, #15]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000064 	.word	0x20000064
 8002740:	2000005c 	.word	0x2000005c
 8002744:	20000060 	.word	0x20000060

08002748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_IncTick+0x20>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_IncTick+0x24>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4413      	add	r3, r2
 8002758:	4a04      	ldr	r2, [pc, #16]	; (800276c <HAL_IncTick+0x24>)
 800275a:	6013      	str	r3, [r2, #0]
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	20000064 	.word	0x20000064
 800276c:	200004d8 	.word	0x200004d8

08002770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return uwTick;
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <HAL_GetTick+0x14>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	200004d8 	.word	0x200004d8

08002788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002790:	f7ff ffee 	bl	8002770 <HAL_GetTick>
 8002794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d005      	beq.n	80027ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_Delay+0x44>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4413      	add	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ae:	bf00      	nop
 80027b0:	f7ff ffde 	bl	8002770 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d8f7      	bhi.n	80027b0 <HAL_Delay+0x28>
  {
  }
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000064 	.word	0x20000064

080027d0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_SuspendTick+0x1c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a04      	ldr	r2, [pc, #16]	; (80027ec <HAL_SuspendTick+0x1c>)
 80027da:	f023 0302 	bic.w	r3, r3, #2
 80027de:	6013      	str	r3, [r2, #0]
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	e000e010 	.word	0xe000e010

080027f0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_ResumeTick+0x1c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a04      	ldr	r2, [pc, #16]	; (800280c <HAL_ResumeTick+0x1c>)
 80027fa:	f043 0302 	orr.w	r3, r3, #2
 80027fe:	6013      	str	r3, [r2, #0]
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	e000e010 	.word	0xe000e010

08002810 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	609a      	str	r2, [r3, #8]
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	609a      	str	r2, [r3, #8]
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3360      	adds	r3, #96	; 0x60
 800288a:	461a      	mov	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b08      	ldr	r3, [pc, #32]	; (80028bc <LL_ADC_SetOffset+0x44>)
 800289a:	4013      	ands	r3, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80028b0:	bf00      	nop
 80028b2:	371c      	adds	r7, #28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	03fff000 	.word	0x03fff000

080028c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3360      	adds	r3, #96	; 0x60
 80028ce:	461a      	mov	r2, r3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3360      	adds	r3, #96	; 0x60
 80028fc:	461a      	mov	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	431a      	orrs	r2, r3
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002916:	bf00      	nop
 8002918:	371c      	adds	r7, #28
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	3330      	adds	r3, #48	; 0x30
 8002958:	461a      	mov	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	f003 030c 	and.w	r3, r3, #12
 8002964:	4413      	add	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	211f      	movs	r1, #31
 8002974:	fa01 f303 	lsl.w	r3, r1, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	401a      	ands	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	0e9b      	lsrs	r3, r3, #26
 8002980:	f003 011f 	and.w	r1, r3, #31
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	431a      	orrs	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002994:	bf00      	nop
 8002996:	371c      	adds	r7, #28
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3314      	adds	r3, #20
 80029b0:	461a      	mov	r2, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	0e5b      	lsrs	r3, r3, #25
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	4413      	add	r3, r2
 80029be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	0d1b      	lsrs	r3, r3, #20
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	2107      	movs	r1, #7
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	401a      	ands	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	0d1b      	lsrs	r3, r3, #20
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	fa01 f303 	lsl.w	r3, r1, r3
 80029e4:	431a      	orrs	r2, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029ea:	bf00      	nop
 80029ec:	371c      	adds	r7, #28
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
	...

080029f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a10:	43db      	mvns	r3, r3
 8002a12:	401a      	ands	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f003 0318 	and.w	r3, r3, #24
 8002a1a:	4908      	ldr	r1, [pc, #32]	; (8002a3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a1c:	40d9      	lsrs	r1, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	400b      	ands	r3, r1
 8002a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a26:	431a      	orrs	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a2e:	bf00      	nop
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	0007ffff 	.word	0x0007ffff

08002a40 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 031f 	and.w	r3, r3, #31
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6093      	str	r3, [r2, #8]
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ab0:	d101      	bne.n	8002ab6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002ad4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ad8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b00:	d101      	bne.n	8002b06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b28:	f043 0201 	orr.w	r2, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b50:	f043 0202 	orr.w	r2, r3, #2
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <LL_ADC_IsEnabled+0x18>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <LL_ADC_IsEnabled+0x1a>
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d101      	bne.n	8002ba2 <LL_ADC_IsDisableOngoing+0x18>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <LL_ADC_IsDisableOngoing+0x1a>
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bc4:	f043 0204 	orr.w	r2, r3, #4
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d101      	bne.n	8002bf0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d101      	bne.n	8002c16 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b089      	sub	sp, #36	; 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e136      	b.n	8002eac <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d109      	bne.n	8002c60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7fe f823 	bl	8000c98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff19 	bl	8002a9c <LL_ADC_IsDeepPowerDownEnabled>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d004      	beq.n	8002c7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff feff 	bl	8002a78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff ff34 	bl	8002aec <LL_ADC_IsInternalRegulatorEnabled>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d115      	bne.n	8002cb6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ff18 	bl	8002ac4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c94:	4b87      	ldr	r3, [pc, #540]	; (8002eb4 <HAL_ADC_Init+0x290>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	099b      	lsrs	r3, r3, #6
 8002c9a:	4a87      	ldr	r2, [pc, #540]	; (8002eb8 <HAL_ADC_Init+0x294>)
 8002c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca0:	099b      	lsrs	r3, r3, #6
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ca8:	e002      	b.n	8002cb0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f9      	bne.n	8002caa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff ff16 	bl	8002aec <LL_ADC_IsInternalRegulatorEnabled>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10d      	bne.n	8002ce2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cca:	f043 0210 	orr.w	r2, r3, #16
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd6:	f043 0201 	orr.w	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff ff76 	bl	8002bd8 <LL_ADC_REG_IsConversionOngoing>
 8002cec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f040 80cf 	bne.w	8002e9a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f040 80cb 	bne.w	8002e9a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d08:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d0c:	f043 0202 	orr.w	r2, r3, #2
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff23 	bl	8002b64 <LL_ADC_IsEnabled>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d115      	bne.n	8002d50 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d24:	4865      	ldr	r0, [pc, #404]	; (8002ebc <HAL_ADC_Init+0x298>)
 8002d26:	f7ff ff1d 	bl	8002b64 <LL_ADC_IsEnabled>
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	4864      	ldr	r0, [pc, #400]	; (8002ec0 <HAL_ADC_Init+0x29c>)
 8002d2e:	f7ff ff19 	bl	8002b64 <LL_ADC_IsEnabled>
 8002d32:	4603      	mov	r3, r0
 8002d34:	431c      	orrs	r4, r3
 8002d36:	4863      	ldr	r0, [pc, #396]	; (8002ec4 <HAL_ADC_Init+0x2a0>)
 8002d38:	f7ff ff14 	bl	8002b64 <LL_ADC_IsEnabled>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4323      	orrs	r3, r4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d105      	bne.n	8002d50 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4619      	mov	r1, r3
 8002d4a:	485f      	ldr	r0, [pc, #380]	; (8002ec8 <HAL_ADC_Init+0x2a4>)
 8002d4c:	f7ff fd60 	bl	8002810 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	7e5b      	ldrb	r3, [r3, #25]
 8002d54:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d5a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d60:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d66:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d6e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d106      	bne.n	8002d8c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	3b01      	subs	r3, #1
 8002d84:	045b      	lsls	r3, r3, #17
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d009      	beq.n	8002da8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	4b47      	ldr	r3, [pc, #284]	; (8002ecc <HAL_ADC_Init+0x2a8>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	69b9      	ldr	r1, [r7, #24]
 8002db8:	430b      	orrs	r3, r1
 8002dba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff ff09 	bl	8002bd8 <LL_ADC_REG_IsConversionOngoing>
 8002dc6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff16 	bl	8002bfe <LL_ADC_INJ_IsConversionOngoing>
 8002dd2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d13d      	bne.n	8002e56 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d13a      	bne.n	8002e56 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002de4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dec:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dfc:	f023 0302 	bic.w	r3, r3, #2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	69b9      	ldr	r1, [r7, #24]
 8002e06:	430b      	orrs	r3, r1
 8002e08:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d118      	bne.n	8002e46 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e1e:	f023 0304 	bic.w	r3, r3, #4
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e2a:	4311      	orrs	r1, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e30:	4311      	orrs	r1, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e36:	430a      	orrs	r2, r1
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	611a      	str	r2, [r3, #16]
 8002e44:	e007      	b.n	8002e56 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d10c      	bne.n	8002e78 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	f023 010f 	bic.w	r1, r3, #15
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	1e5a      	subs	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	631a      	str	r2, [r3, #48]	; 0x30
 8002e76:	e007      	b.n	8002e88 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 020f 	bic.w	r2, r2, #15
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8c:	f023 0303 	bic.w	r3, r3, #3
 8002e90:	f043 0201 	orr.w	r2, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54
 8002e98:	e007      	b.n	8002eaa <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9e:	f043 0210 	orr.w	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002eaa:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3724      	adds	r7, #36	; 0x24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd90      	pop	{r4, r7, pc}
 8002eb4:	2000005c 	.word	0x2000005c
 8002eb8:	053e2d63 	.word	0x053e2d63
 8002ebc:	50040000 	.word	0x50040000
 8002ec0:	50040100 	.word	0x50040100
 8002ec4:	50040200 	.word	0x50040200
 8002ec8:	50040300 	.word	0x50040300
 8002ecc:	fff0c007 	.word	0xfff0c007

08002ed0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ed8:	4857      	ldr	r0, [pc, #348]	; (8003038 <HAL_ADC_Start+0x168>)
 8002eda:	f7ff fdb1 	bl	8002a40 <LL_ADC_GetMultimode>
 8002ede:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fe77 	bl	8002bd8 <LL_ADC_REG_IsConversionOngoing>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 809c 	bne.w	800302a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_Start+0x30>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e097      	b.n	8003030 <HAL_ADC_Start+0x160>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fd71 	bl	80039f0 <ADC_Enable>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f040 8083 	bne.w	8003020 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a42      	ldr	r2, [pc, #264]	; (800303c <HAL_ADC_Start+0x16c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d002      	beq.n	8002f3e <HAL_ADC_Start+0x6e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	e000      	b.n	8002f40 <HAL_ADC_Start+0x70>
 8002f3e:	4b40      	ldr	r3, [pc, #256]	; (8003040 <HAL_ADC_Start+0x170>)
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d002      	beq.n	8002f4e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d105      	bne.n	8002f5a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f66:	d106      	bne.n	8002f76 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6c:	f023 0206 	bic.w	r2, r3, #6
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	659a      	str	r2, [r3, #88]	; 0x58
 8002f74:	e002      	b.n	8002f7c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	221c      	movs	r2, #28
 8002f82:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a2a      	ldr	r2, [pc, #168]	; (800303c <HAL_ADC_Start+0x16c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d002      	beq.n	8002f9c <HAL_ADC_Start+0xcc>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	e000      	b.n	8002f9e <HAL_ADC_Start+0xce>
 8002f9c:	4b28      	ldr	r3, [pc, #160]	; (8003040 <HAL_ADC_Start+0x170>)
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d008      	beq.n	8002fb8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	2b05      	cmp	r3, #5
 8002fb0:	d002      	beq.n	8002fb8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b09      	cmp	r3, #9
 8002fb6:	d114      	bne.n	8002fe2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d007      	beq.n	8002fd6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fde8 	bl	8002bb0 <LL_ADC_REG_StartConversion>
 8002fe0:	e025      	b.n	800302e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a12      	ldr	r2, [pc, #72]	; (800303c <HAL_ADC_Start+0x16c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d002      	beq.n	8002ffe <HAL_ADC_Start+0x12e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	e000      	b.n	8003000 <HAL_ADC_Start+0x130>
 8002ffe:	4b10      	ldr	r3, [pc, #64]	; (8003040 <HAL_ADC_Start+0x170>)
 8003000:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00f      	beq.n	800302e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003012:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003016:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	655a      	str	r2, [r3, #84]	; 0x54
 800301e:	e006      	b.n	800302e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003028:	e001      	b.n	800302e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800302a:	2302      	movs	r3, #2
 800302c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800302e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	50040300 	.word	0x50040300
 800303c:	50040100 	.word	0x50040100
 8003040:	50040000 	.word	0x50040000

08003044 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800304e:	4866      	ldr	r0, [pc, #408]	; (80031e8 <HAL_ADC_PollForConversion+0x1a4>)
 8003050:	f7ff fcf6 	bl	8002a40 <LL_ADC_GetMultimode>
 8003054:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	2b08      	cmp	r3, #8
 800305c:	d102      	bne.n	8003064 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800305e:	2308      	movs	r3, #8
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	e02a      	b.n	80030ba <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b05      	cmp	r3, #5
 800306e:	d002      	beq.n	8003076 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2b09      	cmp	r3, #9
 8003074:	d111      	bne.n	800309a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d007      	beq.n	8003094 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0a4      	b.n	80031de <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003094:	2304      	movs	r3, #4
 8003096:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003098:	e00f      	b.n	80030ba <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800309a:	4853      	ldr	r0, [pc, #332]	; (80031e8 <HAL_ADC_PollForConversion+0x1a4>)
 800309c:	f7ff fcde 	bl	8002a5c <LL_ADC_GetMultiDMATransfer>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d007      	beq.n	80030b6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030aa:	f043 0220 	orr.w	r2, r3, #32
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e093      	b.n	80031de <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80030b6:	2304      	movs	r3, #4
 80030b8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80030ba:	f7ff fb59 	bl	8002770 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80030c0:	e021      	b.n	8003106 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c8:	d01d      	beq.n	8003106 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80030ca:	f7ff fb51 	bl	8002770 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d302      	bcc.n	80030e0 <HAL_ADC_PollForConversion+0x9c>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d112      	bne.n	8003106 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10b      	bne.n	8003106 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f2:	f043 0204 	orr.w	r2, r3, #4
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e06b      	b.n	80031de <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0d6      	beq.n	80030c2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003118:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fbfc 	bl	8002922 <LL_ADC_REG_IsTriggerSourceSWStart>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d01c      	beq.n	800316a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	7e5b      	ldrb	r3, [r3, #25]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d118      	bne.n	800316a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b08      	cmp	r3, #8
 8003144:	d111      	bne.n	800316a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003156:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d105      	bne.n	800316a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003162:	f043 0201 	orr.w	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a1f      	ldr	r2, [pc, #124]	; (80031ec <HAL_ADC_PollForConversion+0x1a8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d002      	beq.n	800317a <HAL_ADC_PollForConversion+0x136>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	e000      	b.n	800317c <HAL_ADC_PollForConversion+0x138>
 800317a:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <HAL_ADC_PollForConversion+0x1ac>)
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	4293      	cmp	r3, r2
 8003182:	d008      	beq.n	8003196 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b05      	cmp	r3, #5
 800318e:	d002      	beq.n	8003196 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b09      	cmp	r3, #9
 8003194:	d104      	bne.n	80031a0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	61bb      	str	r3, [r7, #24]
 800319e:	e00c      	b.n	80031ba <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a11      	ldr	r2, [pc, #68]	; (80031ec <HAL_ADC_PollForConversion+0x1a8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d002      	beq.n	80031b0 <HAL_ADC_PollForConversion+0x16c>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	e000      	b.n	80031b2 <HAL_ADC_PollForConversion+0x16e>
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <HAL_ADC_PollForConversion+0x1ac>)
 80031b2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d104      	bne.n	80031ca <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2208      	movs	r2, #8
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	e008      	b.n	80031dc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d103      	bne.n	80031dc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	220c      	movs	r2, #12
 80031da:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	50040300 	.word	0x50040300
 80031ec:	50040100 	.word	0x50040100
 80031f0:	50040000 	.word	0x50040000

080031f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b0b6      	sub	sp, #216	; 0xd8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x22>
 800322e:	2302      	movs	r3, #2
 8003230:	e3c7      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x7b2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fcca 	bl	8002bd8 <LL_ADC_REG_IsConversionOngoing>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	f040 83a8 	bne.w	800399c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b05      	cmp	r3, #5
 8003252:	d824      	bhi.n	800329e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	3b02      	subs	r3, #2
 800325a:	2b03      	cmp	r3, #3
 800325c:	d81b      	bhi.n	8003296 <HAL_ADC_ConfigChannel+0x86>
 800325e:	a201      	add	r2, pc, #4	; (adr r2, 8003264 <HAL_ADC_ConfigChannel+0x54>)
 8003260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003264:	08003275 	.word	0x08003275
 8003268:	0800327d 	.word	0x0800327d
 800326c:	08003285 	.word	0x08003285
 8003270:	0800328d 	.word	0x0800328d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	220c      	movs	r2, #12
 8003278:	605a      	str	r2, [r3, #4]
          break;
 800327a:	e011      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2212      	movs	r2, #18
 8003280:	605a      	str	r2, [r3, #4]
          break;
 8003282:	e00d      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2218      	movs	r2, #24
 8003288:	605a      	str	r2, [r3, #4]
          break;
 800328a:	e009      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003292:	605a      	str	r2, [r3, #4]
          break;
 8003294:	e004      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2206      	movs	r2, #6
 800329a:	605a      	str	r2, [r3, #4]
          break;
 800329c:	e000      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800329e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6859      	ldr	r1, [r3, #4]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	f7ff fb4b 	bl	8002948 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fc8e 	bl	8002bd8 <LL_ADC_REG_IsConversionOngoing>
 80032bc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fc9a 	bl	8002bfe <LL_ADC_INJ_IsConversionOngoing>
 80032ca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f040 81a6 	bne.w	8003624 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f040 81a1 	bne.w	8003624 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6819      	ldr	r1, [r3, #0]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	461a      	mov	r2, r3
 80032f0:	f7ff fb56 	bl	80029a0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	695a      	ldr	r2, [r3, #20]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	08db      	lsrs	r3, r3, #3
 8003300:	f003 0303 	and.w	r3, r3, #3
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	2b04      	cmp	r3, #4
 8003314:	d00a      	beq.n	800332c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6919      	ldr	r1, [r3, #16]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003326:	f7ff faa7 	bl	8002878 <LL_ADC_SetOffset>
 800332a:	e17b      	b.n	8003624 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff fac4 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 8003338:	4603      	mov	r3, r0
 800333a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10a      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x148>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fab9 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 800334e:	4603      	mov	r3, r0
 8003350:	0e9b      	lsrs	r3, r3, #26
 8003352:	f003 021f 	and.w	r2, r3, #31
 8003356:	e01e      	b.n	8003396 <HAL_ADC_ConfigChannel+0x186>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff faae 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 8003364:	4603      	mov	r3, r0
 8003366:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003376:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800337a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800337e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003386:	2320      	movs	r3, #32
 8003388:	e004      	b.n	8003394 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800338a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d105      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x19e>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	0e9b      	lsrs	r3, r3, #26
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	e018      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x1d0>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033ba:	fa93 f3a3 	rbit	r3, r3
 80033be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80033c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80033ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80033d2:	2320      	movs	r3, #32
 80033d4:	e004      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80033d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033da:	fab3 f383 	clz	r3, r3
 80033de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d106      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2200      	movs	r2, #0
 80033ea:	2100      	movs	r1, #0
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff fa7d 	bl	80028ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2101      	movs	r1, #1
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fa61 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 80033fe:	4603      	mov	r3, r0
 8003400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10a      	bne.n	800341e <HAL_ADC_ConfigChannel+0x20e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2101      	movs	r1, #1
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fa56 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 8003414:	4603      	mov	r3, r0
 8003416:	0e9b      	lsrs	r3, r3, #26
 8003418:	f003 021f 	and.w	r2, r3, #31
 800341c:	e01e      	b.n	800345c <HAL_ADC_ConfigChannel+0x24c>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2101      	movs	r1, #1
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fa4b 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 800342a:	4603      	mov	r3, r0
 800342c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003434:	fa93 f3a3 	rbit	r3, r3
 8003438:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800343c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003440:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003444:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800344c:	2320      	movs	r3, #32
 800344e:	e004      	b.n	800345a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003450:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
 800345a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003464:	2b00      	cmp	r3, #0
 8003466:	d105      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x264>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	0e9b      	lsrs	r3, r3, #26
 800346e:	f003 031f 	and.w	r3, r3, #31
 8003472:	e018      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x296>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003488:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800348c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003490:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003498:	2320      	movs	r3, #32
 800349a:	e004      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800349c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034a0:	fab3 f383 	clz	r3, r3
 80034a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d106      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2200      	movs	r2, #0
 80034b0:	2101      	movs	r1, #1
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff fa1a 	bl	80028ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2102      	movs	r1, #2
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff f9fe 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 80034c4:	4603      	mov	r3, r0
 80034c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10a      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x2d4>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2102      	movs	r1, #2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff f9f3 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 80034da:	4603      	mov	r3, r0
 80034dc:	0e9b      	lsrs	r3, r3, #26
 80034de:	f003 021f 	and.w	r2, r3, #31
 80034e2:	e01e      	b.n	8003522 <HAL_ADC_ConfigChannel+0x312>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2102      	movs	r1, #2
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff f9e8 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003502:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003506:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800350a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003512:	2320      	movs	r3, #32
 8003514:	e004      	b.n	8003520 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003516:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800351a:	fab3 f383 	clz	r3, r3
 800351e:	b2db      	uxtb	r3, r3
 8003520:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800352a:	2b00      	cmp	r3, #0
 800352c:	d105      	bne.n	800353a <HAL_ADC_ConfigChannel+0x32a>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	0e9b      	lsrs	r3, r3, #26
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	e016      	b.n	8003568 <HAL_ADC_ConfigChannel+0x358>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003542:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003546:	fa93 f3a3 	rbit	r3, r3
 800354a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800354c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800354e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003552:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800355a:	2320      	movs	r3, #32
 800355c:	e004      	b.n	8003568 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800355e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003568:	429a      	cmp	r2, r3
 800356a:	d106      	bne.n	800357a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2200      	movs	r2, #0
 8003572:	2102      	movs	r1, #2
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff f9b9 	bl	80028ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2103      	movs	r1, #3
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff f99d 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 8003586:	4603      	mov	r3, r0
 8003588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x396>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2103      	movs	r1, #3
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff f992 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 800359c:	4603      	mov	r3, r0
 800359e:	0e9b      	lsrs	r3, r3, #26
 80035a0:	f003 021f 	and.w	r2, r3, #31
 80035a4:	e017      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x3c6>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2103      	movs	r1, #3
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff f987 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 80035b2:	4603      	mov	r3, r0
 80035b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035b8:	fa93 f3a3 	rbit	r3, r3
 80035bc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80035be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035c0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80035c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80035c8:	2320      	movs	r3, #32
 80035ca:	e003      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80035cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ce:	fab3 f383 	clz	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d105      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x3de>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	0e9b      	lsrs	r3, r3, #26
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	e011      	b.n	8003612 <HAL_ADC_ConfigChannel+0x402>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035f6:	fa93 f3a3 	rbit	r3, r3
 80035fa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80035fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003606:	2320      	movs	r3, #32
 8003608:	e003      	b.n	8003612 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800360a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360c:	fab3 f383 	clz	r3, r3
 8003610:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003612:	429a      	cmp	r2, r3
 8003614:	d106      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2200      	movs	r2, #0
 800361c:	2103      	movs	r1, #3
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff f964 	bl	80028ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fa9b 	bl	8002b64 <LL_ADC_IsEnabled>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	f040 813f 	bne.w	80038b4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6819      	ldr	r1, [r3, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	461a      	mov	r2, r3
 8003644:	f7ff f9d8 	bl	80029f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4a8e      	ldr	r2, [pc, #568]	; (8003888 <HAL_ADC_ConfigChannel+0x678>)
 800364e:	4293      	cmp	r3, r2
 8003650:	f040 8130 	bne.w	80038b4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10b      	bne.n	800367c <HAL_ADC_ConfigChannel+0x46c>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	0e9b      	lsrs	r3, r3, #26
 800366a:	3301      	adds	r3, #1
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	2b09      	cmp	r3, #9
 8003672:	bf94      	ite	ls
 8003674:	2301      	movls	r3, #1
 8003676:	2300      	movhi	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	e019      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x4a0>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003684:	fa93 f3a3 	rbit	r3, r3
 8003688:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800368a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800368c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800368e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003694:	2320      	movs	r3, #32
 8003696:	e003      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800369a:	fab3 f383 	clz	r3, r3
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	3301      	adds	r3, #1
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	2b09      	cmp	r3, #9
 80036a8:	bf94      	ite	ls
 80036aa:	2301      	movls	r3, #1
 80036ac:	2300      	movhi	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d079      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d107      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x4c0>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	0e9b      	lsrs	r3, r3, #26
 80036c6:	3301      	adds	r3, #1
 80036c8:	069b      	lsls	r3, r3, #26
 80036ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036ce:	e015      	b.n	80036fc <HAL_ADC_ConfigChannel+0x4ec>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80036e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80036e8:	2320      	movs	r3, #32
 80036ea:	e003      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80036ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ee:	fab3 f383 	clz	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	3301      	adds	r3, #1
 80036f6:	069b      	lsls	r3, r3, #26
 80036f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003704:	2b00      	cmp	r3, #0
 8003706:	d109      	bne.n	800371c <HAL_ADC_ConfigChannel+0x50c>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	0e9b      	lsrs	r3, r3, #26
 800370e:	3301      	adds	r3, #1
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	2101      	movs	r1, #1
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	e017      	b.n	800374c <HAL_ADC_ConfigChannel+0x53c>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003724:	fa93 f3a3 	rbit	r3, r3
 8003728:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800372a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800372c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800372e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003734:	2320      	movs	r3, #32
 8003736:	e003      	b.n	8003740 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	3301      	adds	r3, #1
 8003742:	f003 031f 	and.w	r3, r3, #31
 8003746:	2101      	movs	r1, #1
 8003748:	fa01 f303 	lsl.w	r3, r1, r3
 800374c:	ea42 0103 	orr.w	r1, r2, r3
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x562>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	0e9b      	lsrs	r3, r3, #26
 8003762:	3301      	adds	r3, #1
 8003764:	f003 021f 	and.w	r2, r3, #31
 8003768:	4613      	mov	r3, r2
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4413      	add	r3, r2
 800376e:	051b      	lsls	r3, r3, #20
 8003770:	e018      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x594>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377a:	fa93 f3a3 	rbit	r3, r3
 800377e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003782:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800378a:	2320      	movs	r3, #32
 800378c:	e003      	b.n	8003796 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800378e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003790:	fab3 f383 	clz	r3, r3
 8003794:	b2db      	uxtb	r3, r3
 8003796:	3301      	adds	r3, #1
 8003798:	f003 021f 	and.w	r2, r3, #31
 800379c:	4613      	mov	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4413      	add	r3, r2
 80037a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037a4:	430b      	orrs	r3, r1
 80037a6:	e080      	b.n	80038aa <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d107      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x5b4>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	0e9b      	lsrs	r3, r3, #26
 80037ba:	3301      	adds	r3, #1
 80037bc:	069b      	lsls	r3, r3, #26
 80037be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037c2:	e015      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x5e0>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80037dc:	2320      	movs	r3, #32
 80037de:	e003      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80037e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e2:	fab3 f383 	clz	r3, r3
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	3301      	adds	r3, #1
 80037ea:	069b      	lsls	r3, r3, #26
 80037ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d109      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x600>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	0e9b      	lsrs	r3, r3, #26
 8003802:	3301      	adds	r3, #1
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	2101      	movs	r1, #1
 800380a:	fa01 f303 	lsl.w	r3, r1, r3
 800380e:	e017      	b.n	8003840 <HAL_ADC_ConfigChannel+0x630>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	61fb      	str	r3, [r7, #28]
  return result;
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003828:	2320      	movs	r3, #32
 800382a:	e003      	b.n	8003834 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	fab3 f383 	clz	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	3301      	adds	r3, #1
 8003836:	f003 031f 	and.w	r3, r3, #31
 800383a:	2101      	movs	r1, #1
 800383c:	fa01 f303 	lsl.w	r3, r1, r3
 8003840:	ea42 0103 	orr.w	r1, r2, r3
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10d      	bne.n	800386c <HAL_ADC_ConfigChannel+0x65c>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	0e9b      	lsrs	r3, r3, #26
 8003856:	3301      	adds	r3, #1
 8003858:	f003 021f 	and.w	r2, r3, #31
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	3b1e      	subs	r3, #30
 8003864:	051b      	lsls	r3, r3, #20
 8003866:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800386a:	e01d      	b.n	80038a8 <HAL_ADC_ConfigChannel+0x698>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	fa93 f3a3 	rbit	r3, r3
 8003878:	613b      	str	r3, [r7, #16]
  return result;
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d103      	bne.n	800388c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003884:	2320      	movs	r3, #32
 8003886:	e005      	b.n	8003894 <HAL_ADC_ConfigChannel+0x684>
 8003888:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	fab3 f383 	clz	r3, r3
 8003892:	b2db      	uxtb	r3, r3
 8003894:	3301      	adds	r3, #1
 8003896:	f003 021f 	and.w	r2, r3, #31
 800389a:	4613      	mov	r3, r2
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	4413      	add	r3, r2
 80038a0:	3b1e      	subs	r3, #30
 80038a2:	051b      	lsls	r3, r3, #20
 80038a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a8:	430b      	orrs	r3, r1
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	6892      	ldr	r2, [r2, #8]
 80038ae:	4619      	mov	r1, r3
 80038b0:	f7ff f876 	bl	80029a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4b44      	ldr	r3, [pc, #272]	; (80039cc <HAL_ADC_ConfigChannel+0x7bc>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d07a      	beq.n	80039b6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038c0:	4843      	ldr	r0, [pc, #268]	; (80039d0 <HAL_ADC_ConfigChannel+0x7c0>)
 80038c2:	f7fe ffcb 	bl	800285c <LL_ADC_GetCommonPathInternalCh>
 80038c6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a41      	ldr	r2, [pc, #260]	; (80039d4 <HAL_ADC_ConfigChannel+0x7c4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d12c      	bne.n	800392e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d126      	bne.n	800392e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a3c      	ldr	r2, [pc, #240]	; (80039d8 <HAL_ADC_ConfigChannel+0x7c8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d004      	beq.n	80038f4 <HAL_ADC_ConfigChannel+0x6e4>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a3b      	ldr	r2, [pc, #236]	; (80039dc <HAL_ADC_ConfigChannel+0x7cc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d15d      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038fc:	4619      	mov	r1, r3
 80038fe:	4834      	ldr	r0, [pc, #208]	; (80039d0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003900:	f7fe ff99 	bl	8002836 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003904:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	099b      	lsrs	r3, r3, #6
 800390a:	4a36      	ldr	r2, [pc, #216]	; (80039e4 <HAL_ADC_ConfigChannel+0x7d4>)
 800390c:	fba2 2303 	umull	r2, r3, r2, r3
 8003910:	099b      	lsrs	r3, r3, #6
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	4613      	mov	r3, r2
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800391e:	e002      	b.n	8003926 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	3b01      	subs	r3, #1
 8003924:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1f9      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800392c:	e040      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a2d      	ldr	r2, [pc, #180]	; (80039e8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d118      	bne.n	800396a <HAL_ADC_ConfigChannel+0x75a>
 8003938:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800393c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d112      	bne.n	800396a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a23      	ldr	r2, [pc, #140]	; (80039d8 <HAL_ADC_ConfigChannel+0x7c8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d004      	beq.n	8003958 <HAL_ADC_ConfigChannel+0x748>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a22      	ldr	r2, [pc, #136]	; (80039dc <HAL_ADC_ConfigChannel+0x7cc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d12d      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003958:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800395c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003960:	4619      	mov	r1, r3
 8003962:	481b      	ldr	r0, [pc, #108]	; (80039d0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003964:	f7fe ff67 	bl	8002836 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003968:	e024      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a1f      	ldr	r2, [pc, #124]	; (80039ec <HAL_ADC_ConfigChannel+0x7dc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d120      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003974:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d11a      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a14      	ldr	r2, [pc, #80]	; (80039d8 <HAL_ADC_ConfigChannel+0x7c8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d115      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800398a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800398e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003992:	4619      	mov	r1, r3
 8003994:	480e      	ldr	r0, [pc, #56]	; (80039d0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003996:	f7fe ff4e 	bl	8002836 <LL_ADC_SetCommonPathInternalCh>
 800399a:	e00c      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a0:	f043 0220 	orr.w	r2, r3, #32
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80039ae:	e002      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039b0:	bf00      	nop
 80039b2:	e000      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	37d8      	adds	r7, #216	; 0xd8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	80080000 	.word	0x80080000
 80039d0:	50040300 	.word	0x50040300
 80039d4:	c7520000 	.word	0xc7520000
 80039d8:	50040000 	.word	0x50040000
 80039dc:	50040200 	.word	0x50040200
 80039e0:	2000005c 	.word	0x2000005c
 80039e4:	053e2d63 	.word	0x053e2d63
 80039e8:	cb840000 	.word	0xcb840000
 80039ec:	80000001 	.word	0x80000001

080039f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff f8af 	bl	8002b64 <LL_ADC_IsEnabled>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d169      	bne.n	8003ae0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	4b36      	ldr	r3, [pc, #216]	; (8003aec <ADC_Enable+0xfc>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00d      	beq.n	8003a36 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1e:	f043 0210 	orr.w	r2, r3, #16
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	f043 0201 	orr.w	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e055      	b.n	8003ae2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff f86a 	bl	8002b14 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a40:	482b      	ldr	r0, [pc, #172]	; (8003af0 <ADC_Enable+0x100>)
 8003a42:	f7fe ff0b 	bl	800285c <LL_ADC_GetCommonPathInternalCh>
 8003a46:	4603      	mov	r3, r0
 8003a48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d013      	beq.n	8003a78 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a50:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <ADC_Enable+0x104>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	099b      	lsrs	r3, r3, #6
 8003a56:	4a28      	ldr	r2, [pc, #160]	; (8003af8 <ADC_Enable+0x108>)
 8003a58:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5c:	099b      	lsrs	r3, r3, #6
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	4613      	mov	r3, r2
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003a6a:	e002      	b.n	8003a72 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f9      	bne.n	8003a6c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a78:	f7fe fe7a 	bl	8002770 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a7e:	e028      	b.n	8003ad2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff f86d 	bl	8002b64 <LL_ADC_IsEnabled>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d104      	bne.n	8003a9a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff f83d 	bl	8002b14 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a9a:	f7fe fe69 	bl	8002770 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d914      	bls.n	8003ad2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d00d      	beq.n	8003ad2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aba:	f043 0210 	orr.w	r2, r3, #16
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac6:	f043 0201 	orr.w	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e007      	b.n	8003ae2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d1cf      	bne.n	8003a80 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	8000003f 	.word	0x8000003f
 8003af0:	50040300 	.word	0x50040300
 8003af4:	2000005c 	.word	0x2000005c
 8003af8:	053e2d63 	.word	0x053e2d63

08003afc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff f83e 	bl	8002b8a <LL_ADC_IsDisableOngoing>
 8003b0e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff f825 	bl	8002b64 <LL_ADC_IsEnabled>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d047      	beq.n	8003bb0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d144      	bne.n	8003bb0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 030d 	and.w	r3, r3, #13
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d10c      	bne.n	8003b4e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fe ffff 	bl	8002b3c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2203      	movs	r2, #3
 8003b44:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b46:	f7fe fe13 	bl	8002770 <HAL_GetTick>
 8003b4a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b4c:	e029      	b.n	8003ba2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b52:	f043 0210 	orr.w	r2, r3, #16
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5e:	f043 0201 	orr.w	r2, r3, #1
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e023      	b.n	8003bb2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b6a:	f7fe fe01 	bl	8002770 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d914      	bls.n	8003ba2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00d      	beq.n	8003ba2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8a:	f043 0210 	orr.w	r2, r3, #16
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b96:	f043 0201 	orr.w	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e007      	b.n	8003bb2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1dc      	bne.n	8003b6a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <LL_ADC_IsEnabled>:
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <LL_ADC_IsEnabled+0x18>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <LL_ADC_IsEnabled+0x1a>
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <LL_ADC_StartCalibration>:
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003bf2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	609a      	str	r2, [r3, #8]
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <LL_ADC_IsCalibrationOnGoing>:
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c26:	d101      	bne.n	8003c2c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <LL_ADC_REG_IsConversionOngoing>:
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d101      	bne.n	8003c52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_ADCEx_Calibration_Start+0x1c>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e04d      	b.n	8003d18 <HAL_ADCEx_Calibration_Start+0xb8>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff ff39 	bl	8003afc <ADC_Disable>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d136      	bne.n	8003d02 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c9c:	f023 0302 	bic.w	r3, r3, #2
 8003ca0:	f043 0202 	orr.w	r2, r3, #2
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6839      	ldr	r1, [r7, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff ff96 	bl	8003be0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003cb4:	e014      	b.n	8003ce0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003cc2:	d30d      	bcc.n	8003ce0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc8:	f023 0312 	bic.w	r3, r3, #18
 8003ccc:	f043 0210 	orr.w	r2, r3, #16
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e01b      	b.n	8003d18 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff ff94 	bl	8003c12 <LL_ADC_IsCalibrationOnGoing>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e2      	bne.n	8003cb6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf4:	f023 0303 	bic.w	r3, r3, #3
 8003cf8:	f043 0201 	orr.w	r2, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	655a      	str	r2, [r3, #84]	; 0x54
 8003d00:	e005      	b.n	8003d0e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d06:	f043 0210 	orr.w	r2, r3, #16
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b09f      	sub	sp, #124	; 0x7c
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e093      	b.n	8003e66 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003d46:	2300      	movs	r3, #0
 8003d48:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a47      	ldr	r2, [pc, #284]	; (8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d102      	bne.n	8003d5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d58:	4b46      	ldr	r3, [pc, #280]	; (8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	e001      	b.n	8003d62 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10b      	bne.n	8003d80 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	f043 0220 	orr.w	r2, r3, #32
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e072      	b.n	8003e66 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff ff59 	bl	8003c3a <LL_ADC_REG_IsConversionOngoing>
 8003d88:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff ff53 	bl	8003c3a <LL_ADC_REG_IsConversionOngoing>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d154      	bne.n	8003e44 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d151      	bne.n	8003e44 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003da0:	4b35      	ldr	r3, [pc, #212]	; (8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003da2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d02c      	beq.n	8003e06 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dbe:	035b      	lsls	r3, r3, #13
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dc8:	4829      	ldr	r0, [pc, #164]	; (8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003dca:	f7ff fef6 	bl	8003bba <LL_ADC_IsEnabled>
 8003dce:	4604      	mov	r4, r0
 8003dd0:	4828      	ldr	r0, [pc, #160]	; (8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003dd2:	f7ff fef2 	bl	8003bba <LL_ADC_IsEnabled>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	431c      	orrs	r4, r3
 8003dda:	4828      	ldr	r0, [pc, #160]	; (8003e7c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003ddc:	f7ff feed 	bl	8003bba <LL_ADC_IsEnabled>
 8003de0:	4603      	mov	r3, r0
 8003de2:	4323      	orrs	r3, r4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d137      	bne.n	8003e58 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003df0:	f023 030f 	bic.w	r3, r3, #15
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	6811      	ldr	r1, [r2, #0]
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	6892      	ldr	r2, [r2, #8]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e02:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e04:	e028      	b.n	8003e58 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e10:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e12:	4817      	ldr	r0, [pc, #92]	; (8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003e14:	f7ff fed1 	bl	8003bba <LL_ADC_IsEnabled>
 8003e18:	4604      	mov	r4, r0
 8003e1a:	4816      	ldr	r0, [pc, #88]	; (8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003e1c:	f7ff fecd 	bl	8003bba <LL_ADC_IsEnabled>
 8003e20:	4603      	mov	r3, r0
 8003e22:	431c      	orrs	r4, r3
 8003e24:	4815      	ldr	r0, [pc, #84]	; (8003e7c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003e26:	f7ff fec8 	bl	8003bba <LL_ADC_IsEnabled>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4323      	orrs	r3, r4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d112      	bne.n	8003e58 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e3a:	f023 030f 	bic.w	r3, r3, #15
 8003e3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e40:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e42:	e009      	b.n	8003e58 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e48:	f043 0220 	orr.w	r2, r3, #32
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003e56:	e000      	b.n	8003e5a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e62:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	377c      	adds	r7, #124	; 0x7c
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd90      	pop	{r4, r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	50040000 	.word	0x50040000
 8003e74:	50040100 	.word	0x50040100
 8003e78:	50040300 	.word	0x50040300
 8003e7c:	50040200 	.word	0x50040200

08003e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e90:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eb2:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	60d3      	str	r3, [r2, #12]
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ecc:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	0a1b      	lsrs	r3, r3, #8
 8003ed2:	f003 0307 	and.w	r3, r3, #7
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	e000ed00 	.word	0xe000ed00

08003ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	db0b      	blt.n	8003f0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	f003 021f 	and.w	r2, r3, #31
 8003efc:	4907      	ldr	r1, [pc, #28]	; (8003f1c <__NVIC_EnableIRQ+0x38>)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	2001      	movs	r0, #1
 8003f06:	fa00 f202 	lsl.w	r2, r0, r2
 8003f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	e000e100 	.word	0xe000e100

08003f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	6039      	str	r1, [r7, #0]
 8003f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	db0a      	blt.n	8003f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	490c      	ldr	r1, [pc, #48]	; (8003f6c <__NVIC_SetPriority+0x4c>)
 8003f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3e:	0112      	lsls	r2, r2, #4
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	440b      	add	r3, r1
 8003f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f48:	e00a      	b.n	8003f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	4908      	ldr	r1, [pc, #32]	; (8003f70 <__NVIC_SetPriority+0x50>)
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	3b04      	subs	r3, #4
 8003f58:	0112      	lsls	r2, r2, #4
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	761a      	strb	r2, [r3, #24]
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	e000e100 	.word	0xe000e100
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b089      	sub	sp, #36	; 0x24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f1c3 0307 	rsb	r3, r3, #7
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	bf28      	it	cs
 8003f92:	2304      	movcs	r3, #4
 8003f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	2b06      	cmp	r3, #6
 8003f9c:	d902      	bls.n	8003fa4 <NVIC_EncodePriority+0x30>
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3b03      	subs	r3, #3
 8003fa2:	e000      	b.n	8003fa6 <NVIC_EncodePriority+0x32>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc6:	43d9      	mvns	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fcc:	4313      	orrs	r3, r2
         );
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3724      	adds	r7, #36	; 0x24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fec:	d301      	bcc.n	8003ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e00f      	b.n	8004012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ff2:	4a0a      	ldr	r2, [pc, #40]	; (800401c <SysTick_Config+0x40>)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ffa:	210f      	movs	r1, #15
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	f7ff ff8e 	bl	8003f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004004:	4b05      	ldr	r3, [pc, #20]	; (800401c <SysTick_Config+0x40>)
 8004006:	2200      	movs	r2, #0
 8004008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800400a:	4b04      	ldr	r3, [pc, #16]	; (800401c <SysTick_Config+0x40>)
 800400c:	2207      	movs	r2, #7
 800400e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	e000e010 	.word	0xe000e010

08004020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff ff29 	bl	8003e80 <__NVIC_SetPriorityGrouping>
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b086      	sub	sp, #24
 800403a:	af00      	add	r7, sp, #0
 800403c:	4603      	mov	r3, r0
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004048:	f7ff ff3e 	bl	8003ec8 <__NVIC_GetPriorityGrouping>
 800404c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	6978      	ldr	r0, [r7, #20]
 8004054:	f7ff ff8e 	bl	8003f74 <NVIC_EncodePriority>
 8004058:	4602      	mov	r2, r0
 800405a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405e:	4611      	mov	r1, r2
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff ff5d 	bl	8003f20 <__NVIC_SetPriority>
}
 8004066:	bf00      	nop
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	4603      	mov	r3, r0
 8004076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff31 	bl	8003ee4 <__NVIC_EnableIRQ>
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff ffa2 	bl	8003fdc <SysTick_Config>
 8004098:	4603      	mov	r3, r0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040b2:	e17f      	b.n	80043b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	2101      	movs	r1, #1
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	fa01 f303 	lsl.w	r3, r1, r3
 80040c0:	4013      	ands	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 8171 	beq.w	80043ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d005      	beq.n	80040e4 <HAL_GPIO_Init+0x40>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d130      	bne.n	8004146 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	2203      	movs	r2, #3
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	43db      	mvns	r3, r3
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4013      	ands	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800411a:	2201      	movs	r2, #1
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43db      	mvns	r3, r3
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4013      	ands	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	f003 0201 	and.w	r2, r3, #1
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b03      	cmp	r3, #3
 8004150:	d118      	bne.n	8004184 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004156:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004158:	2201      	movs	r2, #1
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	43db      	mvns	r3, r3
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4013      	ands	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	08db      	lsrs	r3, r3, #3
 800416e:	f003 0201 	and.w	r2, r3, #1
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 0303 	and.w	r3, r3, #3
 800418c:	2b03      	cmp	r3, #3
 800418e:	d017      	beq.n	80041c0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	2203      	movs	r2, #3
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43db      	mvns	r3, r3
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4013      	ands	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d123      	bne.n	8004214 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	08da      	lsrs	r2, r3, #3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3208      	adds	r2, #8
 80041d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	220f      	movs	r2, #15
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4013      	ands	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	08da      	lsrs	r2, r3, #3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3208      	adds	r2, #8
 800420e:	6939      	ldr	r1, [r7, #16]
 8004210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	2203      	movs	r2, #3
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	43db      	mvns	r3, r3
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4013      	ands	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f003 0203 	and.w	r2, r3, #3
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 80ac 	beq.w	80043ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004256:	4b5f      	ldr	r3, [pc, #380]	; (80043d4 <HAL_GPIO_Init+0x330>)
 8004258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800425a:	4a5e      	ldr	r2, [pc, #376]	; (80043d4 <HAL_GPIO_Init+0x330>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	6613      	str	r3, [r2, #96]	; 0x60
 8004262:	4b5c      	ldr	r3, [pc, #368]	; (80043d4 <HAL_GPIO_Init+0x330>)
 8004264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800426e:	4a5a      	ldr	r2, [pc, #360]	; (80043d8 <HAL_GPIO_Init+0x334>)
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	089b      	lsrs	r3, r3, #2
 8004274:	3302      	adds	r3, #2
 8004276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800427a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	220f      	movs	r2, #15
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4013      	ands	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004298:	d025      	beq.n	80042e6 <HAL_GPIO_Init+0x242>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a4f      	ldr	r2, [pc, #316]	; (80043dc <HAL_GPIO_Init+0x338>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d01f      	beq.n	80042e2 <HAL_GPIO_Init+0x23e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a4e      	ldr	r2, [pc, #312]	; (80043e0 <HAL_GPIO_Init+0x33c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d019      	beq.n	80042de <HAL_GPIO_Init+0x23a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a4d      	ldr	r2, [pc, #308]	; (80043e4 <HAL_GPIO_Init+0x340>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <HAL_GPIO_Init+0x236>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a4c      	ldr	r2, [pc, #304]	; (80043e8 <HAL_GPIO_Init+0x344>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00d      	beq.n	80042d6 <HAL_GPIO_Init+0x232>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a4b      	ldr	r2, [pc, #300]	; (80043ec <HAL_GPIO_Init+0x348>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d007      	beq.n	80042d2 <HAL_GPIO_Init+0x22e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a4a      	ldr	r2, [pc, #296]	; (80043f0 <HAL_GPIO_Init+0x34c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d101      	bne.n	80042ce <HAL_GPIO_Init+0x22a>
 80042ca:	2306      	movs	r3, #6
 80042cc:	e00c      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042ce:	2307      	movs	r3, #7
 80042d0:	e00a      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042d2:	2305      	movs	r3, #5
 80042d4:	e008      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042d6:	2304      	movs	r3, #4
 80042d8:	e006      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042da:	2303      	movs	r3, #3
 80042dc:	e004      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042de:	2302      	movs	r3, #2
 80042e0:	e002      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042e6:	2300      	movs	r3, #0
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	f002 0203 	and.w	r2, r2, #3
 80042ee:	0092      	lsls	r2, r2, #2
 80042f0:	4093      	lsls	r3, r2
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042f8:	4937      	ldr	r1, [pc, #220]	; (80043d8 <HAL_GPIO_Init+0x334>)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	089b      	lsrs	r3, r3, #2
 80042fe:	3302      	adds	r3, #2
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004306:	4b3b      	ldr	r3, [pc, #236]	; (80043f4 <HAL_GPIO_Init+0x350>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	43db      	mvns	r3, r3
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4013      	ands	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800432a:	4a32      	ldr	r2, [pc, #200]	; (80043f4 <HAL_GPIO_Init+0x350>)
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004330:	4b30      	ldr	r3, [pc, #192]	; (80043f4 <HAL_GPIO_Init+0x350>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	43db      	mvns	r3, r3
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4013      	ands	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004354:	4a27      	ldr	r2, [pc, #156]	; (80043f4 <HAL_GPIO_Init+0x350>)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800435a:	4b26      	ldr	r3, [pc, #152]	; (80043f4 <HAL_GPIO_Init+0x350>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	43db      	mvns	r3, r3
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4013      	ands	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800437e:	4a1d      	ldr	r2, [pc, #116]	; (80043f4 <HAL_GPIO_Init+0x350>)
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004384:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <HAL_GPIO_Init+0x350>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	43db      	mvns	r3, r3
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4013      	ands	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043a8:	4a12      	ldr	r2, [pc, #72]	; (80043f4 <HAL_GPIO_Init+0x350>)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	3301      	adds	r3, #1
 80043b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	fa22 f303 	lsr.w	r3, r2, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f47f ae78 	bne.w	80040b4 <HAL_GPIO_Init+0x10>
  }
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40010000 	.word	0x40010000
 80043dc:	48000400 	.word	0x48000400
 80043e0:	48000800 	.word	0x48000800
 80043e4:	48000c00 	.word	0x48000c00
 80043e8:	48001000 	.word	0x48001000
 80043ec:	48001400 	.word	0x48001400
 80043f0:	48001800 	.word	0x48001800
 80043f4:	40010400 	.word	0x40010400

080043f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	807b      	strh	r3, [r7, #2]
 8004404:	4613      	mov	r3, r2
 8004406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004408:	787b      	ldrb	r3, [r7, #1]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800440e:	887a      	ldrh	r2, [r7, #2]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004414:	e002      	b.n	800441c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004416:	887a      	ldrh	r2, [r7, #2]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	4603      	mov	r3, r0
 8004430:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d006      	beq.n	800444c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800443e:	4a05      	ldr	r2, [pc, #20]	; (8004454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004440:	88fb      	ldrh	r3, [r7, #6]
 8004442:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fd f86a 	bl	8001520 <HAL_GPIO_EXTI_Callback>
  }
}
 800444c:	bf00      	nop
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40010400 	.word	0x40010400

08004458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e081      	b.n	800456e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fc fdc8 	bl	8001014 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2224      	movs	r2, #36	; 0x24
 8004488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0201 	bic.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d107      	bne.n	80044d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044ce:	609a      	str	r2, [r3, #8]
 80044d0:	e006      	b.n	80044e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80044de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d104      	bne.n	80044f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6812      	ldr	r2, [r2, #0]
 80044fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004504:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004514:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691a      	ldr	r2, [r3, #16]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69d9      	ldr	r1, [r3, #28]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1a      	ldr	r2, [r3, #32]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0201 	orr.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af02      	add	r7, sp, #8
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	4608      	mov	r0, r1
 8004582:	4611      	mov	r1, r2
 8004584:	461a      	mov	r2, r3
 8004586:	4603      	mov	r3, r0
 8004588:	817b      	strh	r3, [r7, #10]
 800458a:	460b      	mov	r3, r1
 800458c:	813b      	strh	r3, [r7, #8]
 800458e:	4613      	mov	r3, r2
 8004590:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b20      	cmp	r3, #32
 800459c:	f040 80f9 	bne.w	8004792 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <HAL_I2C_Mem_Write+0x34>
 80045a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d105      	bne.n	80045b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e0ed      	b.n	8004794 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_I2C_Mem_Write+0x4e>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e0e6      	b.n	8004794 <HAL_I2C_Mem_Write+0x21c>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045ce:	f7fe f8cf 	bl	8002770 <HAL_GetTick>
 80045d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	2319      	movs	r3, #25
 80045da:	2201      	movs	r2, #1
 80045dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 fac3 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0d1      	b.n	8004794 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2221      	movs	r2, #33	; 0x21
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2240      	movs	r2, #64	; 0x40
 80045fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a3a      	ldr	r2, [r7, #32]
 800460a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004610:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004618:	88f8      	ldrh	r0, [r7, #6]
 800461a:	893a      	ldrh	r2, [r7, #8]
 800461c:	8979      	ldrh	r1, [r7, #10]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	4603      	mov	r3, r0
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f9d3 	bl	80049d4 <I2C_RequestMemoryWrite>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e0a9      	b.n	8004794 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004644:	b29b      	uxth	r3, r3
 8004646:	2bff      	cmp	r3, #255	; 0xff
 8004648:	d90e      	bls.n	8004668 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	22ff      	movs	r2, #255	; 0xff
 800464e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004654:	b2da      	uxtb	r2, r3
 8004656:	8979      	ldrh	r1, [r7, #10]
 8004658:	2300      	movs	r3, #0
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 fc2b 	bl	8004ebc <I2C_TransferConfig>
 8004666:	e00f      	b.n	8004688 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004676:	b2da      	uxtb	r2, r3
 8004678:	8979      	ldrh	r1, [r7, #10]
 800467a:	2300      	movs	r3, #0
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 fc1a 	bl	8004ebc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 faad 	bl	8004bec <I2C_WaitOnTXISFlagUntilTimeout>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e07b      	b.n	8004794 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d034      	beq.n	8004740 <HAL_I2C_Mem_Write+0x1c8>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d130      	bne.n	8004740 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e4:	2200      	movs	r2, #0
 80046e6:	2180      	movs	r1, #128	; 0x80
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 fa3f 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e04d      	b.n	8004794 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2bff      	cmp	r3, #255	; 0xff
 8004700:	d90e      	bls.n	8004720 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	22ff      	movs	r2, #255	; 0xff
 8004706:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470c:	b2da      	uxtb	r2, r3
 800470e:	8979      	ldrh	r1, [r7, #10]
 8004710:	2300      	movs	r3, #0
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 fbcf 	bl	8004ebc <I2C_TransferConfig>
 800471e:	e00f      	b.n	8004740 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472e:	b2da      	uxtb	r2, r3
 8004730:	8979      	ldrh	r1, [r7, #10]
 8004732:	2300      	movs	r3, #0
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 fbbe 	bl	8004ebc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004744:	b29b      	uxth	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d19e      	bne.n	8004688 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 fa8c 	bl	8004c6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e01a      	b.n	8004794 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2220      	movs	r2, #32
 8004764:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6859      	ldr	r1, [r3, #4]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	4b0a      	ldr	r3, [pc, #40]	; (800479c <HAL_I2C_Mem_Write+0x224>)
 8004772:	400b      	ands	r3, r1
 8004774:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2220      	movs	r2, #32
 800477a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	e000      	b.n	8004794 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004792:	2302      	movs	r3, #2
  }
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	fe00e800 	.word	0xfe00e800

080047a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af02      	add	r7, sp, #8
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	4608      	mov	r0, r1
 80047aa:	4611      	mov	r1, r2
 80047ac:	461a      	mov	r2, r3
 80047ae:	4603      	mov	r3, r0
 80047b0:	817b      	strh	r3, [r7, #10]
 80047b2:	460b      	mov	r3, r1
 80047b4:	813b      	strh	r3, [r7, #8]
 80047b6:	4613      	mov	r3, r2
 80047b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	f040 80fd 	bne.w	80049c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <HAL_I2C_Mem_Read+0x34>
 80047ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d105      	bne.n	80047e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0f1      	b.n	80049c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <HAL_I2C_Mem_Read+0x4e>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e0ea      	b.n	80049c4 <HAL_I2C_Mem_Read+0x224>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047f6:	f7fd ffbb 	bl	8002770 <HAL_GetTick>
 80047fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	2319      	movs	r3, #25
 8004802:	2201      	movs	r2, #1
 8004804:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f9af 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e0d5      	b.n	80049c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2222      	movs	r2, #34	; 0x22
 800481c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2240      	movs	r2, #64	; 0x40
 8004824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a3a      	ldr	r2, [r7, #32]
 8004832:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004838:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004840:	88f8      	ldrh	r0, [r7, #6]
 8004842:	893a      	ldrh	r2, [r7, #8]
 8004844:	8979      	ldrh	r1, [r7, #10]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	9301      	str	r3, [sp, #4]
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	4603      	mov	r3, r0
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 f913 	bl	8004a7c <I2C_RequestMemoryRead>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0ad      	b.n	80049c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486c:	b29b      	uxth	r3, r3
 800486e:	2bff      	cmp	r3, #255	; 0xff
 8004870:	d90e      	bls.n	8004890 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	22ff      	movs	r2, #255	; 0xff
 8004876:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487c:	b2da      	uxtb	r2, r3
 800487e:	8979      	ldrh	r1, [r7, #10]
 8004880:	4b52      	ldr	r3, [pc, #328]	; (80049cc <HAL_I2C_Mem_Read+0x22c>)
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 fb17 	bl	8004ebc <I2C_TransferConfig>
 800488e:	e00f      	b.n	80048b0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	8979      	ldrh	r1, [r7, #10]
 80048a2:	4b4a      	ldr	r3, [pc, #296]	; (80049cc <HAL_I2C_Mem_Read+0x22c>)
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 fb06 	bl	8004ebc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b6:	2200      	movs	r2, #0
 80048b8:	2104      	movs	r1, #4
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f956 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e07c      	b.n	80049c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d034      	beq.n	8004970 <HAL_I2C_Mem_Read+0x1d0>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490a:	2b00      	cmp	r3, #0
 800490c:	d130      	bne.n	8004970 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004914:	2200      	movs	r2, #0
 8004916:	2180      	movs	r1, #128	; 0x80
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 f927 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e04d      	b.n	80049c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	2bff      	cmp	r3, #255	; 0xff
 8004930:	d90e      	bls.n	8004950 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	22ff      	movs	r2, #255	; 0xff
 8004936:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493c:	b2da      	uxtb	r2, r3
 800493e:	8979      	ldrh	r1, [r7, #10]
 8004940:	2300      	movs	r3, #0
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 fab7 	bl	8004ebc <I2C_TransferConfig>
 800494e:	e00f      	b.n	8004970 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004954:	b29a      	uxth	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495e:	b2da      	uxtb	r2, r3
 8004960:	8979      	ldrh	r1, [r7, #10]
 8004962:	2300      	movs	r3, #0
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 faa6 	bl	8004ebc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d19a      	bne.n	80048b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f974 	bl	8004c6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e01a      	b.n	80049c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2220      	movs	r2, #32
 8004994:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6859      	ldr	r1, [r3, #4]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <HAL_I2C_Mem_Read+0x230>)
 80049a2:	400b      	ands	r3, r1
 80049a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	e000      	b.n	80049c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80049c2:	2302      	movs	r3, #2
  }
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	80002400 	.word	0x80002400
 80049d0:	fe00e800 	.word	0xfe00e800

080049d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af02      	add	r7, sp, #8
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	4608      	mov	r0, r1
 80049de:	4611      	mov	r1, r2
 80049e0:	461a      	mov	r2, r3
 80049e2:	4603      	mov	r3, r0
 80049e4:	817b      	strh	r3, [r7, #10]
 80049e6:	460b      	mov	r3, r1
 80049e8:	813b      	strh	r3, [r7, #8]
 80049ea:	4613      	mov	r3, r2
 80049ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	8979      	ldrh	r1, [r7, #10]
 80049f4:	4b20      	ldr	r3, [pc, #128]	; (8004a78 <I2C_RequestMemoryWrite+0xa4>)
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 fa5d 	bl	8004ebc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	69b9      	ldr	r1, [r7, #24]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f8f0 	bl	8004bec <I2C_WaitOnTXISFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e02c      	b.n	8004a70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d105      	bne.n	8004a28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a1c:	893b      	ldrh	r3, [r7, #8]
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	629a      	str	r2, [r3, #40]	; 0x28
 8004a26:	e015      	b.n	8004a54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a28:	893b      	ldrh	r3, [r7, #8]
 8004a2a:	0a1b      	lsrs	r3, r3, #8
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a36:	69fa      	ldr	r2, [r7, #28]
 8004a38:	69b9      	ldr	r1, [r7, #24]
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f8d6 	bl	8004bec <I2C_WaitOnTXISFlagUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e012      	b.n	8004a70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a4a:	893b      	ldrh	r3, [r7, #8]
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2180      	movs	r1, #128	; 0x80
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 f884 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	80002000 	.word	0x80002000

08004a7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	4608      	mov	r0, r1
 8004a86:	4611      	mov	r1, r2
 8004a88:	461a      	mov	r2, r3
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	817b      	strh	r3, [r7, #10]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	813b      	strh	r3, [r7, #8]
 8004a92:	4613      	mov	r3, r2
 8004a94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a96:	88fb      	ldrh	r3, [r7, #6]
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	8979      	ldrh	r1, [r7, #10]
 8004a9c:	4b20      	ldr	r3, [pc, #128]	; (8004b20 <I2C_RequestMemoryRead+0xa4>)
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 fa0a 	bl	8004ebc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	69b9      	ldr	r1, [r7, #24]
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 f89d 	bl	8004bec <I2C_WaitOnTXISFlagUntilTimeout>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e02c      	b.n	8004b16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004abc:	88fb      	ldrh	r3, [r7, #6]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d105      	bne.n	8004ace <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ac2:	893b      	ldrh	r3, [r7, #8]
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	629a      	str	r2, [r3, #40]	; 0x28
 8004acc:	e015      	b.n	8004afa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ace:	893b      	ldrh	r3, [r7, #8]
 8004ad0:	0a1b      	lsrs	r3, r3, #8
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004adc:	69fa      	ldr	r2, [r7, #28]
 8004ade:	69b9      	ldr	r1, [r7, #24]
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 f883 	bl	8004bec <I2C_WaitOnTXISFlagUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e012      	b.n	8004b16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004af0:	893b      	ldrh	r3, [r7, #8]
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	2200      	movs	r2, #0
 8004b02:	2140      	movs	r1, #64	; 0x40
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 f831 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	80002000 	.word	0x80002000

08004b24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d103      	bne.n	8004b42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d007      	beq.n	8004b60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	619a      	str	r2, [r3, #24]
  }
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b7c:	e022      	b.n	8004bc4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d01e      	beq.n	8004bc4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b86:	f7fd fdf3 	bl	8002770 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d302      	bcc.n	8004b9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d113      	bne.n	8004bc4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba0:	f043 0220 	orr.w	r2, r3, #32
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e00f      	b.n	8004be4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699a      	ldr	r2, [r3, #24]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	bf0c      	ite	eq
 8004bd4:	2301      	moveq	r3, #1
 8004bd6:	2300      	movne	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d0cd      	beq.n	8004b7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bf8:	e02c      	b.n	8004c54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 f870 	bl	8004ce4 <I2C_IsErrorOccurred>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e02a      	b.n	8004c64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c14:	d01e      	beq.n	8004c54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c16:	f7fd fdab 	bl	8002770 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d302      	bcc.n	8004c2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d113      	bne.n	8004c54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c30:	f043 0220 	orr.w	r2, r3, #32
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e007      	b.n	8004c64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d1cb      	bne.n	8004bfa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c78:	e028      	b.n	8004ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 f830 	bl	8004ce4 <I2C_IsErrorOccurred>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e026      	b.n	8004cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8e:	f7fd fd6f 	bl	8002770 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d302      	bcc.n	8004ca4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d113      	bne.n	8004ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca8:	f043 0220 	orr.w	r2, r3, #32
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e007      	b.n	8004cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d1cf      	bne.n	8004c7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08a      	sub	sp, #40	; 0x28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d075      	beq.n	8004dfc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2210      	movs	r2, #16
 8004d16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d18:	e056      	b.n	8004dc8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d20:	d052      	beq.n	8004dc8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d22:	f7fd fd25 	bl	8002770 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d302      	bcc.n	8004d38 <I2C_IsErrorOccurred+0x54>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d147      	bne.n	8004dc8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d5a:	d12e      	bne.n	8004dba <I2C_IsErrorOccurred+0xd6>
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d62:	d02a      	beq.n	8004dba <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004d64:	7cfb      	ldrb	r3, [r7, #19]
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	d027      	beq.n	8004dba <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004d7a:	f7fd fcf9 	bl	8002770 <HAL_GetTick>
 8004d7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d80:	e01b      	b.n	8004dba <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d82:	f7fd fcf5 	bl	8002770 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b19      	cmp	r3, #25
 8004d8e:	d914      	bls.n	8004dba <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d94:	f043 0220 	orr.w	r2, r3, #32
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d1dc      	bne.n	8004d82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b20      	cmp	r3, #32
 8004dd4:	d003      	beq.n	8004dde <I2C_IsErrorOccurred+0xfa>
 8004dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d09d      	beq.n	8004d1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d103      	bne.n	8004dee <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2220      	movs	r2, #32
 8004dec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	f043 0304 	orr.w	r3, r3, #4
 8004df4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00b      	beq.n	8004e26 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00b      	beq.n	8004e48 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	f043 0308 	orr.w	r3, r3, #8
 8004e36:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00b      	beq.n	8004e6a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	f043 0302 	orr.w	r3, r3, #2
 8004e58:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d01c      	beq.n	8004eac <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f7ff fe56 	bl	8004b24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6859      	ldr	r1, [r3, #4]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	4b0d      	ldr	r3, [pc, #52]	; (8004eb8 <I2C_IsErrorOccurred+0x1d4>)
 8004e84:	400b      	ands	r3, r1
 8004e86:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3728      	adds	r7, #40	; 0x28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	fe00e800 	.word	0xfe00e800

08004ebc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	607b      	str	r3, [r7, #4]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	817b      	strh	r3, [r7, #10]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ece:	897b      	ldrh	r3, [r7, #10]
 8004ed0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ed4:	7a7b      	ldrb	r3, [r7, #9]
 8004ed6:	041b      	lsls	r3, r3, #16
 8004ed8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004edc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004eea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	0d5b      	lsrs	r3, r3, #21
 8004ef6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004efa:	4b08      	ldr	r3, [pc, #32]	; (8004f1c <I2C_TransferConfig+0x60>)
 8004efc:	430b      	orrs	r3, r1
 8004efe:	43db      	mvns	r3, r3
 8004f00:	ea02 0103 	and.w	r1, r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f0e:	bf00      	nop
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	03ff63ff 	.word	0x03ff63ff

08004f20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d138      	bne.n	8004fa8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d101      	bne.n	8004f44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f40:	2302      	movs	r3, #2
 8004f42:	e032      	b.n	8004faa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2224      	movs	r2, #36	; 0x24
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0201 	bic.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6819      	ldr	r1, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e000      	b.n	8004faa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fa8:	2302      	movs	r3, #2
  }
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	d139      	bne.n	8005040 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e033      	b.n	8005042 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2224      	movs	r2, #36	; 0x24
 8004fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0201 	bic.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005008:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	021b      	lsls	r3, r3, #8
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4313      	orrs	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	e000      	b.n	8005042 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005040:	2302      	movs	r3, #2
  }
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005054:	4b05      	ldr	r3, [pc, #20]	; (800506c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a04      	ldr	r2, [pc, #16]	; (800506c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800505a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800505e:	6013      	str	r3, [r2, #0]
}
 8005060:	bf00      	nop
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40007000 	.word	0x40007000

08005070 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10c      	bne.n	800509c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8005082:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800508a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800508e:	d10e      	bne.n	80050ae <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005090:	f000 f896 	bl	80051c0 <HAL_PWREx_DisableLowPowerRunMode>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d009      	beq.n	80050ae <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 800509a:	e016      	b.n	80050ca <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 800509c:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <HAL_PWR_EnterSLEEPMode+0x60>)
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050a8:	d001      	beq.n	80050ae <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80050aa:	f000 f879 	bl	80051a0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80050ae:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <HAL_PWR_EnterSLEEPMode+0x64>)
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	4a08      	ldr	r2, [pc, #32]	; (80050d4 <HAL_PWR_EnterSLEEPMode+0x64>)
 80050b4:	f023 0304 	bic.w	r3, r3, #4
 80050b8:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80050ba:	78fb      	ldrb	r3, [r7, #3]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d101      	bne.n	80050c4 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80050c0:	bf30      	wfi
 80050c2:	e002      	b.n	80050ca <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80050c4:	bf40      	sev
    __WFE();
 80050c6:	bf20      	wfe
    __WFE();
 80050c8:	bf20      	wfe
  }

}
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	40007000 	.word	0x40007000
 80050d4:	e000ed00 	.word	0xe000ed00

080050d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80050dc:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40007000 	.word	0x40007000

080050f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005102:	d130      	bne.n	8005166 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005104:	4b23      	ldr	r3, [pc, #140]	; (8005194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800510c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005110:	d038      	beq.n	8005184 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005112:	4b20      	ldr	r3, [pc, #128]	; (8005194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800511a:	4a1e      	ldr	r2, [pc, #120]	; (8005194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800511c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005120:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005122:	4b1d      	ldr	r3, [pc, #116]	; (8005198 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2232      	movs	r2, #50	; 0x32
 8005128:	fb02 f303 	mul.w	r3, r2, r3
 800512c:	4a1b      	ldr	r2, [pc, #108]	; (800519c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800512e:	fba2 2303 	umull	r2, r3, r2, r3
 8005132:	0c9b      	lsrs	r3, r3, #18
 8005134:	3301      	adds	r3, #1
 8005136:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005138:	e002      	b.n	8005140 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3b01      	subs	r3, #1
 800513e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005140:	4b14      	ldr	r3, [pc, #80]	; (8005194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800514c:	d102      	bne.n	8005154 <HAL_PWREx_ControlVoltageScaling+0x60>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1f2      	bne.n	800513a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005154:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005160:	d110      	bne.n	8005184 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e00f      	b.n	8005186 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005166:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800516e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005172:	d007      	beq.n	8005184 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005174:	4b07      	ldr	r3, [pc, #28]	; (8005194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800517c:	4a05      	ldr	r2, [pc, #20]	; (8005194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800517e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005182:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	40007000 	.word	0x40007000
 8005198:	2000005c 	.word	0x2000005c
 800519c:	431bde83 	.word	0x431bde83

080051a0 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80051a4:	4b05      	ldr	r3, [pc, #20]	; (80051bc <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a04      	ldr	r2, [pc, #16]	; (80051bc <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80051aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051ae:	6013      	str	r3, [r2, #0]
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40007000 	.word	0x40007000

080051c0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80051c6:	4b17      	ldr	r3, [pc, #92]	; (8005224 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a16      	ldr	r2, [pc, #88]	; (8005224 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80051cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051d0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051d2:	4b15      	ldr	r3, [pc, #84]	; (8005228 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2232      	movs	r2, #50	; 0x32
 80051d8:	fb02 f303 	mul.w	r3, r2, r3
 80051dc:	4a13      	ldr	r2, [pc, #76]	; (800522c <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	0c9b      	lsrs	r3, r3, #18
 80051e4:	3301      	adds	r3, #1
 80051e6:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80051e8:	e002      	b.n	80051f0 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3b01      	subs	r3, #1
 80051ee:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80051f0:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051fc:	d102      	bne.n	8005204 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1f2      	bne.n	80051ea <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8005204:	4b07      	ldr	r3, [pc, #28]	; (8005224 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800520c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005210:	d101      	bne.n	8005216 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e000      	b.n	8005218 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	40007000 	.word	0x40007000
 8005228:	2000005c 	.word	0x2000005c
 800522c:	431bde83 	.word	0x431bde83

08005230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e3ca      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005242:	4b97      	ldr	r3, [pc, #604]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 030c 	and.w	r3, r3, #12
 800524a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800524c:	4b94      	ldr	r3, [pc, #592]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0310 	and.w	r3, r3, #16
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 80e4 	beq.w	800542c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d007      	beq.n	800527a <HAL_RCC_OscConfig+0x4a>
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	2b0c      	cmp	r3, #12
 800526e:	f040 808b 	bne.w	8005388 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b01      	cmp	r3, #1
 8005276:	f040 8087 	bne.w	8005388 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800527a:	4b89      	ldr	r3, [pc, #548]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d005      	beq.n	8005292 <HAL_RCC_OscConfig+0x62>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e3a2      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1a      	ldr	r2, [r3, #32]
 8005296:	4b82      	ldr	r3, [pc, #520]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d004      	beq.n	80052ac <HAL_RCC_OscConfig+0x7c>
 80052a2:	4b7f      	ldr	r3, [pc, #508]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052aa:	e005      	b.n	80052b8 <HAL_RCC_OscConfig+0x88>
 80052ac:	4b7c      	ldr	r3, [pc, #496]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 80052ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052b2:	091b      	lsrs	r3, r3, #4
 80052b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d223      	bcs.n	8005304 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 fd1d 	bl	8005d00 <RCC_SetFlashLatencyFromMSIRange>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e383      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052d0:	4b73      	ldr	r3, [pc, #460]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a72      	ldr	r2, [pc, #456]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 80052d6:	f043 0308 	orr.w	r3, r3, #8
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	4b70      	ldr	r3, [pc, #448]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	496d      	ldr	r1, [pc, #436]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052ee:	4b6c      	ldr	r3, [pc, #432]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	021b      	lsls	r3, r3, #8
 80052fc:	4968      	ldr	r1, [pc, #416]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	604b      	str	r3, [r1, #4]
 8005302:	e025      	b.n	8005350 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005304:	4b66      	ldr	r3, [pc, #408]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a65      	ldr	r2, [pc, #404]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 800530a:	f043 0308 	orr.w	r3, r3, #8
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	4b63      	ldr	r3, [pc, #396]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	4960      	ldr	r1, [pc, #384]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 800531e:	4313      	orrs	r3, r2
 8005320:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005322:	4b5f      	ldr	r3, [pc, #380]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	021b      	lsls	r3, r3, #8
 8005330:	495b      	ldr	r1, [pc, #364]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 8005332:	4313      	orrs	r3, r2
 8005334:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d109      	bne.n	8005350 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fcdd 	bl	8005d00 <RCC_SetFlashLatencyFromMSIRange>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e343      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005350:	f000 fc4a 	bl	8005be8 <HAL_RCC_GetSysClockFreq>
 8005354:	4602      	mov	r2, r0
 8005356:	4b52      	ldr	r3, [pc, #328]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	091b      	lsrs	r3, r3, #4
 800535c:	f003 030f 	and.w	r3, r3, #15
 8005360:	4950      	ldr	r1, [pc, #320]	; (80054a4 <HAL_RCC_OscConfig+0x274>)
 8005362:	5ccb      	ldrb	r3, [r1, r3]
 8005364:	f003 031f 	and.w	r3, r3, #31
 8005368:	fa22 f303 	lsr.w	r3, r2, r3
 800536c:	4a4e      	ldr	r2, [pc, #312]	; (80054a8 <HAL_RCC_OscConfig+0x278>)
 800536e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005370:	4b4e      	ldr	r3, [pc, #312]	; (80054ac <HAL_RCC_OscConfig+0x27c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f7fd f9ab 	bl	80026d0 <HAL_InitTick>
 800537a:	4603      	mov	r3, r0
 800537c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800537e:	7bfb      	ldrb	r3, [r7, #15]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d052      	beq.n	800542a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005384:	7bfb      	ldrb	r3, [r7, #15]
 8005386:	e327      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d032      	beq.n	80053f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005390:	4b43      	ldr	r3, [pc, #268]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a42      	ldr	r2, [pc, #264]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800539c:	f7fd f9e8 	bl	8002770 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053a4:	f7fd f9e4 	bl	8002770 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e310      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053b6:	4b3a      	ldr	r3, [pc, #232]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0f0      	beq.n	80053a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053c2:	4b37      	ldr	r3, [pc, #220]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a36      	ldr	r2, [pc, #216]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 80053c8:	f043 0308 	orr.w	r3, r3, #8
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	4b34      	ldr	r3, [pc, #208]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	4931      	ldr	r1, [pc, #196]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053e0:	4b2f      	ldr	r3, [pc, #188]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	492c      	ldr	r1, [pc, #176]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	604b      	str	r3, [r1, #4]
 80053f4:	e01a      	b.n	800542c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053f6:	4b2a      	ldr	r3, [pc, #168]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a29      	ldr	r2, [pc, #164]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 80053fc:	f023 0301 	bic.w	r3, r3, #1
 8005400:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005402:	f7fd f9b5 	bl	8002770 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800540a:	f7fd f9b1 	bl	8002770 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e2dd      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800541c:	4b20      	ldr	r3, [pc, #128]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1f0      	bne.n	800540a <HAL_RCC_OscConfig+0x1da>
 8005428:	e000      	b.n	800542c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800542a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	d074      	beq.n	8005522 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2b08      	cmp	r3, #8
 800543c:	d005      	beq.n	800544a <HAL_RCC_OscConfig+0x21a>
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	2b0c      	cmp	r3, #12
 8005442:	d10e      	bne.n	8005462 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	2b03      	cmp	r3, #3
 8005448:	d10b      	bne.n	8005462 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800544a:	4b15      	ldr	r3, [pc, #84]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d064      	beq.n	8005520 <HAL_RCC_OscConfig+0x2f0>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d160      	bne.n	8005520 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e2ba      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546a:	d106      	bne.n	800547a <HAL_RCC_OscConfig+0x24a>
 800546c:	4b0c      	ldr	r3, [pc, #48]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a0b      	ldr	r2, [pc, #44]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 8005472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	e026      	b.n	80054c8 <HAL_RCC_OscConfig+0x298>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005482:	d115      	bne.n	80054b0 <HAL_RCC_OscConfig+0x280>
 8005484:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a05      	ldr	r2, [pc, #20]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 800548a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	4b03      	ldr	r3, [pc, #12]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a02      	ldr	r2, [pc, #8]	; (80054a0 <HAL_RCC_OscConfig+0x270>)
 8005496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	e014      	b.n	80054c8 <HAL_RCC_OscConfig+0x298>
 800549e:	bf00      	nop
 80054a0:	40021000 	.word	0x40021000
 80054a4:	0800a4c4 	.word	0x0800a4c4
 80054a8:	2000005c 	.word	0x2000005c
 80054ac:	20000060 	.word	0x20000060
 80054b0:	4ba0      	ldr	r3, [pc, #640]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a9f      	ldr	r2, [pc, #636]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 80054b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	4b9d      	ldr	r3, [pc, #628]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a9c      	ldr	r2, [pc, #624]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 80054c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d013      	beq.n	80054f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d0:	f7fd f94e 	bl	8002770 <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054d8:	f7fd f94a 	bl	8002770 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b64      	cmp	r3, #100	; 0x64
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e276      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054ea:	4b92      	ldr	r3, [pc, #584]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0f0      	beq.n	80054d8 <HAL_RCC_OscConfig+0x2a8>
 80054f6:	e014      	b.n	8005522 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f8:	f7fd f93a 	bl	8002770 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005500:	f7fd f936 	bl	8002770 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b64      	cmp	r3, #100	; 0x64
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e262      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005512:	4b88      	ldr	r3, [pc, #544]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f0      	bne.n	8005500 <HAL_RCC_OscConfig+0x2d0>
 800551e:	e000      	b.n	8005522 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d060      	beq.n	80055f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	2b04      	cmp	r3, #4
 8005532:	d005      	beq.n	8005540 <HAL_RCC_OscConfig+0x310>
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	2b0c      	cmp	r3, #12
 8005538:	d119      	bne.n	800556e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b02      	cmp	r3, #2
 800553e:	d116      	bne.n	800556e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005540:	4b7c      	ldr	r3, [pc, #496]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005548:	2b00      	cmp	r3, #0
 800554a:	d005      	beq.n	8005558 <HAL_RCC_OscConfig+0x328>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e23f      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005558:	4b76      	ldr	r3, [pc, #472]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	061b      	lsls	r3, r3, #24
 8005566:	4973      	ldr	r1, [pc, #460]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 8005568:	4313      	orrs	r3, r2
 800556a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800556c:	e040      	b.n	80055f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d023      	beq.n	80055be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005576:	4b6f      	ldr	r3, [pc, #444]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a6e      	ldr	r2, [pc, #440]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 800557c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005582:	f7fd f8f5 	bl	8002770 <HAL_GetTick>
 8005586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005588:	e008      	b.n	800559c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800558a:	f7fd f8f1 	bl	8002770 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e21d      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800559c:	4b65      	ldr	r3, [pc, #404]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0f0      	beq.n	800558a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055a8:	4b62      	ldr	r3, [pc, #392]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	061b      	lsls	r3, r3, #24
 80055b6:	495f      	ldr	r1, [pc, #380]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	604b      	str	r3, [r1, #4]
 80055bc:	e018      	b.n	80055f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055be:	4b5d      	ldr	r3, [pc, #372]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a5c      	ldr	r2, [pc, #368]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 80055c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ca:	f7fd f8d1 	bl	8002770 <HAL_GetTick>
 80055ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055d0:	e008      	b.n	80055e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055d2:	f7fd f8cd 	bl	8002770 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d901      	bls.n	80055e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e1f9      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055e4:	4b53      	ldr	r3, [pc, #332]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1f0      	bne.n	80055d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d03c      	beq.n	8005676 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d01c      	beq.n	800563e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005604:	4b4b      	ldr	r3, [pc, #300]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 8005606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800560a:	4a4a      	ldr	r2, [pc, #296]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 800560c:	f043 0301 	orr.w	r3, r3, #1
 8005610:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005614:	f7fd f8ac 	bl	8002770 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800561c:	f7fd f8a8 	bl	8002770 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e1d4      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800562e:	4b41      	ldr	r3, [pc, #260]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 8005630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0ef      	beq.n	800561c <HAL_RCC_OscConfig+0x3ec>
 800563c:	e01b      	b.n	8005676 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800563e:	4b3d      	ldr	r3, [pc, #244]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 8005640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005644:	4a3b      	ldr	r2, [pc, #236]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 8005646:	f023 0301 	bic.w	r3, r3, #1
 800564a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564e:	f7fd f88f 	bl	8002770 <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005654:	e008      	b.n	8005668 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005656:	f7fd f88b 	bl	8002770 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e1b7      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005668:	4b32      	ldr	r3, [pc, #200]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 800566a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1ef      	bne.n	8005656 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0304 	and.w	r3, r3, #4
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 80a6 	beq.w	80057d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005684:	2300      	movs	r3, #0
 8005686:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005688:	4b2a      	ldr	r3, [pc, #168]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 800568a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10d      	bne.n	80056b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005694:	4b27      	ldr	r3, [pc, #156]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 8005696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005698:	4a26      	ldr	r2, [pc, #152]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 800569a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800569e:	6593      	str	r3, [r2, #88]	; 0x58
 80056a0:	4b24      	ldr	r3, [pc, #144]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 80056a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a8:	60bb      	str	r3, [r7, #8]
 80056aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ac:	2301      	movs	r3, #1
 80056ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056b0:	4b21      	ldr	r3, [pc, #132]	; (8005738 <HAL_RCC_OscConfig+0x508>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d118      	bne.n	80056ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056bc:	4b1e      	ldr	r3, [pc, #120]	; (8005738 <HAL_RCC_OscConfig+0x508>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a1d      	ldr	r2, [pc, #116]	; (8005738 <HAL_RCC_OscConfig+0x508>)
 80056c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056c8:	f7fd f852 	bl	8002770 <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d0:	f7fd f84e 	bl	8002770 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e17a      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056e2:	4b15      	ldr	r3, [pc, #84]	; (8005738 <HAL_RCC_OscConfig+0x508>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0f0      	beq.n	80056d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d108      	bne.n	8005708 <HAL_RCC_OscConfig+0x4d8>
 80056f6:	4b0f      	ldr	r3, [pc, #60]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 80056f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fc:	4a0d      	ldr	r2, [pc, #52]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 80056fe:	f043 0301 	orr.w	r3, r3, #1
 8005702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005706:	e029      	b.n	800575c <HAL_RCC_OscConfig+0x52c>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	2b05      	cmp	r3, #5
 800570e:	d115      	bne.n	800573c <HAL_RCC_OscConfig+0x50c>
 8005710:	4b08      	ldr	r3, [pc, #32]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 8005712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005716:	4a07      	ldr	r2, [pc, #28]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 8005718:	f043 0304 	orr.w	r3, r3, #4
 800571c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005720:	4b04      	ldr	r3, [pc, #16]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005726:	4a03      	ldr	r2, [pc, #12]	; (8005734 <HAL_RCC_OscConfig+0x504>)
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005730:	e014      	b.n	800575c <HAL_RCC_OscConfig+0x52c>
 8005732:	bf00      	nop
 8005734:	40021000 	.word	0x40021000
 8005738:	40007000 	.word	0x40007000
 800573c:	4b9c      	ldr	r3, [pc, #624]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 800573e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005742:	4a9b      	ldr	r2, [pc, #620]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 8005744:	f023 0301 	bic.w	r3, r3, #1
 8005748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800574c:	4b98      	ldr	r3, [pc, #608]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 800574e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005752:	4a97      	ldr	r2, [pc, #604]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 8005754:	f023 0304 	bic.w	r3, r3, #4
 8005758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d016      	beq.n	8005792 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005764:	f7fd f804 	bl	8002770 <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800576a:	e00a      	b.n	8005782 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800576c:	f7fd f800 	bl	8002770 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	f241 3288 	movw	r2, #5000	; 0x1388
 800577a:	4293      	cmp	r3, r2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e12a      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005782:	4b8b      	ldr	r3, [pc, #556]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 8005784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0ed      	beq.n	800576c <HAL_RCC_OscConfig+0x53c>
 8005790:	e015      	b.n	80057be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005792:	f7fc ffed 	bl	8002770 <HAL_GetTick>
 8005796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005798:	e00a      	b.n	80057b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800579a:	f7fc ffe9 	bl	8002770 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e113      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057b0:	4b7f      	ldr	r3, [pc, #508]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1ed      	bne.n	800579a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057be:	7ffb      	ldrb	r3, [r7, #31]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d105      	bne.n	80057d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057c4:	4b7a      	ldr	r3, [pc, #488]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 80057c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c8:	4a79      	ldr	r2, [pc, #484]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 80057ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80fe 	beq.w	80059d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057de:	2b02      	cmp	r3, #2
 80057e0:	f040 80d0 	bne.w	8005984 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80057e4:	4b72      	ldr	r3, [pc, #456]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f003 0203 	and.w	r2, r3, #3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d130      	bne.n	800585a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	3b01      	subs	r3, #1
 8005804:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005806:	429a      	cmp	r2, r3
 8005808:	d127      	bne.n	800585a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005814:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005816:	429a      	cmp	r2, r3
 8005818:	d11f      	bne.n	800585a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005824:	2a07      	cmp	r2, #7
 8005826:	bf14      	ite	ne
 8005828:	2201      	movne	r2, #1
 800582a:	2200      	moveq	r2, #0
 800582c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800582e:	4293      	cmp	r3, r2
 8005830:	d113      	bne.n	800585a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583c:	085b      	lsrs	r3, r3, #1
 800583e:	3b01      	subs	r3, #1
 8005840:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005842:	429a      	cmp	r2, r3
 8005844:	d109      	bne.n	800585a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	085b      	lsrs	r3, r3, #1
 8005852:	3b01      	subs	r3, #1
 8005854:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005856:	429a      	cmp	r2, r3
 8005858:	d06e      	beq.n	8005938 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2b0c      	cmp	r3, #12
 800585e:	d069      	beq.n	8005934 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005860:	4b53      	ldr	r3, [pc, #332]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d105      	bne.n	8005878 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800586c:	4b50      	ldr	r3, [pc, #320]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e0ad      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800587c:	4b4c      	ldr	r3, [pc, #304]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a4b      	ldr	r2, [pc, #300]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 8005882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005886:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005888:	f7fc ff72 	bl	8002770 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005890:	f7fc ff6e 	bl	8002770 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e09a      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058a2:	4b43      	ldr	r3, [pc, #268]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058ae:	4b40      	ldr	r3, [pc, #256]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	4b40      	ldr	r3, [pc, #256]	; (80059b4 <HAL_RCC_OscConfig+0x784>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80058be:	3a01      	subs	r2, #1
 80058c0:	0112      	lsls	r2, r2, #4
 80058c2:	4311      	orrs	r1, r2
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058c8:	0212      	lsls	r2, r2, #8
 80058ca:	4311      	orrs	r1, r2
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80058d0:	0852      	lsrs	r2, r2, #1
 80058d2:	3a01      	subs	r2, #1
 80058d4:	0552      	lsls	r2, r2, #21
 80058d6:	4311      	orrs	r1, r2
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80058dc:	0852      	lsrs	r2, r2, #1
 80058de:	3a01      	subs	r2, #1
 80058e0:	0652      	lsls	r2, r2, #25
 80058e2:	4311      	orrs	r1, r2
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058e8:	0912      	lsrs	r2, r2, #4
 80058ea:	0452      	lsls	r2, r2, #17
 80058ec:	430a      	orrs	r2, r1
 80058ee:	4930      	ldr	r1, [pc, #192]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80058f4:	4b2e      	ldr	r3, [pc, #184]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a2d      	ldr	r2, [pc, #180]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 80058fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005900:	4b2b      	ldr	r3, [pc, #172]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	4a2a      	ldr	r2, [pc, #168]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 8005906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800590a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800590c:	f7fc ff30 	bl	8002770 <HAL_GetTick>
 8005910:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005912:	e008      	b.n	8005926 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005914:	f7fc ff2c 	bl	8002770 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e058      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005926:	4b22      	ldr	r3, [pc, #136]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0f0      	beq.n	8005914 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005932:	e050      	b.n	80059d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e04f      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005938:	4b1d      	ldr	r3, [pc, #116]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d148      	bne.n	80059d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005944:	4b1a      	ldr	r3, [pc, #104]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a19      	ldr	r2, [pc, #100]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 800594a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800594e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005950:	4b17      	ldr	r3, [pc, #92]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	4a16      	ldr	r2, [pc, #88]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 8005956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800595a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800595c:	f7fc ff08 	bl	8002770 <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005964:	f7fc ff04 	bl	8002770 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e030      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005976:	4b0e      	ldr	r3, [pc, #56]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0f0      	beq.n	8005964 <HAL_RCC_OscConfig+0x734>
 8005982:	e028      	b.n	80059d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	2b0c      	cmp	r3, #12
 8005988:	d023      	beq.n	80059d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800598a:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a08      	ldr	r2, [pc, #32]	; (80059b0 <HAL_RCC_OscConfig+0x780>)
 8005990:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005996:	f7fc feeb 	bl	8002770 <HAL_GetTick>
 800599a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800599c:	e00c      	b.n	80059b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800599e:	f7fc fee7 	bl	8002770 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d905      	bls.n	80059b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e013      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
 80059b0:	40021000 	.word	0x40021000
 80059b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059b8:	4b09      	ldr	r3, [pc, #36]	; (80059e0 <HAL_RCC_OscConfig+0x7b0>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1ec      	bne.n	800599e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80059c4:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <HAL_RCC_OscConfig+0x7b0>)
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	4905      	ldr	r1, [pc, #20]	; (80059e0 <HAL_RCC_OscConfig+0x7b0>)
 80059ca:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <HAL_RCC_OscConfig+0x7b4>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	60cb      	str	r3, [r1, #12]
 80059d0:	e001      	b.n	80059d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3720      	adds	r7, #32
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40021000 	.word	0x40021000
 80059e4:	feeefffc 	.word	0xfeeefffc

080059e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e0e7      	b.n	8005bcc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059fc:	4b75      	ldr	r3, [pc, #468]	; (8005bd4 <HAL_RCC_ClockConfig+0x1ec>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d910      	bls.n	8005a2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a0a:	4b72      	ldr	r3, [pc, #456]	; (8005bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f023 0207 	bic.w	r2, r3, #7
 8005a12:	4970      	ldr	r1, [pc, #448]	; (8005bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a1a:	4b6e      	ldr	r3, [pc, #440]	; (8005bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0307 	and.w	r3, r3, #7
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d001      	beq.n	8005a2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e0cf      	b.n	8005bcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d010      	beq.n	8005a5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	4b66      	ldr	r3, [pc, #408]	; (8005bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d908      	bls.n	8005a5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a48:	4b63      	ldr	r3, [pc, #396]	; (8005bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	4960      	ldr	r1, [pc, #384]	; (8005bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d04c      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d107      	bne.n	8005a7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a6e:	4b5a      	ldr	r3, [pc, #360]	; (8005bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d121      	bne.n	8005abe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e0a6      	b.n	8005bcc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d107      	bne.n	8005a96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a86:	4b54      	ldr	r3, [pc, #336]	; (8005bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d115      	bne.n	8005abe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e09a      	b.n	8005bcc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d107      	bne.n	8005aae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a9e:	4b4e      	ldr	r3, [pc, #312]	; (8005bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d109      	bne.n	8005abe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e08e      	b.n	8005bcc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005aae:	4b4a      	ldr	r3, [pc, #296]	; (8005bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e086      	b.n	8005bcc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005abe:	4b46      	ldr	r3, [pc, #280]	; (8005bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f023 0203 	bic.w	r2, r3, #3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	4943      	ldr	r1, [pc, #268]	; (8005bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad0:	f7fc fe4e 	bl	8002770 <HAL_GetTick>
 8005ad4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ad6:	e00a      	b.n	8005aee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ad8:	f7fc fe4a 	bl	8002770 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e06e      	b.n	8005bcc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aee:	4b3a      	ldr	r3, [pc, #232]	; (8005bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 020c 	and.w	r2, r3, #12
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d1eb      	bne.n	8005ad8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d010      	beq.n	8005b2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	4b31      	ldr	r3, [pc, #196]	; (8005bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d208      	bcs.n	8005b2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b1c:	4b2e      	ldr	r3, [pc, #184]	; (8005bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	492b      	ldr	r1, [pc, #172]	; (8005bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b2e:	4b29      	ldr	r3, [pc, #164]	; (8005bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0307 	and.w	r3, r3, #7
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d210      	bcs.n	8005b5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b3c:	4b25      	ldr	r3, [pc, #148]	; (8005bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f023 0207 	bic.w	r2, r3, #7
 8005b44:	4923      	ldr	r1, [pc, #140]	; (8005bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b4c:	4b21      	ldr	r3, [pc, #132]	; (8005bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d001      	beq.n	8005b5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e036      	b.n	8005bcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0304 	and.w	r3, r3, #4
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d008      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b6a:	4b1b      	ldr	r3, [pc, #108]	; (8005bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	4918      	ldr	r1, [pc, #96]	; (8005bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d009      	beq.n	8005b9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b88:	4b13      	ldr	r3, [pc, #76]	; (8005bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	4910      	ldr	r1, [pc, #64]	; (8005bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b9c:	f000 f824 	bl	8005be8 <HAL_RCC_GetSysClockFreq>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	4b0d      	ldr	r3, [pc, #52]	; (8005bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	091b      	lsrs	r3, r3, #4
 8005ba8:	f003 030f 	and.w	r3, r3, #15
 8005bac:	490b      	ldr	r1, [pc, #44]	; (8005bdc <HAL_RCC_ClockConfig+0x1f4>)
 8005bae:	5ccb      	ldrb	r3, [r1, r3]
 8005bb0:	f003 031f 	and.w	r3, r3, #31
 8005bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb8:	4a09      	ldr	r2, [pc, #36]	; (8005be0 <HAL_RCC_ClockConfig+0x1f8>)
 8005bba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005bbc:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <HAL_RCC_ClockConfig+0x1fc>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fc fd85 	bl	80026d0 <HAL_InitTick>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8005bca:	7afb      	ldrb	r3, [r7, #11]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	40022000 	.word	0x40022000
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	0800a4c4 	.word	0x0800a4c4
 8005be0:	2000005c 	.word	0x2000005c
 8005be4:	20000060 	.word	0x20000060

08005be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b089      	sub	sp, #36	; 0x24
 8005bec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	61fb      	str	r3, [r7, #28]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bf6:	4b3e      	ldr	r3, [pc, #248]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f003 030c 	and.w	r3, r3, #12
 8005bfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c00:	4b3b      	ldr	r3, [pc, #236]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f003 0303 	and.w	r3, r3, #3
 8005c08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d005      	beq.n	8005c1c <HAL_RCC_GetSysClockFreq+0x34>
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	2b0c      	cmp	r3, #12
 8005c14:	d121      	bne.n	8005c5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d11e      	bne.n	8005c5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c1c:	4b34      	ldr	r3, [pc, #208]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0308 	and.w	r3, r3, #8
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d107      	bne.n	8005c38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c28:	4b31      	ldr	r3, [pc, #196]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c2e:	0a1b      	lsrs	r3, r3, #8
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	61fb      	str	r3, [r7, #28]
 8005c36:	e005      	b.n	8005c44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c38:	4b2d      	ldr	r3, [pc, #180]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	091b      	lsrs	r3, r3, #4
 8005c3e:	f003 030f 	and.w	r3, r3, #15
 8005c42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c44:	4a2b      	ldr	r2, [pc, #172]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10d      	bne.n	8005c70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c58:	e00a      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d102      	bne.n	8005c66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c60:	4b25      	ldr	r3, [pc, #148]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c62:	61bb      	str	r3, [r7, #24]
 8005c64:	e004      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d101      	bne.n	8005c70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c6c:	4b23      	ldr	r3, [pc, #140]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x114>)
 8005c6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	2b0c      	cmp	r3, #12
 8005c74:	d134      	bne.n	8005ce0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c76:	4b1e      	ldr	r3, [pc, #120]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f003 0303 	and.w	r3, r3, #3
 8005c7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d003      	beq.n	8005c8e <HAL_RCC_GetSysClockFreq+0xa6>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d003      	beq.n	8005c94 <HAL_RCC_GetSysClockFreq+0xac>
 8005c8c:	e005      	b.n	8005c9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005c8e:	4b1a      	ldr	r3, [pc, #104]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c90:	617b      	str	r3, [r7, #20]
      break;
 8005c92:	e005      	b.n	8005ca0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005c94:	4b19      	ldr	r3, [pc, #100]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x114>)
 8005c96:	617b      	str	r3, [r7, #20]
      break;
 8005c98:	e002      	b.n	8005ca0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	617b      	str	r3, [r7, #20]
      break;
 8005c9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ca0:	4b13      	ldr	r3, [pc, #76]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	091b      	lsrs	r3, r3, #4
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	3301      	adds	r3, #1
 8005cac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005cae:	4b10      	ldr	r3, [pc, #64]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	0a1b      	lsrs	r3, r3, #8
 8005cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	fb03 f202 	mul.w	r2, r3, r2
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cc6:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	0e5b      	lsrs	r3, r3, #25
 8005ccc:	f003 0303 	and.w	r3, r3, #3
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ce0:	69bb      	ldr	r3, [r7, #24]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3724      	adds	r7, #36	; 0x24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40021000 	.word	0x40021000
 8005cf4:	0800a4d4 	.word	0x0800a4d4
 8005cf8:	00f42400 	.word	0x00f42400
 8005cfc:	007a1200 	.word	0x007a1200

08005d00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d08:	2300      	movs	r3, #0
 8005d0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d0c:	4b2a      	ldr	r3, [pc, #168]	; (8005db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d18:	f7ff f9de 	bl	80050d8 <HAL_PWREx_GetVoltageRange>
 8005d1c:	6178      	str	r0, [r7, #20]
 8005d1e:	e014      	b.n	8005d4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d20:	4b25      	ldr	r3, [pc, #148]	; (8005db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d24:	4a24      	ldr	r2, [pc, #144]	; (8005db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d2a:	6593      	str	r3, [r2, #88]	; 0x58
 8005d2c:	4b22      	ldr	r3, [pc, #136]	; (8005db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d38:	f7ff f9ce 	bl	80050d8 <HAL_PWREx_GetVoltageRange>
 8005d3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d3e:	4b1e      	ldr	r3, [pc, #120]	; (8005db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d42:	4a1d      	ldr	r2, [pc, #116]	; (8005db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d50:	d10b      	bne.n	8005d6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b80      	cmp	r3, #128	; 0x80
 8005d56:	d919      	bls.n	8005d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2ba0      	cmp	r3, #160	; 0xa0
 8005d5c:	d902      	bls.n	8005d64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d5e:	2302      	movs	r3, #2
 8005d60:	613b      	str	r3, [r7, #16]
 8005d62:	e013      	b.n	8005d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d64:	2301      	movs	r3, #1
 8005d66:	613b      	str	r3, [r7, #16]
 8005d68:	e010      	b.n	8005d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b80      	cmp	r3, #128	; 0x80
 8005d6e:	d902      	bls.n	8005d76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005d70:	2303      	movs	r3, #3
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	e00a      	b.n	8005d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b80      	cmp	r3, #128	; 0x80
 8005d7a:	d102      	bne.n	8005d82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	613b      	str	r3, [r7, #16]
 8005d80:	e004      	b.n	8005d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b70      	cmp	r3, #112	; 0x70
 8005d86:	d101      	bne.n	8005d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d88:	2301      	movs	r3, #1
 8005d8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d8c:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f023 0207 	bic.w	r2, r3, #7
 8005d94:	4909      	ldr	r1, [pc, #36]	; (8005dbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005d9c:	4b07      	ldr	r3, [pc, #28]	; (8005dbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d001      	beq.n	8005dae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e000      	b.n	8005db0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	40022000 	.word	0x40022000

08005dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005dc8:	2300      	movs	r3, #0
 8005dca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005dcc:	2300      	movs	r3, #0
 8005dce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d041      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005de0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005de4:	d02a      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005de6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005dea:	d824      	bhi.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005dec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005df0:	d008      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005df2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005df6:	d81e      	bhi.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e00:	d010      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e02:	e018      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e04:	4b86      	ldr	r3, [pc, #536]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	4a85      	ldr	r2, [pc, #532]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e0e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e10:	e015      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	3304      	adds	r3, #4
 8005e16:	2100      	movs	r1, #0
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 facb 	bl	80063b4 <RCCEx_PLLSAI1_Config>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e22:	e00c      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3320      	adds	r3, #32
 8005e28:	2100      	movs	r1, #0
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fbb6 	bl	800659c <RCCEx_PLLSAI2_Config>
 8005e30:	4603      	mov	r3, r0
 8005e32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e34:	e003      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	74fb      	strb	r3, [r7, #19]
      break;
 8005e3a:	e000      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005e3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e3e:	7cfb      	ldrb	r3, [r7, #19]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10b      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e44:	4b76      	ldr	r3, [pc, #472]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e52:	4973      	ldr	r1, [pc, #460]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005e5a:	e001      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e5c:	7cfb      	ldrb	r3, [r7, #19]
 8005e5e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d041      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e74:	d02a      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005e76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e7a:	d824      	bhi.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005e7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e80:	d008      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e86:	d81e      	bhi.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e90:	d010      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e92:	e018      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e94:	4b62      	ldr	r3, [pc, #392]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	4a61      	ldr	r2, [pc, #388]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e9e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ea0:	e015      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 fa83 	bl	80063b4 <RCCEx_PLLSAI1_Config>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005eb2:	e00c      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3320      	adds	r3, #32
 8005eb8:	2100      	movs	r1, #0
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fb6e 	bl	800659c <RCCEx_PLLSAI2_Config>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ec4:	e003      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	74fb      	strb	r3, [r7, #19]
      break;
 8005eca:	e000      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ece:	7cfb      	ldrb	r3, [r7, #19]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10b      	bne.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ed4:	4b52      	ldr	r3, [pc, #328]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eda:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ee2:	494f      	ldr	r1, [pc, #316]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005eea:	e001      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eec:	7cfb      	ldrb	r3, [r7, #19]
 8005eee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 80a0 	beq.w	800603e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005efe:	2300      	movs	r3, #0
 8005f00:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f02:	4b47      	ldr	r3, [pc, #284]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e000      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005f12:	2300      	movs	r3, #0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00d      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f18:	4b41      	ldr	r3, [pc, #260]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1c:	4a40      	ldr	r2, [pc, #256]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f22:	6593      	str	r3, [r2, #88]	; 0x58
 8005f24:	4b3e      	ldr	r3, [pc, #248]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f2c:	60bb      	str	r3, [r7, #8]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f30:	2301      	movs	r3, #1
 8005f32:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f34:	4b3b      	ldr	r3, [pc, #236]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a3a      	ldr	r2, [pc, #232]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f40:	f7fc fc16 	bl	8002770 <HAL_GetTick>
 8005f44:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f46:	e009      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f48:	f7fc fc12 	bl	8002770 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d902      	bls.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	74fb      	strb	r3, [r7, #19]
        break;
 8005f5a:	e005      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f5c:	4b31      	ldr	r3, [pc, #196]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d0ef      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005f68:	7cfb      	ldrb	r3, [r7, #19]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d15c      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f6e:	4b2c      	ldr	r3, [pc, #176]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f78:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01f      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d019      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f8c:	4b24      	ldr	r3, [pc, #144]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f98:	4b21      	ldr	r3, [pc, #132]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f9e:	4a20      	ldr	r2, [pc, #128]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fa8:	4b1d      	ldr	r3, [pc, #116]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fae:	4a1c      	ldr	r2, [pc, #112]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005fb8:	4a19      	ldr	r2, [pc, #100]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d016      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fca:	f7fc fbd1 	bl	8002770 <HAL_GetTick>
 8005fce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fd0:	e00b      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fd2:	f7fc fbcd 	bl	8002770 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d902      	bls.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	74fb      	strb	r3, [r7, #19]
            break;
 8005fe8:	e006      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fea:	4b0d      	ldr	r3, [pc, #52]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0ec      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005ff8:	7cfb      	ldrb	r3, [r7, #19]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10c      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ffe:	4b08      	ldr	r3, [pc, #32]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006004:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800600e:	4904      	ldr	r1, [pc, #16]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006010:	4313      	orrs	r3, r2
 8006012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006016:	e009      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006018:	7cfb      	ldrb	r3, [r7, #19]
 800601a:	74bb      	strb	r3, [r7, #18]
 800601c:	e006      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800601e:	bf00      	nop
 8006020:	40021000 	.word	0x40021000
 8006024:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006028:	7cfb      	ldrb	r3, [r7, #19]
 800602a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800602c:	7c7b      	ldrb	r3, [r7, #17]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d105      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006032:	4b9e      	ldr	r3, [pc, #632]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006036:	4a9d      	ldr	r2, [pc, #628]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800603c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800604a:	4b98      	ldr	r3, [pc, #608]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800604c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006050:	f023 0203 	bic.w	r2, r3, #3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	4994      	ldr	r1, [pc, #592]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800605a:	4313      	orrs	r3, r2
 800605c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800606c:	4b8f      	ldr	r3, [pc, #572]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800606e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006072:	f023 020c 	bic.w	r2, r3, #12
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607a:	498c      	ldr	r1, [pc, #560]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800607c:	4313      	orrs	r3, r2
 800607e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0304 	and.w	r3, r3, #4
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800608e:	4b87      	ldr	r3, [pc, #540]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006094:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609c:	4983      	ldr	r1, [pc, #524]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80060b0:	4b7e      	ldr	r3, [pc, #504]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060be:	497b      	ldr	r1, [pc, #492]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0310 	and.w	r3, r3, #16
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80060d2:	4b76      	ldr	r3, [pc, #472]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060e0:	4972      	ldr	r1, [pc, #456]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0320 	and.w	r3, r3, #32
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060f4:	4b6d      	ldr	r3, [pc, #436]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006102:	496a      	ldr	r1, [pc, #424]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006104:	4313      	orrs	r3, r2
 8006106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006116:	4b65      	ldr	r3, [pc, #404]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006124:	4961      	ldr	r1, [pc, #388]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006126:	4313      	orrs	r3, r2
 8006128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00a      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006138:	4b5c      	ldr	r3, [pc, #368]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006146:	4959      	ldr	r1, [pc, #356]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006148:	4313      	orrs	r3, r2
 800614a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800615a:	4b54      	ldr	r3, [pc, #336]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800615c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006160:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006168:	4950      	ldr	r1, [pc, #320]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800616a:	4313      	orrs	r3, r2
 800616c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00a      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800617c:	4b4b      	ldr	r3, [pc, #300]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800617e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006182:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618a:	4948      	ldr	r1, [pc, #288]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800618c:	4313      	orrs	r3, r2
 800618e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800619e:	4b43      	ldr	r3, [pc, #268]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ac:	493f      	ldr	r1, [pc, #252]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d028      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061c0:	4b3a      	ldr	r3, [pc, #232]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061ce:	4937      	ldr	r1, [pc, #220]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061de:	d106      	bne.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061e0:	4b32      	ldr	r3, [pc, #200]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	4a31      	ldr	r2, [pc, #196]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061ea:	60d3      	str	r3, [r2, #12]
 80061ec:	e011      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061f6:	d10c      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3304      	adds	r3, #4
 80061fc:	2101      	movs	r1, #1
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 f8d8 	bl	80063b4 <RCCEx_PLLSAI1_Config>
 8006204:	4603      	mov	r3, r0
 8006206:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006208:	7cfb      	ldrb	r3, [r7, #19]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800620e:	7cfb      	ldrb	r3, [r7, #19]
 8006210:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d028      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800621e:	4b23      	ldr	r3, [pc, #140]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006224:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622c:	491f      	ldr	r1, [pc, #124]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800622e:	4313      	orrs	r3, r2
 8006230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006238:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800623c:	d106      	bne.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800623e:	4b1b      	ldr	r3, [pc, #108]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	4a1a      	ldr	r2, [pc, #104]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006248:	60d3      	str	r3, [r2, #12]
 800624a:	e011      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006250:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006254:	d10c      	bne.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	3304      	adds	r3, #4
 800625a:	2101      	movs	r1, #1
 800625c:	4618      	mov	r0, r3
 800625e:	f000 f8a9 	bl	80063b4 <RCCEx_PLLSAI1_Config>
 8006262:	4603      	mov	r3, r0
 8006264:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006266:	7cfb      	ldrb	r3, [r7, #19]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800626c:	7cfb      	ldrb	r3, [r7, #19]
 800626e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d02b      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800627c:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800627e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006282:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800628a:	4908      	ldr	r1, [pc, #32]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800628c:	4313      	orrs	r3, r2
 800628e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006296:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800629a:	d109      	bne.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800629c:	4b03      	ldr	r3, [pc, #12]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	4a02      	ldr	r2, [pc, #8]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062a6:	60d3      	str	r3, [r2, #12]
 80062a8:	e014      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80062aa:	bf00      	nop
 80062ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062b8:	d10c      	bne.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	3304      	adds	r3, #4
 80062be:	2101      	movs	r1, #1
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 f877 	bl	80063b4 <RCCEx_PLLSAI1_Config>
 80062c6:	4603      	mov	r3, r0
 80062c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062ca:	7cfb      	ldrb	r3, [r7, #19]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80062d0:	7cfb      	ldrb	r3, [r7, #19]
 80062d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d02f      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062e0:	4b2b      	ldr	r3, [pc, #172]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062ee:	4928      	ldr	r1, [pc, #160]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062fe:	d10d      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3304      	adds	r3, #4
 8006304:	2102      	movs	r1, #2
 8006306:	4618      	mov	r0, r3
 8006308:	f000 f854 	bl	80063b4 <RCCEx_PLLSAI1_Config>
 800630c:	4603      	mov	r3, r0
 800630e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006310:	7cfb      	ldrb	r3, [r7, #19]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d014      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006316:	7cfb      	ldrb	r3, [r7, #19]
 8006318:	74bb      	strb	r3, [r7, #18]
 800631a:	e011      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006324:	d10c      	bne.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	3320      	adds	r3, #32
 800632a:	2102      	movs	r1, #2
 800632c:	4618      	mov	r0, r3
 800632e:	f000 f935 	bl	800659c <RCCEx_PLLSAI2_Config>
 8006332:	4603      	mov	r3, r0
 8006334:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006336:	7cfb      	ldrb	r3, [r7, #19]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800633c:	7cfb      	ldrb	r3, [r7, #19]
 800633e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00a      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800634c:	4b10      	ldr	r3, [pc, #64]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800634e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006352:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800635a:	490d      	ldr	r1, [pc, #52]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800635c:	4313      	orrs	r3, r2
 800635e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00b      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800636e:	4b08      	ldr	r3, [pc, #32]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006374:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800637e:	4904      	ldr	r1, [pc, #16]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006380:	4313      	orrs	r3, r2
 8006382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006386:	7cbb      	ldrb	r3, [r7, #18]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	40021000 	.word	0x40021000

08006394 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006398:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a04      	ldr	r2, [pc, #16]	; (80063b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800639e:	f043 0304 	orr.w	r3, r3, #4
 80063a2:	6013      	str	r3, [r2, #0]
}
 80063a4:	bf00      	nop
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	40021000 	.word	0x40021000

080063b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063c2:	4b75      	ldr	r3, [pc, #468]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d018      	beq.n	8006400 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80063ce:	4b72      	ldr	r3, [pc, #456]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f003 0203 	and.w	r2, r3, #3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d10d      	bne.n	80063fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
       ||
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d009      	beq.n	80063fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80063e6:	4b6c      	ldr	r3, [pc, #432]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	091b      	lsrs	r3, r3, #4
 80063ec:	f003 0307 	and.w	r3, r3, #7
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
       ||
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d047      	beq.n	800648a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	73fb      	strb	r3, [r7, #15]
 80063fe:	e044      	b.n	800648a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b03      	cmp	r3, #3
 8006406:	d018      	beq.n	800643a <RCCEx_PLLSAI1_Config+0x86>
 8006408:	2b03      	cmp	r3, #3
 800640a:	d825      	bhi.n	8006458 <RCCEx_PLLSAI1_Config+0xa4>
 800640c:	2b01      	cmp	r3, #1
 800640e:	d002      	beq.n	8006416 <RCCEx_PLLSAI1_Config+0x62>
 8006410:	2b02      	cmp	r3, #2
 8006412:	d009      	beq.n	8006428 <RCCEx_PLLSAI1_Config+0x74>
 8006414:	e020      	b.n	8006458 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006416:	4b60      	ldr	r3, [pc, #384]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d11d      	bne.n	800645e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006426:	e01a      	b.n	800645e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006428:	4b5b      	ldr	r3, [pc, #364]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006430:	2b00      	cmp	r3, #0
 8006432:	d116      	bne.n	8006462 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006438:	e013      	b.n	8006462 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800643a:	4b57      	ldr	r3, [pc, #348]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10f      	bne.n	8006466 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006446:	4b54      	ldr	r3, [pc, #336]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d109      	bne.n	8006466 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006456:	e006      	b.n	8006466 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	73fb      	strb	r3, [r7, #15]
      break;
 800645c:	e004      	b.n	8006468 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800645e:	bf00      	nop
 8006460:	e002      	b.n	8006468 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006462:	bf00      	nop
 8006464:	e000      	b.n	8006468 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006466:	bf00      	nop
    }

    if(status == HAL_OK)
 8006468:	7bfb      	ldrb	r3, [r7, #15]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10d      	bne.n	800648a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800646e:	4b4a      	ldr	r3, [pc, #296]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6819      	ldr	r1, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	3b01      	subs	r3, #1
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	430b      	orrs	r3, r1
 8006484:	4944      	ldr	r1, [pc, #272]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006486:	4313      	orrs	r3, r2
 8006488:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800648a:	7bfb      	ldrb	r3, [r7, #15]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d17d      	bne.n	800658c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006490:	4b41      	ldr	r3, [pc, #260]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a40      	ldr	r2, [pc, #256]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006496:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800649a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800649c:	f7fc f968 	bl	8002770 <HAL_GetTick>
 80064a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064a2:	e009      	b.n	80064b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064a4:	f7fc f964 	bl	8002770 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d902      	bls.n	80064b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	73fb      	strb	r3, [r7, #15]
        break;
 80064b6:	e005      	b.n	80064c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064b8:	4b37      	ldr	r3, [pc, #220]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1ef      	bne.n	80064a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d160      	bne.n	800658c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d111      	bne.n	80064f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064d0:	4b31      	ldr	r3, [pc, #196]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80064d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6892      	ldr	r2, [r2, #8]
 80064e0:	0211      	lsls	r1, r2, #8
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	68d2      	ldr	r2, [r2, #12]
 80064e6:	0912      	lsrs	r2, r2, #4
 80064e8:	0452      	lsls	r2, r2, #17
 80064ea:	430a      	orrs	r2, r1
 80064ec:	492a      	ldr	r1, [pc, #168]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	610b      	str	r3, [r1, #16]
 80064f2:	e027      	b.n	8006544 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d112      	bne.n	8006520 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064fa:	4b27      	ldr	r3, [pc, #156]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006502:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	6892      	ldr	r2, [r2, #8]
 800650a:	0211      	lsls	r1, r2, #8
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	6912      	ldr	r2, [r2, #16]
 8006510:	0852      	lsrs	r2, r2, #1
 8006512:	3a01      	subs	r2, #1
 8006514:	0552      	lsls	r2, r2, #21
 8006516:	430a      	orrs	r2, r1
 8006518:	491f      	ldr	r1, [pc, #124]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 800651a:	4313      	orrs	r3, r2
 800651c:	610b      	str	r3, [r1, #16]
 800651e:	e011      	b.n	8006544 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006520:	4b1d      	ldr	r3, [pc, #116]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006528:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	6892      	ldr	r2, [r2, #8]
 8006530:	0211      	lsls	r1, r2, #8
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6952      	ldr	r2, [r2, #20]
 8006536:	0852      	lsrs	r2, r2, #1
 8006538:	3a01      	subs	r2, #1
 800653a:	0652      	lsls	r2, r2, #25
 800653c:	430a      	orrs	r2, r1
 800653e:	4916      	ldr	r1, [pc, #88]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006540:	4313      	orrs	r3, r2
 8006542:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006544:	4b14      	ldr	r3, [pc, #80]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a13      	ldr	r2, [pc, #76]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 800654a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800654e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006550:	f7fc f90e 	bl	8002770 <HAL_GetTick>
 8006554:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006556:	e009      	b.n	800656c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006558:	f7fc f90a 	bl	8002770 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b02      	cmp	r3, #2
 8006564:	d902      	bls.n	800656c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	73fb      	strb	r3, [r7, #15]
          break;
 800656a:	e005      	b.n	8006578 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800656c:	4b0a      	ldr	r3, [pc, #40]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0ef      	beq.n	8006558 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d106      	bne.n	800658c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800657e:	4b06      	ldr	r3, [pc, #24]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006580:	691a      	ldr	r2, [r3, #16]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	4904      	ldr	r1, [pc, #16]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006588:	4313      	orrs	r3, r2
 800658a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800658c:	7bfb      	ldrb	r3, [r7, #15]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	40021000 	.word	0x40021000

0800659c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065aa:	4b6a      	ldr	r3, [pc, #424]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	f003 0303 	and.w	r3, r3, #3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d018      	beq.n	80065e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80065b6:	4b67      	ldr	r3, [pc, #412]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f003 0203 	and.w	r2, r3, #3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d10d      	bne.n	80065e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
       ||
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d009      	beq.n	80065e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80065ce:	4b61      	ldr	r3, [pc, #388]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	091b      	lsrs	r3, r3, #4
 80065d4:	f003 0307 	and.w	r3, r3, #7
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
       ||
 80065de:	429a      	cmp	r2, r3
 80065e0:	d047      	beq.n	8006672 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	73fb      	strb	r3, [r7, #15]
 80065e6:	e044      	b.n	8006672 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b03      	cmp	r3, #3
 80065ee:	d018      	beq.n	8006622 <RCCEx_PLLSAI2_Config+0x86>
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d825      	bhi.n	8006640 <RCCEx_PLLSAI2_Config+0xa4>
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d002      	beq.n	80065fe <RCCEx_PLLSAI2_Config+0x62>
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d009      	beq.n	8006610 <RCCEx_PLLSAI2_Config+0x74>
 80065fc:	e020      	b.n	8006640 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065fe:	4b55      	ldr	r3, [pc, #340]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d11d      	bne.n	8006646 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800660e:	e01a      	b.n	8006646 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006610:	4b50      	ldr	r3, [pc, #320]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006618:	2b00      	cmp	r3, #0
 800661a:	d116      	bne.n	800664a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006620:	e013      	b.n	800664a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006622:	4b4c      	ldr	r3, [pc, #304]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10f      	bne.n	800664e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800662e:	4b49      	ldr	r3, [pc, #292]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d109      	bne.n	800664e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800663e:	e006      	b.n	800664e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	73fb      	strb	r3, [r7, #15]
      break;
 8006644:	e004      	b.n	8006650 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006646:	bf00      	nop
 8006648:	e002      	b.n	8006650 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800664a:	bf00      	nop
 800664c:	e000      	b.n	8006650 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800664e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10d      	bne.n	8006672 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006656:	4b3f      	ldr	r3, [pc, #252]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6819      	ldr	r1, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	3b01      	subs	r3, #1
 8006668:	011b      	lsls	r3, r3, #4
 800666a:	430b      	orrs	r3, r1
 800666c:	4939      	ldr	r1, [pc, #228]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 800666e:	4313      	orrs	r3, r2
 8006670:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d167      	bne.n	8006748 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006678:	4b36      	ldr	r3, [pc, #216]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a35      	ldr	r2, [pc, #212]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 800667e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006684:	f7fc f874 	bl	8002770 <HAL_GetTick>
 8006688:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800668a:	e009      	b.n	80066a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800668c:	f7fc f870 	bl	8002770 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b02      	cmp	r3, #2
 8006698:	d902      	bls.n	80066a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	73fb      	strb	r3, [r7, #15]
        break;
 800669e:	e005      	b.n	80066ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066a0:	4b2c      	ldr	r3, [pc, #176]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1ef      	bne.n	800668c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d14a      	bne.n	8006748 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d111      	bne.n	80066dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066b8:	4b26      	ldr	r3, [pc, #152]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80066c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	6892      	ldr	r2, [r2, #8]
 80066c8:	0211      	lsls	r1, r2, #8
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	68d2      	ldr	r2, [r2, #12]
 80066ce:	0912      	lsrs	r2, r2, #4
 80066d0:	0452      	lsls	r2, r2, #17
 80066d2:	430a      	orrs	r2, r1
 80066d4:	491f      	ldr	r1, [pc, #124]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	614b      	str	r3, [r1, #20]
 80066da:	e011      	b.n	8006700 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066dc:	4b1d      	ldr	r3, [pc, #116]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80066e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6892      	ldr	r2, [r2, #8]
 80066ec:	0211      	lsls	r1, r2, #8
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	6912      	ldr	r2, [r2, #16]
 80066f2:	0852      	lsrs	r2, r2, #1
 80066f4:	3a01      	subs	r2, #1
 80066f6:	0652      	lsls	r2, r2, #25
 80066f8:	430a      	orrs	r2, r1
 80066fa:	4916      	ldr	r1, [pc, #88]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006700:	4b14      	ldr	r3, [pc, #80]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a13      	ldr	r2, [pc, #76]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800670a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800670c:	f7fc f830 	bl	8002770 <HAL_GetTick>
 8006710:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006712:	e009      	b.n	8006728 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006714:	f7fc f82c 	bl	8002770 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b02      	cmp	r3, #2
 8006720:	d902      	bls.n	8006728 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	73fb      	strb	r3, [r7, #15]
          break;
 8006726:	e005      	b.n	8006734 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006728:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0ef      	beq.n	8006714 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d106      	bne.n	8006748 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800673a:	4b06      	ldr	r3, [pc, #24]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 800673c:	695a      	ldr	r2, [r3, #20]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	4904      	ldr	r1, [pc, #16]	; (8006754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006744:	4313      	orrs	r3, r2
 8006746:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006748:	7bfb      	ldrb	r3, [r7, #15]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	40021000 	.word	0x40021000

08006758 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d06c      	beq.n	8006844 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d106      	bne.n	8006784 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7fb fd1c 	bl	80021bc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2202      	movs	r2, #2
 8006788:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	22ca      	movs	r2, #202	; 0xca
 8006792:	625a      	str	r2, [r3, #36]	; 0x24
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2253      	movs	r2, #83	; 0x53
 800679a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fa49 	bl	8006c34 <RTC_EnterInitMode>
 80067a2:	4603      	mov	r3, r0
 80067a4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d14b      	bne.n	8006844 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	6812      	ldr	r2, [r2, #0]
 80067b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80067ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067be:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6899      	ldr	r1, [r3, #8]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	431a      	orrs	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	431a      	orrs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	68d2      	ldr	r2, [r2, #12]
 80067e6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6919      	ldr	r1, [r3, #16]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	041a      	lsls	r2, r3, #16
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fa4d 	bl	8006c9c <RTC_ExitInitMode>
 8006802:	4603      	mov	r3, r0
 8006804:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006806:	7bfb      	ldrb	r3, [r7, #15]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d11b      	bne.n	8006844 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0203 	bic.w	r2, r2, #3
 800681a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69da      	ldr	r2, [r3, #28]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	431a      	orrs	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	22ff      	movs	r2, #255	; 0xff
 800683a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8006844:	7bfb      	ldrb	r3, [r7, #15]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800684e:	b590      	push	{r4, r7, lr}
 8006850:	b087      	sub	sp, #28
 8006852:	af00      	add	r7, sp, #0
 8006854:	60f8      	str	r0, [r7, #12]
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d101      	bne.n	8006868 <HAL_RTC_SetTime+0x1a>
 8006864:	2302      	movs	r3, #2
 8006866:	e08b      	b.n	8006980 <HAL_RTC_SetTime+0x132>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	22ca      	movs	r2, #202	; 0xca
 800687e:	625a      	str	r2, [r3, #36]	; 0x24
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2253      	movs	r2, #83	; 0x53
 8006886:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 f9d3 	bl	8006c34 <RTC_EnterInitMode>
 800688e:	4603      	mov	r3, r0
 8006890:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006892:	7cfb      	ldrb	r3, [r7, #19]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d163      	bne.n	8006960 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d126      	bne.n	80068ec <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d102      	bne.n	80068b2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	2200      	movs	r2, #0
 80068b0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fa2e 	bl	8006d18 <RTC_ByteToBcd2>
 80068bc:	4603      	mov	r3, r0
 80068be:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	785b      	ldrb	r3, [r3, #1]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 fa27 	bl	8006d18 <RTC_ByteToBcd2>
 80068ca:	4603      	mov	r3, r0
 80068cc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80068ce:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	789b      	ldrb	r3, [r3, #2]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 fa1f 	bl	8006d18 <RTC_ByteToBcd2>
 80068da:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80068dc:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	78db      	ldrb	r3, [r3, #3]
 80068e4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80068e6:	4313      	orrs	r3, r2
 80068e8:	617b      	str	r3, [r7, #20]
 80068ea:	e018      	b.n	800691e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d102      	bne.n	8006900 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2200      	movs	r2, #0
 80068fe:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	785b      	ldrb	r3, [r3, #1]
 800690a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800690c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006912:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	78db      	ldrb	r3, [r3, #3]
 8006918:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800691a:	4313      	orrs	r3, r2
 800691c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006928:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800692c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800693c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6899      	ldr	r1, [r3, #8]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	431a      	orrs	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 f9a0 	bl	8006c9c <RTC_ExitInitMode>
 800695c:	4603      	mov	r3, r0
 800695e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	22ff      	movs	r2, #255	; 0xff
 8006966:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006968:	7cfb      	ldrb	r3, [r7, #19]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d103      	bne.n	8006976 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800697e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006980:	4618      	mov	r0, r3
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	bd90      	pop	{r4, r7, pc}

08006988 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80069b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80069ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	0c1b      	lsrs	r3, r3, #16
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	0a1b      	lsrs	r3, r3, #8
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	0d9b      	lsrs	r3, r3, #22
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d11a      	bne.n	8006a36 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 f9a7 	bl	8006d58 <RTC_Bcd2ToByte>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	785b      	ldrb	r3, [r3, #1]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 f99e 	bl	8006d58 <RTC_Bcd2ToByte>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	461a      	mov	r2, r3
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	789b      	ldrb	r3, [r3, #2]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f000 f995 	bl	8006d58 <RTC_Bcd2ToByte>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	461a      	mov	r2, r3
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3718      	adds	r7, #24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006a40:	b590      	push	{r4, r7, lr}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d101      	bne.n	8006a5a <HAL_RTC_SetDate+0x1a>
 8006a56:	2302      	movs	r3, #2
 8006a58:	e075      	b.n	8006b46 <HAL_RTC_SetDate+0x106>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2202      	movs	r2, #2
 8006a66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10e      	bne.n	8006a8e <HAL_RTC_SetDate+0x4e>
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	785b      	ldrb	r3, [r3, #1]
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d008      	beq.n	8006a8e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	785b      	ldrb	r3, [r3, #1]
 8006a80:	f023 0310 	bic.w	r3, r3, #16
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	330a      	adds	r3, #10
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d11c      	bne.n	8006ace <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	78db      	ldrb	r3, [r3, #3]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 f93d 	bl	8006d18 <RTC_ByteToBcd2>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	785b      	ldrb	r3, [r3, #1]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 f936 	bl	8006d18 <RTC_ByteToBcd2>
 8006aac:	4603      	mov	r3, r0
 8006aae:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006ab0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	789b      	ldrb	r3, [r3, #2]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 f92e 	bl	8006d18 <RTC_ByteToBcd2>
 8006abc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006abe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	e00e      	b.n	8006aec <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	78db      	ldrb	r3, [r3, #3]
 8006ad2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	785b      	ldrb	r3, [r3, #1]
 8006ad8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006ada:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006ae0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	22ca      	movs	r2, #202	; 0xca
 8006af2:	625a      	str	r2, [r3, #36]	; 0x24
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2253      	movs	r2, #83	; 0x53
 8006afa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 f899 	bl	8006c34 <RTC_EnterInitMode>
 8006b02:	4603      	mov	r3, r0
 8006b04:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006b06:	7cfb      	ldrb	r3, [r7, #19]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10c      	bne.n	8006b26 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b16:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006b1a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 f8bd 	bl	8006c9c <RTC_ExitInitMode>
 8006b22:	4603      	mov	r3, r0
 8006b24:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	22ff      	movs	r2, #255	; 0xff
 8006b2c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006b2e:	7cfb      	ldrb	r3, [r7, #19]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d103      	bne.n	8006b3c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006b44:	7cfb      	ldrb	r3, [r7, #19]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd90      	pop	{r4, r7, pc}

08006b4e <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b086      	sub	sp, #24
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	60b9      	str	r1, [r7, #8]
 8006b58:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b64:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006b68:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	0c1b      	lsrs	r3, r3, #16
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	0a1b      	lsrs	r3, r3, #8
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	0b5b      	lsrs	r3, r3, #13
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d11a      	bne.n	8006bde <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	78db      	ldrb	r3, [r3, #3]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 f8d3 	bl	8006d58 <RTC_Bcd2ToByte>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	785b      	ldrb	r3, [r3, #1]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 f8ca 	bl	8006d58 <RTC_Bcd2ToByte>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	789b      	ldrb	r3, [r3, #2]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 f8c1 	bl	8006d58 <RTC_Bcd2ToByte>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	461a      	mov	r2, r3
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006bfe:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006c00:	f7fb fdb6 	bl	8002770 <HAL_GetTick>
 8006c04:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006c06:	e009      	b.n	8006c1c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c08:	f7fb fdb2 	bl	8002770 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c16:	d901      	bls.n	8006c1c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e007      	b.n	8006c2c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f003 0320 	and.w	r3, r3, #32
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0ee      	beq.n	8006c08 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d120      	bne.n	8006c90 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f04f 32ff 	mov.w	r2, #4294967295
 8006c56:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006c58:	f7fb fd8a 	bl	8002770 <HAL_GetTick>
 8006c5c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006c5e:	e00d      	b.n	8006c7c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006c60:	f7fb fd86 	bl	8002770 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c6e:	d905      	bls.n	8006c7c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2203      	movs	r2, #3
 8006c78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d102      	bne.n	8006c90 <RTC_EnterInitMode+0x5c>
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	d1e7      	bne.n	8006c60 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
	...

08006c9c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006ca8:	4b1a      	ldr	r3, [pc, #104]	; (8006d14 <RTC_ExitInitMode+0x78>)
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	4a19      	ldr	r2, [pc, #100]	; (8006d14 <RTC_ExitInitMode+0x78>)
 8006cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cb2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006cb4:	4b17      	ldr	r3, [pc, #92]	; (8006d14 <RTC_ExitInitMode+0x78>)
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f003 0320 	and.w	r3, r3, #32
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d10c      	bne.n	8006cda <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7ff ff91 	bl	8006be8 <HAL_RTC_WaitForSynchro>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d01e      	beq.n	8006d0a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2203      	movs	r2, #3
 8006cd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	73fb      	strb	r3, [r7, #15]
 8006cd8:	e017      	b.n	8006d0a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006cda:	4b0e      	ldr	r3, [pc, #56]	; (8006d14 <RTC_ExitInitMode+0x78>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	4a0d      	ldr	r2, [pc, #52]	; (8006d14 <RTC_ExitInitMode+0x78>)
 8006ce0:	f023 0320 	bic.w	r3, r3, #32
 8006ce4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7ff ff7e 	bl	8006be8 <HAL_RTC_WaitForSynchro>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d005      	beq.n	8006cfe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2203      	movs	r2, #3
 8006cf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006cfe:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <RTC_ExitInitMode+0x78>)
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	4a04      	ldr	r2, [pc, #16]	; (8006d14 <RTC_ExitInitMode+0x78>)
 8006d04:	f043 0320 	orr.w	r3, r3, #32
 8006d08:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	40002800 	.word	0x40002800

08006d18 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006d26:	79fb      	ldrb	r3, [r7, #7]
 8006d28:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006d2a:	e005      	b.n	8006d38 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006d32:	7afb      	ldrb	r3, [r7, #11]
 8006d34:	3b0a      	subs	r3, #10
 8006d36:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006d38:	7afb      	ldrb	r3, [r7, #11]
 8006d3a:	2b09      	cmp	r3, #9
 8006d3c:	d8f6      	bhi.n	8006d2c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	011b      	lsls	r3, r3, #4
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	7afb      	ldrb	r3, [r7, #11]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	b2db      	uxtb	r3, r3
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	091b      	lsrs	r3, r3, #4
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	461a      	mov	r2, r3
 8006d6a:	0092      	lsls	r2, r2, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006d72:	79fb      	ldrb	r3, [r7, #7]
 8006d74:	f003 030f 	and.w	r3, r3, #15
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	7bfb      	ldrb	r3, [r7, #15]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	b2db      	uxtb	r3, r3
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3714      	adds	r7, #20
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e049      	b.n	8006e32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d106      	bne.n	8006db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7fb fc00 	bl	80025b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	4619      	mov	r1, r3
 8006dca:	4610      	mov	r0, r2
 8006dcc:	f000 fa1c 	bl	8007208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
	...

08006e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d001      	beq.n	8006e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e04f      	b.n	8006ef4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68da      	ldr	r2, [r3, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0201 	orr.w	r2, r2, #1
 8006e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a23      	ldr	r2, [pc, #140]	; (8006f00 <HAL_TIM_Base_Start_IT+0xc4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d01d      	beq.n	8006eb2 <HAL_TIM_Base_Start_IT+0x76>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e7e:	d018      	beq.n	8006eb2 <HAL_TIM_Base_Start_IT+0x76>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a1f      	ldr	r2, [pc, #124]	; (8006f04 <HAL_TIM_Base_Start_IT+0xc8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d013      	beq.n	8006eb2 <HAL_TIM_Base_Start_IT+0x76>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a1e      	ldr	r2, [pc, #120]	; (8006f08 <HAL_TIM_Base_Start_IT+0xcc>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d00e      	beq.n	8006eb2 <HAL_TIM_Base_Start_IT+0x76>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a1c      	ldr	r2, [pc, #112]	; (8006f0c <HAL_TIM_Base_Start_IT+0xd0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d009      	beq.n	8006eb2 <HAL_TIM_Base_Start_IT+0x76>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a1b      	ldr	r2, [pc, #108]	; (8006f10 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d004      	beq.n	8006eb2 <HAL_TIM_Base_Start_IT+0x76>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a19      	ldr	r2, [pc, #100]	; (8006f14 <HAL_TIM_Base_Start_IT+0xd8>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d115      	bne.n	8006ede <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	4b17      	ldr	r3, [pc, #92]	; (8006f18 <HAL_TIM_Base_Start_IT+0xdc>)
 8006eba:	4013      	ands	r3, r2
 8006ebc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b06      	cmp	r3, #6
 8006ec2:	d015      	beq.n	8006ef0 <HAL_TIM_Base_Start_IT+0xb4>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eca:	d011      	beq.n	8006ef0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f042 0201 	orr.w	r2, r2, #1
 8006eda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006edc:	e008      	b.n	8006ef0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f042 0201 	orr.w	r2, r2, #1
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	e000      	b.n	8006ef2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ef0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	40012c00 	.word	0x40012c00
 8006f04:	40000400 	.word	0x40000400
 8006f08:	40000800 	.word	0x40000800
 8006f0c:	40000c00 	.word	0x40000c00
 8006f10:	40013400 	.word	0x40013400
 8006f14:	40014000 	.word	0x40014000
 8006f18:	00010007 	.word	0x00010007

08006f1c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0201 	bic.w	r2, r2, #1
 8006f32:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6a1a      	ldr	r2, [r3, #32]
 8006f3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f3e:	4013      	ands	r3, r2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10f      	bne.n	8006f64 <HAL_TIM_Base_Stop_IT+0x48>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6a1a      	ldr	r2, [r3, #32]
 8006f4a:	f240 4344 	movw	r3, #1092	; 0x444
 8006f4e:	4013      	ands	r3, r2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d107      	bne.n	8006f64 <HAL_TIM_Base_Stop_IT+0x48>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0201 	bic.w	r2, r2, #1
 8006f62:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d122      	bne.n	8006fd6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d11b      	bne.n	8006fd6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f06f 0202 	mvn.w	r2, #2
 8006fa6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	f003 0303 	and.w	r3, r3, #3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f905 	bl	80071cc <HAL_TIM_IC_CaptureCallback>
 8006fc2:	e005      	b.n	8006fd0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f8f7 	bl	80071b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f908 	bl	80071e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b04      	cmp	r3, #4
 8006fe2:	d122      	bne.n	800702a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	f003 0304 	and.w	r3, r3, #4
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	d11b      	bne.n	800702a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f06f 0204 	mvn.w	r2, #4
 8006ffa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f8db 	bl	80071cc <HAL_TIM_IC_CaptureCallback>
 8007016:	e005      	b.n	8007024 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f8cd 	bl	80071b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f8de 	bl	80071e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	f003 0308 	and.w	r3, r3, #8
 8007034:	2b08      	cmp	r3, #8
 8007036:	d122      	bne.n	800707e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f003 0308 	and.w	r3, r3, #8
 8007042:	2b08      	cmp	r3, #8
 8007044:	d11b      	bne.n	800707e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f06f 0208 	mvn.w	r2, #8
 800704e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2204      	movs	r2, #4
 8007054:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	f003 0303 	and.w	r3, r3, #3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d003      	beq.n	800706c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f8b1 	bl	80071cc <HAL_TIM_IC_CaptureCallback>
 800706a:	e005      	b.n	8007078 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f8a3 	bl	80071b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f8b4 	bl	80071e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	f003 0310 	and.w	r3, r3, #16
 8007088:	2b10      	cmp	r3, #16
 800708a:	d122      	bne.n	80070d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	f003 0310 	and.w	r3, r3, #16
 8007096:	2b10      	cmp	r3, #16
 8007098:	d11b      	bne.n	80070d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f06f 0210 	mvn.w	r2, #16
 80070a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2208      	movs	r2, #8
 80070a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d003      	beq.n	80070c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f887 	bl	80071cc <HAL_TIM_IC_CaptureCallback>
 80070be:	e005      	b.n	80070cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f879 	bl	80071b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f88a 	bl	80071e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d10e      	bne.n	80070fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d107      	bne.n	80070fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f06f 0201 	mvn.w	r2, #1
 80070f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7fa f9b3 	bl	8001464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007108:	2b80      	cmp	r3, #128	; 0x80
 800710a:	d10e      	bne.n	800712a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007116:	2b80      	cmp	r3, #128	; 0x80
 8007118:	d107      	bne.n	800712a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f99b 	bl	8007460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007138:	d10e      	bne.n	8007158 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007144:	2b80      	cmp	r3, #128	; 0x80
 8007146:	d107      	bne.n	8007158 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f98e 	bl	8007474 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007162:	2b40      	cmp	r3, #64	; 0x40
 8007164:	d10e      	bne.n	8007184 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007170:	2b40      	cmp	r3, #64	; 0x40
 8007172:	d107      	bne.n	8007184 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800717c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f838 	bl	80071f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b20      	cmp	r3, #32
 8007190:	d10e      	bne.n	80071b0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f003 0320 	and.w	r3, r3, #32
 800719c:	2b20      	cmp	r3, #32
 800719e:	d107      	bne.n	80071b0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f06f 0220 	mvn.w	r2, #32
 80071a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f94e 	bl	800744c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071b0:	bf00      	nop
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a40      	ldr	r2, [pc, #256]	; (800731c <TIM_Base_SetConfig+0x114>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d013      	beq.n	8007248 <TIM_Base_SetConfig+0x40>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007226:	d00f      	beq.n	8007248 <TIM_Base_SetConfig+0x40>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a3d      	ldr	r2, [pc, #244]	; (8007320 <TIM_Base_SetConfig+0x118>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d00b      	beq.n	8007248 <TIM_Base_SetConfig+0x40>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a3c      	ldr	r2, [pc, #240]	; (8007324 <TIM_Base_SetConfig+0x11c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d007      	beq.n	8007248 <TIM_Base_SetConfig+0x40>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a3b      	ldr	r2, [pc, #236]	; (8007328 <TIM_Base_SetConfig+0x120>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d003      	beq.n	8007248 <TIM_Base_SetConfig+0x40>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a3a      	ldr	r2, [pc, #232]	; (800732c <TIM_Base_SetConfig+0x124>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d108      	bne.n	800725a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a2f      	ldr	r2, [pc, #188]	; (800731c <TIM_Base_SetConfig+0x114>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d01f      	beq.n	80072a2 <TIM_Base_SetConfig+0x9a>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007268:	d01b      	beq.n	80072a2 <TIM_Base_SetConfig+0x9a>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a2c      	ldr	r2, [pc, #176]	; (8007320 <TIM_Base_SetConfig+0x118>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d017      	beq.n	80072a2 <TIM_Base_SetConfig+0x9a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a2b      	ldr	r2, [pc, #172]	; (8007324 <TIM_Base_SetConfig+0x11c>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d013      	beq.n	80072a2 <TIM_Base_SetConfig+0x9a>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a2a      	ldr	r2, [pc, #168]	; (8007328 <TIM_Base_SetConfig+0x120>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d00f      	beq.n	80072a2 <TIM_Base_SetConfig+0x9a>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a29      	ldr	r2, [pc, #164]	; (800732c <TIM_Base_SetConfig+0x124>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d00b      	beq.n	80072a2 <TIM_Base_SetConfig+0x9a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a28      	ldr	r2, [pc, #160]	; (8007330 <TIM_Base_SetConfig+0x128>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d007      	beq.n	80072a2 <TIM_Base_SetConfig+0x9a>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a27      	ldr	r2, [pc, #156]	; (8007334 <TIM_Base_SetConfig+0x12c>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d003      	beq.n	80072a2 <TIM_Base_SetConfig+0x9a>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a26      	ldr	r2, [pc, #152]	; (8007338 <TIM_Base_SetConfig+0x130>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d108      	bne.n	80072b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	4313      	orrs	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	689a      	ldr	r2, [r3, #8]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a10      	ldr	r2, [pc, #64]	; (800731c <TIM_Base_SetConfig+0x114>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d00f      	beq.n	8007300 <TIM_Base_SetConfig+0xf8>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a12      	ldr	r2, [pc, #72]	; (800732c <TIM_Base_SetConfig+0x124>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d00b      	beq.n	8007300 <TIM_Base_SetConfig+0xf8>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a11      	ldr	r2, [pc, #68]	; (8007330 <TIM_Base_SetConfig+0x128>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d007      	beq.n	8007300 <TIM_Base_SetConfig+0xf8>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a10      	ldr	r2, [pc, #64]	; (8007334 <TIM_Base_SetConfig+0x12c>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d003      	beq.n	8007300 <TIM_Base_SetConfig+0xf8>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a0f      	ldr	r2, [pc, #60]	; (8007338 <TIM_Base_SetConfig+0x130>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d103      	bne.n	8007308 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	691a      	ldr	r2, [r3, #16]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	615a      	str	r2, [r3, #20]
}
 800730e:	bf00      	nop
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	40012c00 	.word	0x40012c00
 8007320:	40000400 	.word	0x40000400
 8007324:	40000800 	.word	0x40000800
 8007328:	40000c00 	.word	0x40000c00
 800732c:	40013400 	.word	0x40013400
 8007330:	40014000 	.word	0x40014000
 8007334:	40014400 	.word	0x40014400
 8007338:	40014800 	.word	0x40014800

0800733c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800734c:	2b01      	cmp	r3, #1
 800734e:	d101      	bne.n	8007354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007350:	2302      	movs	r3, #2
 8007352:	e068      	b.n	8007426 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2202      	movs	r2, #2
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a2e      	ldr	r2, [pc, #184]	; (8007434 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d004      	beq.n	8007388 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a2d      	ldr	r2, [pc, #180]	; (8007438 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d108      	bne.n	800739a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800738e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a1e      	ldr	r2, [pc, #120]	; (8007434 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d01d      	beq.n	80073fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c6:	d018      	beq.n	80073fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a1b      	ldr	r2, [pc, #108]	; (800743c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d013      	beq.n	80073fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a1a      	ldr	r2, [pc, #104]	; (8007440 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d00e      	beq.n	80073fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a18      	ldr	r2, [pc, #96]	; (8007444 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d009      	beq.n	80073fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a13      	ldr	r2, [pc, #76]	; (8007438 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d004      	beq.n	80073fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a14      	ldr	r2, [pc, #80]	; (8007448 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d10c      	bne.n	8007414 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	4313      	orrs	r3, r2
 800740a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3714      	adds	r7, #20
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	40012c00 	.word	0x40012c00
 8007438:	40013400 	.word	0x40013400
 800743c:	40000400 	.word	0x40000400
 8007440:	40000800 	.word	0x40000800
 8007444:	40000c00 	.word	0x40000c00
 8007448:	40014000 	.word	0x40014000

0800744c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <__errno>:
 8007488:	4b01      	ldr	r3, [pc, #4]	; (8007490 <__errno+0x8>)
 800748a:	6818      	ldr	r0, [r3, #0]
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	20000068 	.word	0x20000068

08007494 <__libc_init_array>:
 8007494:	b570      	push	{r4, r5, r6, lr}
 8007496:	4d0d      	ldr	r5, [pc, #52]	; (80074cc <__libc_init_array+0x38>)
 8007498:	4c0d      	ldr	r4, [pc, #52]	; (80074d0 <__libc_init_array+0x3c>)
 800749a:	1b64      	subs	r4, r4, r5
 800749c:	10a4      	asrs	r4, r4, #2
 800749e:	2600      	movs	r6, #0
 80074a0:	42a6      	cmp	r6, r4
 80074a2:	d109      	bne.n	80074b8 <__libc_init_array+0x24>
 80074a4:	4d0b      	ldr	r5, [pc, #44]	; (80074d4 <__libc_init_array+0x40>)
 80074a6:	4c0c      	ldr	r4, [pc, #48]	; (80074d8 <__libc_init_array+0x44>)
 80074a8:	f002 ff92 	bl	800a3d0 <_init>
 80074ac:	1b64      	subs	r4, r4, r5
 80074ae:	10a4      	asrs	r4, r4, #2
 80074b0:	2600      	movs	r6, #0
 80074b2:	42a6      	cmp	r6, r4
 80074b4:	d105      	bne.n	80074c2 <__libc_init_array+0x2e>
 80074b6:	bd70      	pop	{r4, r5, r6, pc}
 80074b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80074bc:	4798      	blx	r3
 80074be:	3601      	adds	r6, #1
 80074c0:	e7ee      	b.n	80074a0 <__libc_init_array+0xc>
 80074c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80074c6:	4798      	blx	r3
 80074c8:	3601      	adds	r6, #1
 80074ca:	e7f2      	b.n	80074b2 <__libc_init_array+0x1e>
 80074cc:	0800a8dc 	.word	0x0800a8dc
 80074d0:	0800a8dc 	.word	0x0800a8dc
 80074d4:	0800a8dc 	.word	0x0800a8dc
 80074d8:	0800a8e0 	.word	0x0800a8e0

080074dc <memset>:
 80074dc:	4402      	add	r2, r0
 80074de:	4603      	mov	r3, r0
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d100      	bne.n	80074e6 <memset+0xa>
 80074e4:	4770      	bx	lr
 80074e6:	f803 1b01 	strb.w	r1, [r3], #1
 80074ea:	e7f9      	b.n	80074e0 <memset+0x4>

080074ec <__cvt>:
 80074ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074f0:	ec55 4b10 	vmov	r4, r5, d0
 80074f4:	2d00      	cmp	r5, #0
 80074f6:	460e      	mov	r6, r1
 80074f8:	4619      	mov	r1, r3
 80074fa:	462b      	mov	r3, r5
 80074fc:	bfbb      	ittet	lt
 80074fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007502:	461d      	movlt	r5, r3
 8007504:	2300      	movge	r3, #0
 8007506:	232d      	movlt	r3, #45	; 0x2d
 8007508:	700b      	strb	r3, [r1, #0]
 800750a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800750c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007510:	4691      	mov	r9, r2
 8007512:	f023 0820 	bic.w	r8, r3, #32
 8007516:	bfbc      	itt	lt
 8007518:	4622      	movlt	r2, r4
 800751a:	4614      	movlt	r4, r2
 800751c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007520:	d005      	beq.n	800752e <__cvt+0x42>
 8007522:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007526:	d100      	bne.n	800752a <__cvt+0x3e>
 8007528:	3601      	adds	r6, #1
 800752a:	2102      	movs	r1, #2
 800752c:	e000      	b.n	8007530 <__cvt+0x44>
 800752e:	2103      	movs	r1, #3
 8007530:	ab03      	add	r3, sp, #12
 8007532:	9301      	str	r3, [sp, #4]
 8007534:	ab02      	add	r3, sp, #8
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	ec45 4b10 	vmov	d0, r4, r5
 800753c:	4653      	mov	r3, sl
 800753e:	4632      	mov	r2, r6
 8007540:	f000 fe3a 	bl	80081b8 <_dtoa_r>
 8007544:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007548:	4607      	mov	r7, r0
 800754a:	d102      	bne.n	8007552 <__cvt+0x66>
 800754c:	f019 0f01 	tst.w	r9, #1
 8007550:	d022      	beq.n	8007598 <__cvt+0xac>
 8007552:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007556:	eb07 0906 	add.w	r9, r7, r6
 800755a:	d110      	bne.n	800757e <__cvt+0x92>
 800755c:	783b      	ldrb	r3, [r7, #0]
 800755e:	2b30      	cmp	r3, #48	; 0x30
 8007560:	d10a      	bne.n	8007578 <__cvt+0x8c>
 8007562:	2200      	movs	r2, #0
 8007564:	2300      	movs	r3, #0
 8007566:	4620      	mov	r0, r4
 8007568:	4629      	mov	r1, r5
 800756a:	f7f9 faad 	bl	8000ac8 <__aeabi_dcmpeq>
 800756e:	b918      	cbnz	r0, 8007578 <__cvt+0x8c>
 8007570:	f1c6 0601 	rsb	r6, r6, #1
 8007574:	f8ca 6000 	str.w	r6, [sl]
 8007578:	f8da 3000 	ldr.w	r3, [sl]
 800757c:	4499      	add	r9, r3
 800757e:	2200      	movs	r2, #0
 8007580:	2300      	movs	r3, #0
 8007582:	4620      	mov	r0, r4
 8007584:	4629      	mov	r1, r5
 8007586:	f7f9 fa9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800758a:	b108      	cbz	r0, 8007590 <__cvt+0xa4>
 800758c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007590:	2230      	movs	r2, #48	; 0x30
 8007592:	9b03      	ldr	r3, [sp, #12]
 8007594:	454b      	cmp	r3, r9
 8007596:	d307      	bcc.n	80075a8 <__cvt+0xbc>
 8007598:	9b03      	ldr	r3, [sp, #12]
 800759a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800759c:	1bdb      	subs	r3, r3, r7
 800759e:	4638      	mov	r0, r7
 80075a0:	6013      	str	r3, [r2, #0]
 80075a2:	b004      	add	sp, #16
 80075a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a8:	1c59      	adds	r1, r3, #1
 80075aa:	9103      	str	r1, [sp, #12]
 80075ac:	701a      	strb	r2, [r3, #0]
 80075ae:	e7f0      	b.n	8007592 <__cvt+0xa6>

080075b0 <__exponent>:
 80075b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075b2:	4603      	mov	r3, r0
 80075b4:	2900      	cmp	r1, #0
 80075b6:	bfb8      	it	lt
 80075b8:	4249      	neglt	r1, r1
 80075ba:	f803 2b02 	strb.w	r2, [r3], #2
 80075be:	bfb4      	ite	lt
 80075c0:	222d      	movlt	r2, #45	; 0x2d
 80075c2:	222b      	movge	r2, #43	; 0x2b
 80075c4:	2909      	cmp	r1, #9
 80075c6:	7042      	strb	r2, [r0, #1]
 80075c8:	dd2a      	ble.n	8007620 <__exponent+0x70>
 80075ca:	f10d 0407 	add.w	r4, sp, #7
 80075ce:	46a4      	mov	ip, r4
 80075d0:	270a      	movs	r7, #10
 80075d2:	46a6      	mov	lr, r4
 80075d4:	460a      	mov	r2, r1
 80075d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80075da:	fb07 1516 	mls	r5, r7, r6, r1
 80075de:	3530      	adds	r5, #48	; 0x30
 80075e0:	2a63      	cmp	r2, #99	; 0x63
 80075e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80075e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80075ea:	4631      	mov	r1, r6
 80075ec:	dcf1      	bgt.n	80075d2 <__exponent+0x22>
 80075ee:	3130      	adds	r1, #48	; 0x30
 80075f0:	f1ae 0502 	sub.w	r5, lr, #2
 80075f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80075f8:	1c44      	adds	r4, r0, #1
 80075fa:	4629      	mov	r1, r5
 80075fc:	4561      	cmp	r1, ip
 80075fe:	d30a      	bcc.n	8007616 <__exponent+0x66>
 8007600:	f10d 0209 	add.w	r2, sp, #9
 8007604:	eba2 020e 	sub.w	r2, r2, lr
 8007608:	4565      	cmp	r5, ip
 800760a:	bf88      	it	hi
 800760c:	2200      	movhi	r2, #0
 800760e:	4413      	add	r3, r2
 8007610:	1a18      	subs	r0, r3, r0
 8007612:	b003      	add	sp, #12
 8007614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800761a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800761e:	e7ed      	b.n	80075fc <__exponent+0x4c>
 8007620:	2330      	movs	r3, #48	; 0x30
 8007622:	3130      	adds	r1, #48	; 0x30
 8007624:	7083      	strb	r3, [r0, #2]
 8007626:	70c1      	strb	r1, [r0, #3]
 8007628:	1d03      	adds	r3, r0, #4
 800762a:	e7f1      	b.n	8007610 <__exponent+0x60>

0800762c <_printf_float>:
 800762c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007630:	ed2d 8b02 	vpush	{d8}
 8007634:	b08d      	sub	sp, #52	; 0x34
 8007636:	460c      	mov	r4, r1
 8007638:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800763c:	4616      	mov	r6, r2
 800763e:	461f      	mov	r7, r3
 8007640:	4605      	mov	r5, r0
 8007642:	f001 fd5f 	bl	8009104 <_localeconv_r>
 8007646:	f8d0 a000 	ldr.w	sl, [r0]
 800764a:	4650      	mov	r0, sl
 800764c:	f7f8 fdc0 	bl	80001d0 <strlen>
 8007650:	2300      	movs	r3, #0
 8007652:	930a      	str	r3, [sp, #40]	; 0x28
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	9305      	str	r3, [sp, #20]
 8007658:	f8d8 3000 	ldr.w	r3, [r8]
 800765c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007660:	3307      	adds	r3, #7
 8007662:	f023 0307 	bic.w	r3, r3, #7
 8007666:	f103 0208 	add.w	r2, r3, #8
 800766a:	f8c8 2000 	str.w	r2, [r8]
 800766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007672:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007676:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800767a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800767e:	9307      	str	r3, [sp, #28]
 8007680:	f8cd 8018 	str.w	r8, [sp, #24]
 8007684:	ee08 0a10 	vmov	s16, r0
 8007688:	4b9f      	ldr	r3, [pc, #636]	; (8007908 <_printf_float+0x2dc>)
 800768a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800768e:	f04f 32ff 	mov.w	r2, #4294967295
 8007692:	f7f9 fa4b 	bl	8000b2c <__aeabi_dcmpun>
 8007696:	bb88      	cbnz	r0, 80076fc <_printf_float+0xd0>
 8007698:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800769c:	4b9a      	ldr	r3, [pc, #616]	; (8007908 <_printf_float+0x2dc>)
 800769e:	f04f 32ff 	mov.w	r2, #4294967295
 80076a2:	f7f9 fa25 	bl	8000af0 <__aeabi_dcmple>
 80076a6:	bb48      	cbnz	r0, 80076fc <_printf_float+0xd0>
 80076a8:	2200      	movs	r2, #0
 80076aa:	2300      	movs	r3, #0
 80076ac:	4640      	mov	r0, r8
 80076ae:	4649      	mov	r1, r9
 80076b0:	f7f9 fa14 	bl	8000adc <__aeabi_dcmplt>
 80076b4:	b110      	cbz	r0, 80076bc <_printf_float+0x90>
 80076b6:	232d      	movs	r3, #45	; 0x2d
 80076b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076bc:	4b93      	ldr	r3, [pc, #588]	; (800790c <_printf_float+0x2e0>)
 80076be:	4894      	ldr	r0, [pc, #592]	; (8007910 <_printf_float+0x2e4>)
 80076c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80076c4:	bf94      	ite	ls
 80076c6:	4698      	movls	r8, r3
 80076c8:	4680      	movhi	r8, r0
 80076ca:	2303      	movs	r3, #3
 80076cc:	6123      	str	r3, [r4, #16]
 80076ce:	9b05      	ldr	r3, [sp, #20]
 80076d0:	f023 0204 	bic.w	r2, r3, #4
 80076d4:	6022      	str	r2, [r4, #0]
 80076d6:	f04f 0900 	mov.w	r9, #0
 80076da:	9700      	str	r7, [sp, #0]
 80076dc:	4633      	mov	r3, r6
 80076de:	aa0b      	add	r2, sp, #44	; 0x2c
 80076e0:	4621      	mov	r1, r4
 80076e2:	4628      	mov	r0, r5
 80076e4:	f000 f9d8 	bl	8007a98 <_printf_common>
 80076e8:	3001      	adds	r0, #1
 80076ea:	f040 8090 	bne.w	800780e <_printf_float+0x1e2>
 80076ee:	f04f 30ff 	mov.w	r0, #4294967295
 80076f2:	b00d      	add	sp, #52	; 0x34
 80076f4:	ecbd 8b02 	vpop	{d8}
 80076f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fc:	4642      	mov	r2, r8
 80076fe:	464b      	mov	r3, r9
 8007700:	4640      	mov	r0, r8
 8007702:	4649      	mov	r1, r9
 8007704:	f7f9 fa12 	bl	8000b2c <__aeabi_dcmpun>
 8007708:	b140      	cbz	r0, 800771c <_printf_float+0xf0>
 800770a:	464b      	mov	r3, r9
 800770c:	2b00      	cmp	r3, #0
 800770e:	bfbc      	itt	lt
 8007710:	232d      	movlt	r3, #45	; 0x2d
 8007712:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007716:	487f      	ldr	r0, [pc, #508]	; (8007914 <_printf_float+0x2e8>)
 8007718:	4b7f      	ldr	r3, [pc, #508]	; (8007918 <_printf_float+0x2ec>)
 800771a:	e7d1      	b.n	80076c0 <_printf_float+0x94>
 800771c:	6863      	ldr	r3, [r4, #4]
 800771e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007722:	9206      	str	r2, [sp, #24]
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	d13f      	bne.n	80077a8 <_printf_float+0x17c>
 8007728:	2306      	movs	r3, #6
 800772a:	6063      	str	r3, [r4, #4]
 800772c:	9b05      	ldr	r3, [sp, #20]
 800772e:	6861      	ldr	r1, [r4, #4]
 8007730:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007734:	2300      	movs	r3, #0
 8007736:	9303      	str	r3, [sp, #12]
 8007738:	ab0a      	add	r3, sp, #40	; 0x28
 800773a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800773e:	ab09      	add	r3, sp, #36	; 0x24
 8007740:	ec49 8b10 	vmov	d0, r8, r9
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	6022      	str	r2, [r4, #0]
 8007748:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800774c:	4628      	mov	r0, r5
 800774e:	f7ff fecd 	bl	80074ec <__cvt>
 8007752:	9b06      	ldr	r3, [sp, #24]
 8007754:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007756:	2b47      	cmp	r3, #71	; 0x47
 8007758:	4680      	mov	r8, r0
 800775a:	d108      	bne.n	800776e <_printf_float+0x142>
 800775c:	1cc8      	adds	r0, r1, #3
 800775e:	db02      	blt.n	8007766 <_printf_float+0x13a>
 8007760:	6863      	ldr	r3, [r4, #4]
 8007762:	4299      	cmp	r1, r3
 8007764:	dd41      	ble.n	80077ea <_printf_float+0x1be>
 8007766:	f1ab 0b02 	sub.w	fp, fp, #2
 800776a:	fa5f fb8b 	uxtb.w	fp, fp
 800776e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007772:	d820      	bhi.n	80077b6 <_printf_float+0x18a>
 8007774:	3901      	subs	r1, #1
 8007776:	465a      	mov	r2, fp
 8007778:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800777c:	9109      	str	r1, [sp, #36]	; 0x24
 800777e:	f7ff ff17 	bl	80075b0 <__exponent>
 8007782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007784:	1813      	adds	r3, r2, r0
 8007786:	2a01      	cmp	r2, #1
 8007788:	4681      	mov	r9, r0
 800778a:	6123      	str	r3, [r4, #16]
 800778c:	dc02      	bgt.n	8007794 <_printf_float+0x168>
 800778e:	6822      	ldr	r2, [r4, #0]
 8007790:	07d2      	lsls	r2, r2, #31
 8007792:	d501      	bpl.n	8007798 <_printf_float+0x16c>
 8007794:	3301      	adds	r3, #1
 8007796:	6123      	str	r3, [r4, #16]
 8007798:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800779c:	2b00      	cmp	r3, #0
 800779e:	d09c      	beq.n	80076da <_printf_float+0xae>
 80077a0:	232d      	movs	r3, #45	; 0x2d
 80077a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077a6:	e798      	b.n	80076da <_printf_float+0xae>
 80077a8:	9a06      	ldr	r2, [sp, #24]
 80077aa:	2a47      	cmp	r2, #71	; 0x47
 80077ac:	d1be      	bne.n	800772c <_printf_float+0x100>
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1bc      	bne.n	800772c <_printf_float+0x100>
 80077b2:	2301      	movs	r3, #1
 80077b4:	e7b9      	b.n	800772a <_printf_float+0xfe>
 80077b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80077ba:	d118      	bne.n	80077ee <_printf_float+0x1c2>
 80077bc:	2900      	cmp	r1, #0
 80077be:	6863      	ldr	r3, [r4, #4]
 80077c0:	dd0b      	ble.n	80077da <_printf_float+0x1ae>
 80077c2:	6121      	str	r1, [r4, #16]
 80077c4:	b913      	cbnz	r3, 80077cc <_printf_float+0x1a0>
 80077c6:	6822      	ldr	r2, [r4, #0]
 80077c8:	07d0      	lsls	r0, r2, #31
 80077ca:	d502      	bpl.n	80077d2 <_printf_float+0x1a6>
 80077cc:	3301      	adds	r3, #1
 80077ce:	440b      	add	r3, r1
 80077d0:	6123      	str	r3, [r4, #16]
 80077d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80077d4:	f04f 0900 	mov.w	r9, #0
 80077d8:	e7de      	b.n	8007798 <_printf_float+0x16c>
 80077da:	b913      	cbnz	r3, 80077e2 <_printf_float+0x1b6>
 80077dc:	6822      	ldr	r2, [r4, #0]
 80077de:	07d2      	lsls	r2, r2, #31
 80077e0:	d501      	bpl.n	80077e6 <_printf_float+0x1ba>
 80077e2:	3302      	adds	r3, #2
 80077e4:	e7f4      	b.n	80077d0 <_printf_float+0x1a4>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e7f2      	b.n	80077d0 <_printf_float+0x1a4>
 80077ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80077ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f0:	4299      	cmp	r1, r3
 80077f2:	db05      	blt.n	8007800 <_printf_float+0x1d4>
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	6121      	str	r1, [r4, #16]
 80077f8:	07d8      	lsls	r0, r3, #31
 80077fa:	d5ea      	bpl.n	80077d2 <_printf_float+0x1a6>
 80077fc:	1c4b      	adds	r3, r1, #1
 80077fe:	e7e7      	b.n	80077d0 <_printf_float+0x1a4>
 8007800:	2900      	cmp	r1, #0
 8007802:	bfd4      	ite	le
 8007804:	f1c1 0202 	rsble	r2, r1, #2
 8007808:	2201      	movgt	r2, #1
 800780a:	4413      	add	r3, r2
 800780c:	e7e0      	b.n	80077d0 <_printf_float+0x1a4>
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	055a      	lsls	r2, r3, #21
 8007812:	d407      	bmi.n	8007824 <_printf_float+0x1f8>
 8007814:	6923      	ldr	r3, [r4, #16]
 8007816:	4642      	mov	r2, r8
 8007818:	4631      	mov	r1, r6
 800781a:	4628      	mov	r0, r5
 800781c:	47b8      	blx	r7
 800781e:	3001      	adds	r0, #1
 8007820:	d12c      	bne.n	800787c <_printf_float+0x250>
 8007822:	e764      	b.n	80076ee <_printf_float+0xc2>
 8007824:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007828:	f240 80e0 	bls.w	80079ec <_printf_float+0x3c0>
 800782c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007830:	2200      	movs	r2, #0
 8007832:	2300      	movs	r3, #0
 8007834:	f7f9 f948 	bl	8000ac8 <__aeabi_dcmpeq>
 8007838:	2800      	cmp	r0, #0
 800783a:	d034      	beq.n	80078a6 <_printf_float+0x27a>
 800783c:	4a37      	ldr	r2, [pc, #220]	; (800791c <_printf_float+0x2f0>)
 800783e:	2301      	movs	r3, #1
 8007840:	4631      	mov	r1, r6
 8007842:	4628      	mov	r0, r5
 8007844:	47b8      	blx	r7
 8007846:	3001      	adds	r0, #1
 8007848:	f43f af51 	beq.w	80076ee <_printf_float+0xc2>
 800784c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007850:	429a      	cmp	r2, r3
 8007852:	db02      	blt.n	800785a <_printf_float+0x22e>
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	07d8      	lsls	r0, r3, #31
 8007858:	d510      	bpl.n	800787c <_printf_float+0x250>
 800785a:	ee18 3a10 	vmov	r3, s16
 800785e:	4652      	mov	r2, sl
 8007860:	4631      	mov	r1, r6
 8007862:	4628      	mov	r0, r5
 8007864:	47b8      	blx	r7
 8007866:	3001      	adds	r0, #1
 8007868:	f43f af41 	beq.w	80076ee <_printf_float+0xc2>
 800786c:	f04f 0800 	mov.w	r8, #0
 8007870:	f104 091a 	add.w	r9, r4, #26
 8007874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007876:	3b01      	subs	r3, #1
 8007878:	4543      	cmp	r3, r8
 800787a:	dc09      	bgt.n	8007890 <_printf_float+0x264>
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	079b      	lsls	r3, r3, #30
 8007880:	f100 8105 	bmi.w	8007a8e <_printf_float+0x462>
 8007884:	68e0      	ldr	r0, [r4, #12]
 8007886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007888:	4298      	cmp	r0, r3
 800788a:	bfb8      	it	lt
 800788c:	4618      	movlt	r0, r3
 800788e:	e730      	b.n	80076f2 <_printf_float+0xc6>
 8007890:	2301      	movs	r3, #1
 8007892:	464a      	mov	r2, r9
 8007894:	4631      	mov	r1, r6
 8007896:	4628      	mov	r0, r5
 8007898:	47b8      	blx	r7
 800789a:	3001      	adds	r0, #1
 800789c:	f43f af27 	beq.w	80076ee <_printf_float+0xc2>
 80078a0:	f108 0801 	add.w	r8, r8, #1
 80078a4:	e7e6      	b.n	8007874 <_printf_float+0x248>
 80078a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	dc39      	bgt.n	8007920 <_printf_float+0x2f4>
 80078ac:	4a1b      	ldr	r2, [pc, #108]	; (800791c <_printf_float+0x2f0>)
 80078ae:	2301      	movs	r3, #1
 80078b0:	4631      	mov	r1, r6
 80078b2:	4628      	mov	r0, r5
 80078b4:	47b8      	blx	r7
 80078b6:	3001      	adds	r0, #1
 80078b8:	f43f af19 	beq.w	80076ee <_printf_float+0xc2>
 80078bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078c0:	4313      	orrs	r3, r2
 80078c2:	d102      	bne.n	80078ca <_printf_float+0x29e>
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	07d9      	lsls	r1, r3, #31
 80078c8:	d5d8      	bpl.n	800787c <_printf_float+0x250>
 80078ca:	ee18 3a10 	vmov	r3, s16
 80078ce:	4652      	mov	r2, sl
 80078d0:	4631      	mov	r1, r6
 80078d2:	4628      	mov	r0, r5
 80078d4:	47b8      	blx	r7
 80078d6:	3001      	adds	r0, #1
 80078d8:	f43f af09 	beq.w	80076ee <_printf_float+0xc2>
 80078dc:	f04f 0900 	mov.w	r9, #0
 80078e0:	f104 0a1a 	add.w	sl, r4, #26
 80078e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e6:	425b      	negs	r3, r3
 80078e8:	454b      	cmp	r3, r9
 80078ea:	dc01      	bgt.n	80078f0 <_printf_float+0x2c4>
 80078ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ee:	e792      	b.n	8007816 <_printf_float+0x1ea>
 80078f0:	2301      	movs	r3, #1
 80078f2:	4652      	mov	r2, sl
 80078f4:	4631      	mov	r1, r6
 80078f6:	4628      	mov	r0, r5
 80078f8:	47b8      	blx	r7
 80078fa:	3001      	adds	r0, #1
 80078fc:	f43f aef7 	beq.w	80076ee <_printf_float+0xc2>
 8007900:	f109 0901 	add.w	r9, r9, #1
 8007904:	e7ee      	b.n	80078e4 <_printf_float+0x2b8>
 8007906:	bf00      	nop
 8007908:	7fefffff 	.word	0x7fefffff
 800790c:	0800a508 	.word	0x0800a508
 8007910:	0800a50c 	.word	0x0800a50c
 8007914:	0800a514 	.word	0x0800a514
 8007918:	0800a510 	.word	0x0800a510
 800791c:	0800a518 	.word	0x0800a518
 8007920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007922:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007924:	429a      	cmp	r2, r3
 8007926:	bfa8      	it	ge
 8007928:	461a      	movge	r2, r3
 800792a:	2a00      	cmp	r2, #0
 800792c:	4691      	mov	r9, r2
 800792e:	dc37      	bgt.n	80079a0 <_printf_float+0x374>
 8007930:	f04f 0b00 	mov.w	fp, #0
 8007934:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007938:	f104 021a 	add.w	r2, r4, #26
 800793c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800793e:	9305      	str	r3, [sp, #20]
 8007940:	eba3 0309 	sub.w	r3, r3, r9
 8007944:	455b      	cmp	r3, fp
 8007946:	dc33      	bgt.n	80079b0 <_printf_float+0x384>
 8007948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800794c:	429a      	cmp	r2, r3
 800794e:	db3b      	blt.n	80079c8 <_printf_float+0x39c>
 8007950:	6823      	ldr	r3, [r4, #0]
 8007952:	07da      	lsls	r2, r3, #31
 8007954:	d438      	bmi.n	80079c8 <_printf_float+0x39c>
 8007956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007958:	9a05      	ldr	r2, [sp, #20]
 800795a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800795c:	1a9a      	subs	r2, r3, r2
 800795e:	eba3 0901 	sub.w	r9, r3, r1
 8007962:	4591      	cmp	r9, r2
 8007964:	bfa8      	it	ge
 8007966:	4691      	movge	r9, r2
 8007968:	f1b9 0f00 	cmp.w	r9, #0
 800796c:	dc35      	bgt.n	80079da <_printf_float+0x3ae>
 800796e:	f04f 0800 	mov.w	r8, #0
 8007972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007976:	f104 0a1a 	add.w	sl, r4, #26
 800797a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800797e:	1a9b      	subs	r3, r3, r2
 8007980:	eba3 0309 	sub.w	r3, r3, r9
 8007984:	4543      	cmp	r3, r8
 8007986:	f77f af79 	ble.w	800787c <_printf_float+0x250>
 800798a:	2301      	movs	r3, #1
 800798c:	4652      	mov	r2, sl
 800798e:	4631      	mov	r1, r6
 8007990:	4628      	mov	r0, r5
 8007992:	47b8      	blx	r7
 8007994:	3001      	adds	r0, #1
 8007996:	f43f aeaa 	beq.w	80076ee <_printf_float+0xc2>
 800799a:	f108 0801 	add.w	r8, r8, #1
 800799e:	e7ec      	b.n	800797a <_printf_float+0x34e>
 80079a0:	4613      	mov	r3, r2
 80079a2:	4631      	mov	r1, r6
 80079a4:	4642      	mov	r2, r8
 80079a6:	4628      	mov	r0, r5
 80079a8:	47b8      	blx	r7
 80079aa:	3001      	adds	r0, #1
 80079ac:	d1c0      	bne.n	8007930 <_printf_float+0x304>
 80079ae:	e69e      	b.n	80076ee <_printf_float+0xc2>
 80079b0:	2301      	movs	r3, #1
 80079b2:	4631      	mov	r1, r6
 80079b4:	4628      	mov	r0, r5
 80079b6:	9205      	str	r2, [sp, #20]
 80079b8:	47b8      	blx	r7
 80079ba:	3001      	adds	r0, #1
 80079bc:	f43f ae97 	beq.w	80076ee <_printf_float+0xc2>
 80079c0:	9a05      	ldr	r2, [sp, #20]
 80079c2:	f10b 0b01 	add.w	fp, fp, #1
 80079c6:	e7b9      	b.n	800793c <_printf_float+0x310>
 80079c8:	ee18 3a10 	vmov	r3, s16
 80079cc:	4652      	mov	r2, sl
 80079ce:	4631      	mov	r1, r6
 80079d0:	4628      	mov	r0, r5
 80079d2:	47b8      	blx	r7
 80079d4:	3001      	adds	r0, #1
 80079d6:	d1be      	bne.n	8007956 <_printf_float+0x32a>
 80079d8:	e689      	b.n	80076ee <_printf_float+0xc2>
 80079da:	9a05      	ldr	r2, [sp, #20]
 80079dc:	464b      	mov	r3, r9
 80079de:	4442      	add	r2, r8
 80079e0:	4631      	mov	r1, r6
 80079e2:	4628      	mov	r0, r5
 80079e4:	47b8      	blx	r7
 80079e6:	3001      	adds	r0, #1
 80079e8:	d1c1      	bne.n	800796e <_printf_float+0x342>
 80079ea:	e680      	b.n	80076ee <_printf_float+0xc2>
 80079ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079ee:	2a01      	cmp	r2, #1
 80079f0:	dc01      	bgt.n	80079f6 <_printf_float+0x3ca>
 80079f2:	07db      	lsls	r3, r3, #31
 80079f4:	d538      	bpl.n	8007a68 <_printf_float+0x43c>
 80079f6:	2301      	movs	r3, #1
 80079f8:	4642      	mov	r2, r8
 80079fa:	4631      	mov	r1, r6
 80079fc:	4628      	mov	r0, r5
 80079fe:	47b8      	blx	r7
 8007a00:	3001      	adds	r0, #1
 8007a02:	f43f ae74 	beq.w	80076ee <_printf_float+0xc2>
 8007a06:	ee18 3a10 	vmov	r3, s16
 8007a0a:	4652      	mov	r2, sl
 8007a0c:	4631      	mov	r1, r6
 8007a0e:	4628      	mov	r0, r5
 8007a10:	47b8      	blx	r7
 8007a12:	3001      	adds	r0, #1
 8007a14:	f43f ae6b 	beq.w	80076ee <_printf_float+0xc2>
 8007a18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f7f9 f852 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a24:	b9d8      	cbnz	r0, 8007a5e <_printf_float+0x432>
 8007a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a28:	f108 0201 	add.w	r2, r8, #1
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	4631      	mov	r1, r6
 8007a30:	4628      	mov	r0, r5
 8007a32:	47b8      	blx	r7
 8007a34:	3001      	adds	r0, #1
 8007a36:	d10e      	bne.n	8007a56 <_printf_float+0x42a>
 8007a38:	e659      	b.n	80076ee <_printf_float+0xc2>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	4652      	mov	r2, sl
 8007a3e:	4631      	mov	r1, r6
 8007a40:	4628      	mov	r0, r5
 8007a42:	47b8      	blx	r7
 8007a44:	3001      	adds	r0, #1
 8007a46:	f43f ae52 	beq.w	80076ee <_printf_float+0xc2>
 8007a4a:	f108 0801 	add.w	r8, r8, #1
 8007a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a50:	3b01      	subs	r3, #1
 8007a52:	4543      	cmp	r3, r8
 8007a54:	dcf1      	bgt.n	8007a3a <_printf_float+0x40e>
 8007a56:	464b      	mov	r3, r9
 8007a58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a5c:	e6dc      	b.n	8007818 <_printf_float+0x1ec>
 8007a5e:	f04f 0800 	mov.w	r8, #0
 8007a62:	f104 0a1a 	add.w	sl, r4, #26
 8007a66:	e7f2      	b.n	8007a4e <_printf_float+0x422>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	4642      	mov	r2, r8
 8007a6c:	e7df      	b.n	8007a2e <_printf_float+0x402>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	464a      	mov	r2, r9
 8007a72:	4631      	mov	r1, r6
 8007a74:	4628      	mov	r0, r5
 8007a76:	47b8      	blx	r7
 8007a78:	3001      	adds	r0, #1
 8007a7a:	f43f ae38 	beq.w	80076ee <_printf_float+0xc2>
 8007a7e:	f108 0801 	add.w	r8, r8, #1
 8007a82:	68e3      	ldr	r3, [r4, #12]
 8007a84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a86:	1a5b      	subs	r3, r3, r1
 8007a88:	4543      	cmp	r3, r8
 8007a8a:	dcf0      	bgt.n	8007a6e <_printf_float+0x442>
 8007a8c:	e6fa      	b.n	8007884 <_printf_float+0x258>
 8007a8e:	f04f 0800 	mov.w	r8, #0
 8007a92:	f104 0919 	add.w	r9, r4, #25
 8007a96:	e7f4      	b.n	8007a82 <_printf_float+0x456>

08007a98 <_printf_common>:
 8007a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a9c:	4616      	mov	r6, r2
 8007a9e:	4699      	mov	r9, r3
 8007aa0:	688a      	ldr	r2, [r1, #8]
 8007aa2:	690b      	ldr	r3, [r1, #16]
 8007aa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	bfb8      	it	lt
 8007aac:	4613      	movlt	r3, r2
 8007aae:	6033      	str	r3, [r6, #0]
 8007ab0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ab4:	4607      	mov	r7, r0
 8007ab6:	460c      	mov	r4, r1
 8007ab8:	b10a      	cbz	r2, 8007abe <_printf_common+0x26>
 8007aba:	3301      	adds	r3, #1
 8007abc:	6033      	str	r3, [r6, #0]
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	0699      	lsls	r1, r3, #26
 8007ac2:	bf42      	ittt	mi
 8007ac4:	6833      	ldrmi	r3, [r6, #0]
 8007ac6:	3302      	addmi	r3, #2
 8007ac8:	6033      	strmi	r3, [r6, #0]
 8007aca:	6825      	ldr	r5, [r4, #0]
 8007acc:	f015 0506 	ands.w	r5, r5, #6
 8007ad0:	d106      	bne.n	8007ae0 <_printf_common+0x48>
 8007ad2:	f104 0a19 	add.w	sl, r4, #25
 8007ad6:	68e3      	ldr	r3, [r4, #12]
 8007ad8:	6832      	ldr	r2, [r6, #0]
 8007ada:	1a9b      	subs	r3, r3, r2
 8007adc:	42ab      	cmp	r3, r5
 8007ade:	dc26      	bgt.n	8007b2e <_printf_common+0x96>
 8007ae0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ae4:	1e13      	subs	r3, r2, #0
 8007ae6:	6822      	ldr	r2, [r4, #0]
 8007ae8:	bf18      	it	ne
 8007aea:	2301      	movne	r3, #1
 8007aec:	0692      	lsls	r2, r2, #26
 8007aee:	d42b      	bmi.n	8007b48 <_printf_common+0xb0>
 8007af0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007af4:	4649      	mov	r1, r9
 8007af6:	4638      	mov	r0, r7
 8007af8:	47c0      	blx	r8
 8007afa:	3001      	adds	r0, #1
 8007afc:	d01e      	beq.n	8007b3c <_printf_common+0xa4>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	68e5      	ldr	r5, [r4, #12]
 8007b02:	6832      	ldr	r2, [r6, #0]
 8007b04:	f003 0306 	and.w	r3, r3, #6
 8007b08:	2b04      	cmp	r3, #4
 8007b0a:	bf08      	it	eq
 8007b0c:	1aad      	subeq	r5, r5, r2
 8007b0e:	68a3      	ldr	r3, [r4, #8]
 8007b10:	6922      	ldr	r2, [r4, #16]
 8007b12:	bf0c      	ite	eq
 8007b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b18:	2500      	movne	r5, #0
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	bfc4      	itt	gt
 8007b1e:	1a9b      	subgt	r3, r3, r2
 8007b20:	18ed      	addgt	r5, r5, r3
 8007b22:	2600      	movs	r6, #0
 8007b24:	341a      	adds	r4, #26
 8007b26:	42b5      	cmp	r5, r6
 8007b28:	d11a      	bne.n	8007b60 <_printf_common+0xc8>
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	e008      	b.n	8007b40 <_printf_common+0xa8>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	4652      	mov	r2, sl
 8007b32:	4649      	mov	r1, r9
 8007b34:	4638      	mov	r0, r7
 8007b36:	47c0      	blx	r8
 8007b38:	3001      	adds	r0, #1
 8007b3a:	d103      	bne.n	8007b44 <_printf_common+0xac>
 8007b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b44:	3501      	adds	r5, #1
 8007b46:	e7c6      	b.n	8007ad6 <_printf_common+0x3e>
 8007b48:	18e1      	adds	r1, r4, r3
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	2030      	movs	r0, #48	; 0x30
 8007b4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b52:	4422      	add	r2, r4
 8007b54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b5c:	3302      	adds	r3, #2
 8007b5e:	e7c7      	b.n	8007af0 <_printf_common+0x58>
 8007b60:	2301      	movs	r3, #1
 8007b62:	4622      	mov	r2, r4
 8007b64:	4649      	mov	r1, r9
 8007b66:	4638      	mov	r0, r7
 8007b68:	47c0      	blx	r8
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	d0e6      	beq.n	8007b3c <_printf_common+0xa4>
 8007b6e:	3601      	adds	r6, #1
 8007b70:	e7d9      	b.n	8007b26 <_printf_common+0x8e>
	...

08007b74 <_printf_i>:
 8007b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b78:	7e0f      	ldrb	r7, [r1, #24]
 8007b7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b7c:	2f78      	cmp	r7, #120	; 0x78
 8007b7e:	4691      	mov	r9, r2
 8007b80:	4680      	mov	r8, r0
 8007b82:	460c      	mov	r4, r1
 8007b84:	469a      	mov	sl, r3
 8007b86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b8a:	d807      	bhi.n	8007b9c <_printf_i+0x28>
 8007b8c:	2f62      	cmp	r7, #98	; 0x62
 8007b8e:	d80a      	bhi.n	8007ba6 <_printf_i+0x32>
 8007b90:	2f00      	cmp	r7, #0
 8007b92:	f000 80d8 	beq.w	8007d46 <_printf_i+0x1d2>
 8007b96:	2f58      	cmp	r7, #88	; 0x58
 8007b98:	f000 80a3 	beq.w	8007ce2 <_printf_i+0x16e>
 8007b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ba0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ba4:	e03a      	b.n	8007c1c <_printf_i+0xa8>
 8007ba6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007baa:	2b15      	cmp	r3, #21
 8007bac:	d8f6      	bhi.n	8007b9c <_printf_i+0x28>
 8007bae:	a101      	add	r1, pc, #4	; (adr r1, 8007bb4 <_printf_i+0x40>)
 8007bb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bb4:	08007c0d 	.word	0x08007c0d
 8007bb8:	08007c21 	.word	0x08007c21
 8007bbc:	08007b9d 	.word	0x08007b9d
 8007bc0:	08007b9d 	.word	0x08007b9d
 8007bc4:	08007b9d 	.word	0x08007b9d
 8007bc8:	08007b9d 	.word	0x08007b9d
 8007bcc:	08007c21 	.word	0x08007c21
 8007bd0:	08007b9d 	.word	0x08007b9d
 8007bd4:	08007b9d 	.word	0x08007b9d
 8007bd8:	08007b9d 	.word	0x08007b9d
 8007bdc:	08007b9d 	.word	0x08007b9d
 8007be0:	08007d2d 	.word	0x08007d2d
 8007be4:	08007c51 	.word	0x08007c51
 8007be8:	08007d0f 	.word	0x08007d0f
 8007bec:	08007b9d 	.word	0x08007b9d
 8007bf0:	08007b9d 	.word	0x08007b9d
 8007bf4:	08007d4f 	.word	0x08007d4f
 8007bf8:	08007b9d 	.word	0x08007b9d
 8007bfc:	08007c51 	.word	0x08007c51
 8007c00:	08007b9d 	.word	0x08007b9d
 8007c04:	08007b9d 	.word	0x08007b9d
 8007c08:	08007d17 	.word	0x08007d17
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	1d1a      	adds	r2, r3, #4
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	602a      	str	r2, [r5, #0]
 8007c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e0a3      	b.n	8007d68 <_printf_i+0x1f4>
 8007c20:	6820      	ldr	r0, [r4, #0]
 8007c22:	6829      	ldr	r1, [r5, #0]
 8007c24:	0606      	lsls	r6, r0, #24
 8007c26:	f101 0304 	add.w	r3, r1, #4
 8007c2a:	d50a      	bpl.n	8007c42 <_printf_i+0xce>
 8007c2c:	680e      	ldr	r6, [r1, #0]
 8007c2e:	602b      	str	r3, [r5, #0]
 8007c30:	2e00      	cmp	r6, #0
 8007c32:	da03      	bge.n	8007c3c <_printf_i+0xc8>
 8007c34:	232d      	movs	r3, #45	; 0x2d
 8007c36:	4276      	negs	r6, r6
 8007c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c3c:	485e      	ldr	r0, [pc, #376]	; (8007db8 <_printf_i+0x244>)
 8007c3e:	230a      	movs	r3, #10
 8007c40:	e019      	b.n	8007c76 <_printf_i+0x102>
 8007c42:	680e      	ldr	r6, [r1, #0]
 8007c44:	602b      	str	r3, [r5, #0]
 8007c46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c4a:	bf18      	it	ne
 8007c4c:	b236      	sxthne	r6, r6
 8007c4e:	e7ef      	b.n	8007c30 <_printf_i+0xbc>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	6820      	ldr	r0, [r4, #0]
 8007c54:	1d19      	adds	r1, r3, #4
 8007c56:	6029      	str	r1, [r5, #0]
 8007c58:	0601      	lsls	r1, r0, #24
 8007c5a:	d501      	bpl.n	8007c60 <_printf_i+0xec>
 8007c5c:	681e      	ldr	r6, [r3, #0]
 8007c5e:	e002      	b.n	8007c66 <_printf_i+0xf2>
 8007c60:	0646      	lsls	r6, r0, #25
 8007c62:	d5fb      	bpl.n	8007c5c <_printf_i+0xe8>
 8007c64:	881e      	ldrh	r6, [r3, #0]
 8007c66:	4854      	ldr	r0, [pc, #336]	; (8007db8 <_printf_i+0x244>)
 8007c68:	2f6f      	cmp	r7, #111	; 0x6f
 8007c6a:	bf0c      	ite	eq
 8007c6c:	2308      	moveq	r3, #8
 8007c6e:	230a      	movne	r3, #10
 8007c70:	2100      	movs	r1, #0
 8007c72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c76:	6865      	ldr	r5, [r4, #4]
 8007c78:	60a5      	str	r5, [r4, #8]
 8007c7a:	2d00      	cmp	r5, #0
 8007c7c:	bfa2      	ittt	ge
 8007c7e:	6821      	ldrge	r1, [r4, #0]
 8007c80:	f021 0104 	bicge.w	r1, r1, #4
 8007c84:	6021      	strge	r1, [r4, #0]
 8007c86:	b90e      	cbnz	r6, 8007c8c <_printf_i+0x118>
 8007c88:	2d00      	cmp	r5, #0
 8007c8a:	d04d      	beq.n	8007d28 <_printf_i+0x1b4>
 8007c8c:	4615      	mov	r5, r2
 8007c8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c92:	fb03 6711 	mls	r7, r3, r1, r6
 8007c96:	5dc7      	ldrb	r7, [r0, r7]
 8007c98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c9c:	4637      	mov	r7, r6
 8007c9e:	42bb      	cmp	r3, r7
 8007ca0:	460e      	mov	r6, r1
 8007ca2:	d9f4      	bls.n	8007c8e <_printf_i+0x11a>
 8007ca4:	2b08      	cmp	r3, #8
 8007ca6:	d10b      	bne.n	8007cc0 <_printf_i+0x14c>
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	07de      	lsls	r6, r3, #31
 8007cac:	d508      	bpl.n	8007cc0 <_printf_i+0x14c>
 8007cae:	6923      	ldr	r3, [r4, #16]
 8007cb0:	6861      	ldr	r1, [r4, #4]
 8007cb2:	4299      	cmp	r1, r3
 8007cb4:	bfde      	ittt	le
 8007cb6:	2330      	movle	r3, #48	; 0x30
 8007cb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cc0:	1b52      	subs	r2, r2, r5
 8007cc2:	6122      	str	r2, [r4, #16]
 8007cc4:	f8cd a000 	str.w	sl, [sp]
 8007cc8:	464b      	mov	r3, r9
 8007cca:	aa03      	add	r2, sp, #12
 8007ccc:	4621      	mov	r1, r4
 8007cce:	4640      	mov	r0, r8
 8007cd0:	f7ff fee2 	bl	8007a98 <_printf_common>
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	d14c      	bne.n	8007d72 <_printf_i+0x1fe>
 8007cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cdc:	b004      	add	sp, #16
 8007cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce2:	4835      	ldr	r0, [pc, #212]	; (8007db8 <_printf_i+0x244>)
 8007ce4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ce8:	6829      	ldr	r1, [r5, #0]
 8007cea:	6823      	ldr	r3, [r4, #0]
 8007cec:	f851 6b04 	ldr.w	r6, [r1], #4
 8007cf0:	6029      	str	r1, [r5, #0]
 8007cf2:	061d      	lsls	r5, r3, #24
 8007cf4:	d514      	bpl.n	8007d20 <_printf_i+0x1ac>
 8007cf6:	07df      	lsls	r7, r3, #31
 8007cf8:	bf44      	itt	mi
 8007cfa:	f043 0320 	orrmi.w	r3, r3, #32
 8007cfe:	6023      	strmi	r3, [r4, #0]
 8007d00:	b91e      	cbnz	r6, 8007d0a <_printf_i+0x196>
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	f023 0320 	bic.w	r3, r3, #32
 8007d08:	6023      	str	r3, [r4, #0]
 8007d0a:	2310      	movs	r3, #16
 8007d0c:	e7b0      	b.n	8007c70 <_printf_i+0xfc>
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	f043 0320 	orr.w	r3, r3, #32
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	2378      	movs	r3, #120	; 0x78
 8007d18:	4828      	ldr	r0, [pc, #160]	; (8007dbc <_printf_i+0x248>)
 8007d1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d1e:	e7e3      	b.n	8007ce8 <_printf_i+0x174>
 8007d20:	0659      	lsls	r1, r3, #25
 8007d22:	bf48      	it	mi
 8007d24:	b2b6      	uxthmi	r6, r6
 8007d26:	e7e6      	b.n	8007cf6 <_printf_i+0x182>
 8007d28:	4615      	mov	r5, r2
 8007d2a:	e7bb      	b.n	8007ca4 <_printf_i+0x130>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	6826      	ldr	r6, [r4, #0]
 8007d30:	6961      	ldr	r1, [r4, #20]
 8007d32:	1d18      	adds	r0, r3, #4
 8007d34:	6028      	str	r0, [r5, #0]
 8007d36:	0635      	lsls	r5, r6, #24
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	d501      	bpl.n	8007d40 <_printf_i+0x1cc>
 8007d3c:	6019      	str	r1, [r3, #0]
 8007d3e:	e002      	b.n	8007d46 <_printf_i+0x1d2>
 8007d40:	0670      	lsls	r0, r6, #25
 8007d42:	d5fb      	bpl.n	8007d3c <_printf_i+0x1c8>
 8007d44:	8019      	strh	r1, [r3, #0]
 8007d46:	2300      	movs	r3, #0
 8007d48:	6123      	str	r3, [r4, #16]
 8007d4a:	4615      	mov	r5, r2
 8007d4c:	e7ba      	b.n	8007cc4 <_printf_i+0x150>
 8007d4e:	682b      	ldr	r3, [r5, #0]
 8007d50:	1d1a      	adds	r2, r3, #4
 8007d52:	602a      	str	r2, [r5, #0]
 8007d54:	681d      	ldr	r5, [r3, #0]
 8007d56:	6862      	ldr	r2, [r4, #4]
 8007d58:	2100      	movs	r1, #0
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	f7f8 fa40 	bl	80001e0 <memchr>
 8007d60:	b108      	cbz	r0, 8007d66 <_printf_i+0x1f2>
 8007d62:	1b40      	subs	r0, r0, r5
 8007d64:	6060      	str	r0, [r4, #4]
 8007d66:	6863      	ldr	r3, [r4, #4]
 8007d68:	6123      	str	r3, [r4, #16]
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d70:	e7a8      	b.n	8007cc4 <_printf_i+0x150>
 8007d72:	6923      	ldr	r3, [r4, #16]
 8007d74:	462a      	mov	r2, r5
 8007d76:	4649      	mov	r1, r9
 8007d78:	4640      	mov	r0, r8
 8007d7a:	47d0      	blx	sl
 8007d7c:	3001      	adds	r0, #1
 8007d7e:	d0ab      	beq.n	8007cd8 <_printf_i+0x164>
 8007d80:	6823      	ldr	r3, [r4, #0]
 8007d82:	079b      	lsls	r3, r3, #30
 8007d84:	d413      	bmi.n	8007dae <_printf_i+0x23a>
 8007d86:	68e0      	ldr	r0, [r4, #12]
 8007d88:	9b03      	ldr	r3, [sp, #12]
 8007d8a:	4298      	cmp	r0, r3
 8007d8c:	bfb8      	it	lt
 8007d8e:	4618      	movlt	r0, r3
 8007d90:	e7a4      	b.n	8007cdc <_printf_i+0x168>
 8007d92:	2301      	movs	r3, #1
 8007d94:	4632      	mov	r2, r6
 8007d96:	4649      	mov	r1, r9
 8007d98:	4640      	mov	r0, r8
 8007d9a:	47d0      	blx	sl
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d09b      	beq.n	8007cd8 <_printf_i+0x164>
 8007da0:	3501      	adds	r5, #1
 8007da2:	68e3      	ldr	r3, [r4, #12]
 8007da4:	9903      	ldr	r1, [sp, #12]
 8007da6:	1a5b      	subs	r3, r3, r1
 8007da8:	42ab      	cmp	r3, r5
 8007daa:	dcf2      	bgt.n	8007d92 <_printf_i+0x21e>
 8007dac:	e7eb      	b.n	8007d86 <_printf_i+0x212>
 8007dae:	2500      	movs	r5, #0
 8007db0:	f104 0619 	add.w	r6, r4, #25
 8007db4:	e7f5      	b.n	8007da2 <_printf_i+0x22e>
 8007db6:	bf00      	nop
 8007db8:	0800a51a 	.word	0x0800a51a
 8007dbc:	0800a52b 	.word	0x0800a52b

08007dc0 <iprintf>:
 8007dc0:	b40f      	push	{r0, r1, r2, r3}
 8007dc2:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <iprintf+0x2c>)
 8007dc4:	b513      	push	{r0, r1, r4, lr}
 8007dc6:	681c      	ldr	r4, [r3, #0]
 8007dc8:	b124      	cbz	r4, 8007dd4 <iprintf+0x14>
 8007dca:	69a3      	ldr	r3, [r4, #24]
 8007dcc:	b913      	cbnz	r3, 8007dd4 <iprintf+0x14>
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f001 f8fa 	bl	8008fc8 <__sinit>
 8007dd4:	ab05      	add	r3, sp, #20
 8007dd6:	9a04      	ldr	r2, [sp, #16]
 8007dd8:	68a1      	ldr	r1, [r4, #8]
 8007dda:	9301      	str	r3, [sp, #4]
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f002 f813 	bl	8009e08 <_vfiprintf_r>
 8007de2:	b002      	add	sp, #8
 8007de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007de8:	b004      	add	sp, #16
 8007dea:	4770      	bx	lr
 8007dec:	20000068 	.word	0x20000068

08007df0 <_puts_r>:
 8007df0:	b570      	push	{r4, r5, r6, lr}
 8007df2:	460e      	mov	r6, r1
 8007df4:	4605      	mov	r5, r0
 8007df6:	b118      	cbz	r0, 8007e00 <_puts_r+0x10>
 8007df8:	6983      	ldr	r3, [r0, #24]
 8007dfa:	b90b      	cbnz	r3, 8007e00 <_puts_r+0x10>
 8007dfc:	f001 f8e4 	bl	8008fc8 <__sinit>
 8007e00:	69ab      	ldr	r3, [r5, #24]
 8007e02:	68ac      	ldr	r4, [r5, #8]
 8007e04:	b913      	cbnz	r3, 8007e0c <_puts_r+0x1c>
 8007e06:	4628      	mov	r0, r5
 8007e08:	f001 f8de 	bl	8008fc8 <__sinit>
 8007e0c:	4b2c      	ldr	r3, [pc, #176]	; (8007ec0 <_puts_r+0xd0>)
 8007e0e:	429c      	cmp	r4, r3
 8007e10:	d120      	bne.n	8007e54 <_puts_r+0x64>
 8007e12:	686c      	ldr	r4, [r5, #4]
 8007e14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e16:	07db      	lsls	r3, r3, #31
 8007e18:	d405      	bmi.n	8007e26 <_puts_r+0x36>
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	0598      	lsls	r0, r3, #22
 8007e1e:	d402      	bmi.n	8007e26 <_puts_r+0x36>
 8007e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e22:	f001 f974 	bl	800910e <__retarget_lock_acquire_recursive>
 8007e26:	89a3      	ldrh	r3, [r4, #12]
 8007e28:	0719      	lsls	r1, r3, #28
 8007e2a:	d51d      	bpl.n	8007e68 <_puts_r+0x78>
 8007e2c:	6923      	ldr	r3, [r4, #16]
 8007e2e:	b1db      	cbz	r3, 8007e68 <_puts_r+0x78>
 8007e30:	3e01      	subs	r6, #1
 8007e32:	68a3      	ldr	r3, [r4, #8]
 8007e34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	60a3      	str	r3, [r4, #8]
 8007e3c:	bb39      	cbnz	r1, 8007e8e <_puts_r+0x9e>
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	da38      	bge.n	8007eb4 <_puts_r+0xc4>
 8007e42:	4622      	mov	r2, r4
 8007e44:	210a      	movs	r1, #10
 8007e46:	4628      	mov	r0, r5
 8007e48:	f000 f868 	bl	8007f1c <__swbuf_r>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d011      	beq.n	8007e74 <_puts_r+0x84>
 8007e50:	250a      	movs	r5, #10
 8007e52:	e011      	b.n	8007e78 <_puts_r+0x88>
 8007e54:	4b1b      	ldr	r3, [pc, #108]	; (8007ec4 <_puts_r+0xd4>)
 8007e56:	429c      	cmp	r4, r3
 8007e58:	d101      	bne.n	8007e5e <_puts_r+0x6e>
 8007e5a:	68ac      	ldr	r4, [r5, #8]
 8007e5c:	e7da      	b.n	8007e14 <_puts_r+0x24>
 8007e5e:	4b1a      	ldr	r3, [pc, #104]	; (8007ec8 <_puts_r+0xd8>)
 8007e60:	429c      	cmp	r4, r3
 8007e62:	bf08      	it	eq
 8007e64:	68ec      	ldreq	r4, [r5, #12]
 8007e66:	e7d5      	b.n	8007e14 <_puts_r+0x24>
 8007e68:	4621      	mov	r1, r4
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	f000 f8a8 	bl	8007fc0 <__swsetup_r>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d0dd      	beq.n	8007e30 <_puts_r+0x40>
 8007e74:	f04f 35ff 	mov.w	r5, #4294967295
 8007e78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e7a:	07da      	lsls	r2, r3, #31
 8007e7c:	d405      	bmi.n	8007e8a <_puts_r+0x9a>
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	059b      	lsls	r3, r3, #22
 8007e82:	d402      	bmi.n	8007e8a <_puts_r+0x9a>
 8007e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e86:	f001 f943 	bl	8009110 <__retarget_lock_release_recursive>
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	bd70      	pop	{r4, r5, r6, pc}
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	da04      	bge.n	8007e9c <_puts_r+0xac>
 8007e92:	69a2      	ldr	r2, [r4, #24]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	dc06      	bgt.n	8007ea6 <_puts_r+0xb6>
 8007e98:	290a      	cmp	r1, #10
 8007e9a:	d004      	beq.n	8007ea6 <_puts_r+0xb6>
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	1c5a      	adds	r2, r3, #1
 8007ea0:	6022      	str	r2, [r4, #0]
 8007ea2:	7019      	strb	r1, [r3, #0]
 8007ea4:	e7c5      	b.n	8007e32 <_puts_r+0x42>
 8007ea6:	4622      	mov	r2, r4
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f000 f837 	bl	8007f1c <__swbuf_r>
 8007eae:	3001      	adds	r0, #1
 8007eb0:	d1bf      	bne.n	8007e32 <_puts_r+0x42>
 8007eb2:	e7df      	b.n	8007e74 <_puts_r+0x84>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	250a      	movs	r5, #10
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	6022      	str	r2, [r4, #0]
 8007ebc:	701d      	strb	r5, [r3, #0]
 8007ebe:	e7db      	b.n	8007e78 <_puts_r+0x88>
 8007ec0:	0800a5ec 	.word	0x0800a5ec
 8007ec4:	0800a60c 	.word	0x0800a60c
 8007ec8:	0800a5cc 	.word	0x0800a5cc

08007ecc <puts>:
 8007ecc:	4b02      	ldr	r3, [pc, #8]	; (8007ed8 <puts+0xc>)
 8007ece:	4601      	mov	r1, r0
 8007ed0:	6818      	ldr	r0, [r3, #0]
 8007ed2:	f7ff bf8d 	b.w	8007df0 <_puts_r>
 8007ed6:	bf00      	nop
 8007ed8:	20000068 	.word	0x20000068

08007edc <siprintf>:
 8007edc:	b40e      	push	{r1, r2, r3}
 8007ede:	b500      	push	{lr}
 8007ee0:	b09c      	sub	sp, #112	; 0x70
 8007ee2:	ab1d      	add	r3, sp, #116	; 0x74
 8007ee4:	9002      	str	r0, [sp, #8]
 8007ee6:	9006      	str	r0, [sp, #24]
 8007ee8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007eec:	4809      	ldr	r0, [pc, #36]	; (8007f14 <siprintf+0x38>)
 8007eee:	9107      	str	r1, [sp, #28]
 8007ef0:	9104      	str	r1, [sp, #16]
 8007ef2:	4909      	ldr	r1, [pc, #36]	; (8007f18 <siprintf+0x3c>)
 8007ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ef8:	9105      	str	r1, [sp, #20]
 8007efa:	6800      	ldr	r0, [r0, #0]
 8007efc:	9301      	str	r3, [sp, #4]
 8007efe:	a902      	add	r1, sp, #8
 8007f00:	f001 fe58 	bl	8009bb4 <_svfiprintf_r>
 8007f04:	9b02      	ldr	r3, [sp, #8]
 8007f06:	2200      	movs	r2, #0
 8007f08:	701a      	strb	r2, [r3, #0]
 8007f0a:	b01c      	add	sp, #112	; 0x70
 8007f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f10:	b003      	add	sp, #12
 8007f12:	4770      	bx	lr
 8007f14:	20000068 	.word	0x20000068
 8007f18:	ffff0208 	.word	0xffff0208

08007f1c <__swbuf_r>:
 8007f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1e:	460e      	mov	r6, r1
 8007f20:	4614      	mov	r4, r2
 8007f22:	4605      	mov	r5, r0
 8007f24:	b118      	cbz	r0, 8007f2e <__swbuf_r+0x12>
 8007f26:	6983      	ldr	r3, [r0, #24]
 8007f28:	b90b      	cbnz	r3, 8007f2e <__swbuf_r+0x12>
 8007f2a:	f001 f84d 	bl	8008fc8 <__sinit>
 8007f2e:	4b21      	ldr	r3, [pc, #132]	; (8007fb4 <__swbuf_r+0x98>)
 8007f30:	429c      	cmp	r4, r3
 8007f32:	d12b      	bne.n	8007f8c <__swbuf_r+0x70>
 8007f34:	686c      	ldr	r4, [r5, #4]
 8007f36:	69a3      	ldr	r3, [r4, #24]
 8007f38:	60a3      	str	r3, [r4, #8]
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	071a      	lsls	r2, r3, #28
 8007f3e:	d52f      	bpl.n	8007fa0 <__swbuf_r+0x84>
 8007f40:	6923      	ldr	r3, [r4, #16]
 8007f42:	b36b      	cbz	r3, 8007fa0 <__swbuf_r+0x84>
 8007f44:	6923      	ldr	r3, [r4, #16]
 8007f46:	6820      	ldr	r0, [r4, #0]
 8007f48:	1ac0      	subs	r0, r0, r3
 8007f4a:	6963      	ldr	r3, [r4, #20]
 8007f4c:	b2f6      	uxtb	r6, r6
 8007f4e:	4283      	cmp	r3, r0
 8007f50:	4637      	mov	r7, r6
 8007f52:	dc04      	bgt.n	8007f5e <__swbuf_r+0x42>
 8007f54:	4621      	mov	r1, r4
 8007f56:	4628      	mov	r0, r5
 8007f58:	f000 ffa2 	bl	8008ea0 <_fflush_r>
 8007f5c:	bb30      	cbnz	r0, 8007fac <__swbuf_r+0x90>
 8007f5e:	68a3      	ldr	r3, [r4, #8]
 8007f60:	3b01      	subs	r3, #1
 8007f62:	60a3      	str	r3, [r4, #8]
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	6022      	str	r2, [r4, #0]
 8007f6a:	701e      	strb	r6, [r3, #0]
 8007f6c:	6963      	ldr	r3, [r4, #20]
 8007f6e:	3001      	adds	r0, #1
 8007f70:	4283      	cmp	r3, r0
 8007f72:	d004      	beq.n	8007f7e <__swbuf_r+0x62>
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	07db      	lsls	r3, r3, #31
 8007f78:	d506      	bpl.n	8007f88 <__swbuf_r+0x6c>
 8007f7a:	2e0a      	cmp	r6, #10
 8007f7c:	d104      	bne.n	8007f88 <__swbuf_r+0x6c>
 8007f7e:	4621      	mov	r1, r4
 8007f80:	4628      	mov	r0, r5
 8007f82:	f000 ff8d 	bl	8008ea0 <_fflush_r>
 8007f86:	b988      	cbnz	r0, 8007fac <__swbuf_r+0x90>
 8007f88:	4638      	mov	r0, r7
 8007f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f8c:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <__swbuf_r+0x9c>)
 8007f8e:	429c      	cmp	r4, r3
 8007f90:	d101      	bne.n	8007f96 <__swbuf_r+0x7a>
 8007f92:	68ac      	ldr	r4, [r5, #8]
 8007f94:	e7cf      	b.n	8007f36 <__swbuf_r+0x1a>
 8007f96:	4b09      	ldr	r3, [pc, #36]	; (8007fbc <__swbuf_r+0xa0>)
 8007f98:	429c      	cmp	r4, r3
 8007f9a:	bf08      	it	eq
 8007f9c:	68ec      	ldreq	r4, [r5, #12]
 8007f9e:	e7ca      	b.n	8007f36 <__swbuf_r+0x1a>
 8007fa0:	4621      	mov	r1, r4
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	f000 f80c 	bl	8007fc0 <__swsetup_r>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d0cb      	beq.n	8007f44 <__swbuf_r+0x28>
 8007fac:	f04f 37ff 	mov.w	r7, #4294967295
 8007fb0:	e7ea      	b.n	8007f88 <__swbuf_r+0x6c>
 8007fb2:	bf00      	nop
 8007fb4:	0800a5ec 	.word	0x0800a5ec
 8007fb8:	0800a60c 	.word	0x0800a60c
 8007fbc:	0800a5cc 	.word	0x0800a5cc

08007fc0 <__swsetup_r>:
 8007fc0:	4b32      	ldr	r3, [pc, #200]	; (800808c <__swsetup_r+0xcc>)
 8007fc2:	b570      	push	{r4, r5, r6, lr}
 8007fc4:	681d      	ldr	r5, [r3, #0]
 8007fc6:	4606      	mov	r6, r0
 8007fc8:	460c      	mov	r4, r1
 8007fca:	b125      	cbz	r5, 8007fd6 <__swsetup_r+0x16>
 8007fcc:	69ab      	ldr	r3, [r5, #24]
 8007fce:	b913      	cbnz	r3, 8007fd6 <__swsetup_r+0x16>
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	f000 fff9 	bl	8008fc8 <__sinit>
 8007fd6:	4b2e      	ldr	r3, [pc, #184]	; (8008090 <__swsetup_r+0xd0>)
 8007fd8:	429c      	cmp	r4, r3
 8007fda:	d10f      	bne.n	8007ffc <__swsetup_r+0x3c>
 8007fdc:	686c      	ldr	r4, [r5, #4]
 8007fde:	89a3      	ldrh	r3, [r4, #12]
 8007fe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fe4:	0719      	lsls	r1, r3, #28
 8007fe6:	d42c      	bmi.n	8008042 <__swsetup_r+0x82>
 8007fe8:	06dd      	lsls	r5, r3, #27
 8007fea:	d411      	bmi.n	8008010 <__swsetup_r+0x50>
 8007fec:	2309      	movs	r3, #9
 8007fee:	6033      	str	r3, [r6, #0]
 8007ff0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ff4:	81a3      	strh	r3, [r4, #12]
 8007ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8007ffa:	e03e      	b.n	800807a <__swsetup_r+0xba>
 8007ffc:	4b25      	ldr	r3, [pc, #148]	; (8008094 <__swsetup_r+0xd4>)
 8007ffe:	429c      	cmp	r4, r3
 8008000:	d101      	bne.n	8008006 <__swsetup_r+0x46>
 8008002:	68ac      	ldr	r4, [r5, #8]
 8008004:	e7eb      	b.n	8007fde <__swsetup_r+0x1e>
 8008006:	4b24      	ldr	r3, [pc, #144]	; (8008098 <__swsetup_r+0xd8>)
 8008008:	429c      	cmp	r4, r3
 800800a:	bf08      	it	eq
 800800c:	68ec      	ldreq	r4, [r5, #12]
 800800e:	e7e6      	b.n	8007fde <__swsetup_r+0x1e>
 8008010:	0758      	lsls	r0, r3, #29
 8008012:	d512      	bpl.n	800803a <__swsetup_r+0x7a>
 8008014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008016:	b141      	cbz	r1, 800802a <__swsetup_r+0x6a>
 8008018:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800801c:	4299      	cmp	r1, r3
 800801e:	d002      	beq.n	8008026 <__swsetup_r+0x66>
 8008020:	4630      	mov	r0, r6
 8008022:	f001 fc8b 	bl	800993c <_free_r>
 8008026:	2300      	movs	r3, #0
 8008028:	6363      	str	r3, [r4, #52]	; 0x34
 800802a:	89a3      	ldrh	r3, [r4, #12]
 800802c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008030:	81a3      	strh	r3, [r4, #12]
 8008032:	2300      	movs	r3, #0
 8008034:	6063      	str	r3, [r4, #4]
 8008036:	6923      	ldr	r3, [r4, #16]
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	89a3      	ldrh	r3, [r4, #12]
 800803c:	f043 0308 	orr.w	r3, r3, #8
 8008040:	81a3      	strh	r3, [r4, #12]
 8008042:	6923      	ldr	r3, [r4, #16]
 8008044:	b94b      	cbnz	r3, 800805a <__swsetup_r+0x9a>
 8008046:	89a3      	ldrh	r3, [r4, #12]
 8008048:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800804c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008050:	d003      	beq.n	800805a <__swsetup_r+0x9a>
 8008052:	4621      	mov	r1, r4
 8008054:	4630      	mov	r0, r6
 8008056:	f001 f881 	bl	800915c <__smakebuf_r>
 800805a:	89a0      	ldrh	r0, [r4, #12]
 800805c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008060:	f010 0301 	ands.w	r3, r0, #1
 8008064:	d00a      	beq.n	800807c <__swsetup_r+0xbc>
 8008066:	2300      	movs	r3, #0
 8008068:	60a3      	str	r3, [r4, #8]
 800806a:	6963      	ldr	r3, [r4, #20]
 800806c:	425b      	negs	r3, r3
 800806e:	61a3      	str	r3, [r4, #24]
 8008070:	6923      	ldr	r3, [r4, #16]
 8008072:	b943      	cbnz	r3, 8008086 <__swsetup_r+0xc6>
 8008074:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008078:	d1ba      	bne.n	8007ff0 <__swsetup_r+0x30>
 800807a:	bd70      	pop	{r4, r5, r6, pc}
 800807c:	0781      	lsls	r1, r0, #30
 800807e:	bf58      	it	pl
 8008080:	6963      	ldrpl	r3, [r4, #20]
 8008082:	60a3      	str	r3, [r4, #8]
 8008084:	e7f4      	b.n	8008070 <__swsetup_r+0xb0>
 8008086:	2000      	movs	r0, #0
 8008088:	e7f7      	b.n	800807a <__swsetup_r+0xba>
 800808a:	bf00      	nop
 800808c:	20000068 	.word	0x20000068
 8008090:	0800a5ec 	.word	0x0800a5ec
 8008094:	0800a60c 	.word	0x0800a60c
 8008098:	0800a5cc 	.word	0x0800a5cc

0800809c <quorem>:
 800809c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a0:	6903      	ldr	r3, [r0, #16]
 80080a2:	690c      	ldr	r4, [r1, #16]
 80080a4:	42a3      	cmp	r3, r4
 80080a6:	4607      	mov	r7, r0
 80080a8:	f2c0 8081 	blt.w	80081ae <quorem+0x112>
 80080ac:	3c01      	subs	r4, #1
 80080ae:	f101 0814 	add.w	r8, r1, #20
 80080b2:	f100 0514 	add.w	r5, r0, #20
 80080b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080ba:	9301      	str	r3, [sp, #4]
 80080bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080c4:	3301      	adds	r3, #1
 80080c6:	429a      	cmp	r2, r3
 80080c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80080d4:	d331      	bcc.n	800813a <quorem+0x9e>
 80080d6:	f04f 0e00 	mov.w	lr, #0
 80080da:	4640      	mov	r0, r8
 80080dc:	46ac      	mov	ip, r5
 80080de:	46f2      	mov	sl, lr
 80080e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80080e4:	b293      	uxth	r3, r2
 80080e6:	fb06 e303 	mla	r3, r6, r3, lr
 80080ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	ebaa 0303 	sub.w	r3, sl, r3
 80080f4:	f8dc a000 	ldr.w	sl, [ip]
 80080f8:	0c12      	lsrs	r2, r2, #16
 80080fa:	fa13 f38a 	uxtah	r3, r3, sl
 80080fe:	fb06 e202 	mla	r2, r6, r2, lr
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	9b00      	ldr	r3, [sp, #0]
 8008106:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800810a:	b292      	uxth	r2, r2
 800810c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008110:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008114:	f8bd 3000 	ldrh.w	r3, [sp]
 8008118:	4581      	cmp	r9, r0
 800811a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800811e:	f84c 3b04 	str.w	r3, [ip], #4
 8008122:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008126:	d2db      	bcs.n	80080e0 <quorem+0x44>
 8008128:	f855 300b 	ldr.w	r3, [r5, fp]
 800812c:	b92b      	cbnz	r3, 800813a <quorem+0x9e>
 800812e:	9b01      	ldr	r3, [sp, #4]
 8008130:	3b04      	subs	r3, #4
 8008132:	429d      	cmp	r5, r3
 8008134:	461a      	mov	r2, r3
 8008136:	d32e      	bcc.n	8008196 <quorem+0xfa>
 8008138:	613c      	str	r4, [r7, #16]
 800813a:	4638      	mov	r0, r7
 800813c:	f001 fae6 	bl	800970c <__mcmp>
 8008140:	2800      	cmp	r0, #0
 8008142:	db24      	blt.n	800818e <quorem+0xf2>
 8008144:	3601      	adds	r6, #1
 8008146:	4628      	mov	r0, r5
 8008148:	f04f 0c00 	mov.w	ip, #0
 800814c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008150:	f8d0 e000 	ldr.w	lr, [r0]
 8008154:	b293      	uxth	r3, r2
 8008156:	ebac 0303 	sub.w	r3, ip, r3
 800815a:	0c12      	lsrs	r2, r2, #16
 800815c:	fa13 f38e 	uxtah	r3, r3, lr
 8008160:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008164:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008168:	b29b      	uxth	r3, r3
 800816a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800816e:	45c1      	cmp	r9, r8
 8008170:	f840 3b04 	str.w	r3, [r0], #4
 8008174:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008178:	d2e8      	bcs.n	800814c <quorem+0xb0>
 800817a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800817e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008182:	b922      	cbnz	r2, 800818e <quorem+0xf2>
 8008184:	3b04      	subs	r3, #4
 8008186:	429d      	cmp	r5, r3
 8008188:	461a      	mov	r2, r3
 800818a:	d30a      	bcc.n	80081a2 <quorem+0x106>
 800818c:	613c      	str	r4, [r7, #16]
 800818e:	4630      	mov	r0, r6
 8008190:	b003      	add	sp, #12
 8008192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008196:	6812      	ldr	r2, [r2, #0]
 8008198:	3b04      	subs	r3, #4
 800819a:	2a00      	cmp	r2, #0
 800819c:	d1cc      	bne.n	8008138 <quorem+0x9c>
 800819e:	3c01      	subs	r4, #1
 80081a0:	e7c7      	b.n	8008132 <quorem+0x96>
 80081a2:	6812      	ldr	r2, [r2, #0]
 80081a4:	3b04      	subs	r3, #4
 80081a6:	2a00      	cmp	r2, #0
 80081a8:	d1f0      	bne.n	800818c <quorem+0xf0>
 80081aa:	3c01      	subs	r4, #1
 80081ac:	e7eb      	b.n	8008186 <quorem+0xea>
 80081ae:	2000      	movs	r0, #0
 80081b0:	e7ee      	b.n	8008190 <quorem+0xf4>
 80081b2:	0000      	movs	r0, r0
 80081b4:	0000      	movs	r0, r0
	...

080081b8 <_dtoa_r>:
 80081b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081bc:	ed2d 8b04 	vpush	{d8-d9}
 80081c0:	ec57 6b10 	vmov	r6, r7, d0
 80081c4:	b093      	sub	sp, #76	; 0x4c
 80081c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80081c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80081cc:	9106      	str	r1, [sp, #24]
 80081ce:	ee10 aa10 	vmov	sl, s0
 80081d2:	4604      	mov	r4, r0
 80081d4:	9209      	str	r2, [sp, #36]	; 0x24
 80081d6:	930c      	str	r3, [sp, #48]	; 0x30
 80081d8:	46bb      	mov	fp, r7
 80081da:	b975      	cbnz	r5, 80081fa <_dtoa_r+0x42>
 80081dc:	2010      	movs	r0, #16
 80081de:	f000 fffd 	bl	80091dc <malloc>
 80081e2:	4602      	mov	r2, r0
 80081e4:	6260      	str	r0, [r4, #36]	; 0x24
 80081e6:	b920      	cbnz	r0, 80081f2 <_dtoa_r+0x3a>
 80081e8:	4ba7      	ldr	r3, [pc, #668]	; (8008488 <_dtoa_r+0x2d0>)
 80081ea:	21ea      	movs	r1, #234	; 0xea
 80081ec:	48a7      	ldr	r0, [pc, #668]	; (800848c <_dtoa_r+0x2d4>)
 80081ee:	f001 ffa1 	bl	800a134 <__assert_func>
 80081f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081f6:	6005      	str	r5, [r0, #0]
 80081f8:	60c5      	str	r5, [r0, #12]
 80081fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081fc:	6819      	ldr	r1, [r3, #0]
 80081fe:	b151      	cbz	r1, 8008216 <_dtoa_r+0x5e>
 8008200:	685a      	ldr	r2, [r3, #4]
 8008202:	604a      	str	r2, [r1, #4]
 8008204:	2301      	movs	r3, #1
 8008206:	4093      	lsls	r3, r2
 8008208:	608b      	str	r3, [r1, #8]
 800820a:	4620      	mov	r0, r4
 800820c:	f001 f83c 	bl	8009288 <_Bfree>
 8008210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	1e3b      	subs	r3, r7, #0
 8008218:	bfaa      	itet	ge
 800821a:	2300      	movge	r3, #0
 800821c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008220:	f8c8 3000 	strge.w	r3, [r8]
 8008224:	4b9a      	ldr	r3, [pc, #616]	; (8008490 <_dtoa_r+0x2d8>)
 8008226:	bfbc      	itt	lt
 8008228:	2201      	movlt	r2, #1
 800822a:	f8c8 2000 	strlt.w	r2, [r8]
 800822e:	ea33 030b 	bics.w	r3, r3, fp
 8008232:	d11b      	bne.n	800826c <_dtoa_r+0xb4>
 8008234:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008236:	f242 730f 	movw	r3, #9999	; 0x270f
 800823a:	6013      	str	r3, [r2, #0]
 800823c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008240:	4333      	orrs	r3, r6
 8008242:	f000 8592 	beq.w	8008d6a <_dtoa_r+0xbb2>
 8008246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008248:	b963      	cbnz	r3, 8008264 <_dtoa_r+0xac>
 800824a:	4b92      	ldr	r3, [pc, #584]	; (8008494 <_dtoa_r+0x2dc>)
 800824c:	e022      	b.n	8008294 <_dtoa_r+0xdc>
 800824e:	4b92      	ldr	r3, [pc, #584]	; (8008498 <_dtoa_r+0x2e0>)
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	3308      	adds	r3, #8
 8008254:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008256:	6013      	str	r3, [r2, #0]
 8008258:	9801      	ldr	r0, [sp, #4]
 800825a:	b013      	add	sp, #76	; 0x4c
 800825c:	ecbd 8b04 	vpop	{d8-d9}
 8008260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008264:	4b8b      	ldr	r3, [pc, #556]	; (8008494 <_dtoa_r+0x2dc>)
 8008266:	9301      	str	r3, [sp, #4]
 8008268:	3303      	adds	r3, #3
 800826a:	e7f3      	b.n	8008254 <_dtoa_r+0x9c>
 800826c:	2200      	movs	r2, #0
 800826e:	2300      	movs	r3, #0
 8008270:	4650      	mov	r0, sl
 8008272:	4659      	mov	r1, fp
 8008274:	f7f8 fc28 	bl	8000ac8 <__aeabi_dcmpeq>
 8008278:	ec4b ab19 	vmov	d9, sl, fp
 800827c:	4680      	mov	r8, r0
 800827e:	b158      	cbz	r0, 8008298 <_dtoa_r+0xe0>
 8008280:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008282:	2301      	movs	r3, #1
 8008284:	6013      	str	r3, [r2, #0]
 8008286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 856b 	beq.w	8008d64 <_dtoa_r+0xbac>
 800828e:	4883      	ldr	r0, [pc, #524]	; (800849c <_dtoa_r+0x2e4>)
 8008290:	6018      	str	r0, [r3, #0]
 8008292:	1e43      	subs	r3, r0, #1
 8008294:	9301      	str	r3, [sp, #4]
 8008296:	e7df      	b.n	8008258 <_dtoa_r+0xa0>
 8008298:	ec4b ab10 	vmov	d0, sl, fp
 800829c:	aa10      	add	r2, sp, #64	; 0x40
 800829e:	a911      	add	r1, sp, #68	; 0x44
 80082a0:	4620      	mov	r0, r4
 80082a2:	f001 fad9 	bl	8009858 <__d2b>
 80082a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80082aa:	ee08 0a10 	vmov	s16, r0
 80082ae:	2d00      	cmp	r5, #0
 80082b0:	f000 8084 	beq.w	80083bc <_dtoa_r+0x204>
 80082b4:	ee19 3a90 	vmov	r3, s19
 80082b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80082c0:	4656      	mov	r6, sl
 80082c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80082c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80082ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80082ce:	4b74      	ldr	r3, [pc, #464]	; (80084a0 <_dtoa_r+0x2e8>)
 80082d0:	2200      	movs	r2, #0
 80082d2:	4630      	mov	r0, r6
 80082d4:	4639      	mov	r1, r7
 80082d6:	f7f7 ffd7 	bl	8000288 <__aeabi_dsub>
 80082da:	a365      	add	r3, pc, #404	; (adr r3, 8008470 <_dtoa_r+0x2b8>)
 80082dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e0:	f7f8 f98a 	bl	80005f8 <__aeabi_dmul>
 80082e4:	a364      	add	r3, pc, #400	; (adr r3, 8008478 <_dtoa_r+0x2c0>)
 80082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ea:	f7f7 ffcf 	bl	800028c <__adddf3>
 80082ee:	4606      	mov	r6, r0
 80082f0:	4628      	mov	r0, r5
 80082f2:	460f      	mov	r7, r1
 80082f4:	f7f8 f916 	bl	8000524 <__aeabi_i2d>
 80082f8:	a361      	add	r3, pc, #388	; (adr r3, 8008480 <_dtoa_r+0x2c8>)
 80082fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fe:	f7f8 f97b 	bl	80005f8 <__aeabi_dmul>
 8008302:	4602      	mov	r2, r0
 8008304:	460b      	mov	r3, r1
 8008306:	4630      	mov	r0, r6
 8008308:	4639      	mov	r1, r7
 800830a:	f7f7 ffbf 	bl	800028c <__adddf3>
 800830e:	4606      	mov	r6, r0
 8008310:	460f      	mov	r7, r1
 8008312:	f7f8 fc21 	bl	8000b58 <__aeabi_d2iz>
 8008316:	2200      	movs	r2, #0
 8008318:	9000      	str	r0, [sp, #0]
 800831a:	2300      	movs	r3, #0
 800831c:	4630      	mov	r0, r6
 800831e:	4639      	mov	r1, r7
 8008320:	f7f8 fbdc 	bl	8000adc <__aeabi_dcmplt>
 8008324:	b150      	cbz	r0, 800833c <_dtoa_r+0x184>
 8008326:	9800      	ldr	r0, [sp, #0]
 8008328:	f7f8 f8fc 	bl	8000524 <__aeabi_i2d>
 800832c:	4632      	mov	r2, r6
 800832e:	463b      	mov	r3, r7
 8008330:	f7f8 fbca 	bl	8000ac8 <__aeabi_dcmpeq>
 8008334:	b910      	cbnz	r0, 800833c <_dtoa_r+0x184>
 8008336:	9b00      	ldr	r3, [sp, #0]
 8008338:	3b01      	subs	r3, #1
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	9b00      	ldr	r3, [sp, #0]
 800833e:	2b16      	cmp	r3, #22
 8008340:	d85a      	bhi.n	80083f8 <_dtoa_r+0x240>
 8008342:	9a00      	ldr	r2, [sp, #0]
 8008344:	4b57      	ldr	r3, [pc, #348]	; (80084a4 <_dtoa_r+0x2ec>)
 8008346:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800834a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834e:	ec51 0b19 	vmov	r0, r1, d9
 8008352:	f7f8 fbc3 	bl	8000adc <__aeabi_dcmplt>
 8008356:	2800      	cmp	r0, #0
 8008358:	d050      	beq.n	80083fc <_dtoa_r+0x244>
 800835a:	9b00      	ldr	r3, [sp, #0]
 800835c:	3b01      	subs	r3, #1
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	2300      	movs	r3, #0
 8008362:	930b      	str	r3, [sp, #44]	; 0x2c
 8008364:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008366:	1b5d      	subs	r5, r3, r5
 8008368:	1e6b      	subs	r3, r5, #1
 800836a:	9305      	str	r3, [sp, #20]
 800836c:	bf45      	ittet	mi
 800836e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008372:	9304      	strmi	r3, [sp, #16]
 8008374:	2300      	movpl	r3, #0
 8008376:	2300      	movmi	r3, #0
 8008378:	bf4c      	ite	mi
 800837a:	9305      	strmi	r3, [sp, #20]
 800837c:	9304      	strpl	r3, [sp, #16]
 800837e:	9b00      	ldr	r3, [sp, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	db3d      	blt.n	8008400 <_dtoa_r+0x248>
 8008384:	9b05      	ldr	r3, [sp, #20]
 8008386:	9a00      	ldr	r2, [sp, #0]
 8008388:	920a      	str	r2, [sp, #40]	; 0x28
 800838a:	4413      	add	r3, r2
 800838c:	9305      	str	r3, [sp, #20]
 800838e:	2300      	movs	r3, #0
 8008390:	9307      	str	r3, [sp, #28]
 8008392:	9b06      	ldr	r3, [sp, #24]
 8008394:	2b09      	cmp	r3, #9
 8008396:	f200 8089 	bhi.w	80084ac <_dtoa_r+0x2f4>
 800839a:	2b05      	cmp	r3, #5
 800839c:	bfc4      	itt	gt
 800839e:	3b04      	subgt	r3, #4
 80083a0:	9306      	strgt	r3, [sp, #24]
 80083a2:	9b06      	ldr	r3, [sp, #24]
 80083a4:	f1a3 0302 	sub.w	r3, r3, #2
 80083a8:	bfcc      	ite	gt
 80083aa:	2500      	movgt	r5, #0
 80083ac:	2501      	movle	r5, #1
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	f200 8087 	bhi.w	80084c2 <_dtoa_r+0x30a>
 80083b4:	e8df f003 	tbb	[pc, r3]
 80083b8:	59383a2d 	.word	0x59383a2d
 80083bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80083c0:	441d      	add	r5, r3
 80083c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80083c6:	2b20      	cmp	r3, #32
 80083c8:	bfc1      	itttt	gt
 80083ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80083d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80083d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80083da:	bfda      	itte	le
 80083dc:	f1c3 0320 	rsble	r3, r3, #32
 80083e0:	fa06 f003 	lslle.w	r0, r6, r3
 80083e4:	4318      	orrgt	r0, r3
 80083e6:	f7f8 f88d 	bl	8000504 <__aeabi_ui2d>
 80083ea:	2301      	movs	r3, #1
 80083ec:	4606      	mov	r6, r0
 80083ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80083f2:	3d01      	subs	r5, #1
 80083f4:	930e      	str	r3, [sp, #56]	; 0x38
 80083f6:	e76a      	b.n	80082ce <_dtoa_r+0x116>
 80083f8:	2301      	movs	r3, #1
 80083fa:	e7b2      	b.n	8008362 <_dtoa_r+0x1aa>
 80083fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80083fe:	e7b1      	b.n	8008364 <_dtoa_r+0x1ac>
 8008400:	9b04      	ldr	r3, [sp, #16]
 8008402:	9a00      	ldr	r2, [sp, #0]
 8008404:	1a9b      	subs	r3, r3, r2
 8008406:	9304      	str	r3, [sp, #16]
 8008408:	4253      	negs	r3, r2
 800840a:	9307      	str	r3, [sp, #28]
 800840c:	2300      	movs	r3, #0
 800840e:	930a      	str	r3, [sp, #40]	; 0x28
 8008410:	e7bf      	b.n	8008392 <_dtoa_r+0x1da>
 8008412:	2300      	movs	r3, #0
 8008414:	9308      	str	r3, [sp, #32]
 8008416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008418:	2b00      	cmp	r3, #0
 800841a:	dc55      	bgt.n	80084c8 <_dtoa_r+0x310>
 800841c:	2301      	movs	r3, #1
 800841e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008422:	461a      	mov	r2, r3
 8008424:	9209      	str	r2, [sp, #36]	; 0x24
 8008426:	e00c      	b.n	8008442 <_dtoa_r+0x28a>
 8008428:	2301      	movs	r3, #1
 800842a:	e7f3      	b.n	8008414 <_dtoa_r+0x25c>
 800842c:	2300      	movs	r3, #0
 800842e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008430:	9308      	str	r3, [sp, #32]
 8008432:	9b00      	ldr	r3, [sp, #0]
 8008434:	4413      	add	r3, r2
 8008436:	9302      	str	r3, [sp, #8]
 8008438:	3301      	adds	r3, #1
 800843a:	2b01      	cmp	r3, #1
 800843c:	9303      	str	r3, [sp, #12]
 800843e:	bfb8      	it	lt
 8008440:	2301      	movlt	r3, #1
 8008442:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008444:	2200      	movs	r2, #0
 8008446:	6042      	str	r2, [r0, #4]
 8008448:	2204      	movs	r2, #4
 800844a:	f102 0614 	add.w	r6, r2, #20
 800844e:	429e      	cmp	r6, r3
 8008450:	6841      	ldr	r1, [r0, #4]
 8008452:	d93d      	bls.n	80084d0 <_dtoa_r+0x318>
 8008454:	4620      	mov	r0, r4
 8008456:	f000 fed7 	bl	8009208 <_Balloc>
 800845a:	9001      	str	r0, [sp, #4]
 800845c:	2800      	cmp	r0, #0
 800845e:	d13b      	bne.n	80084d8 <_dtoa_r+0x320>
 8008460:	4b11      	ldr	r3, [pc, #68]	; (80084a8 <_dtoa_r+0x2f0>)
 8008462:	4602      	mov	r2, r0
 8008464:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008468:	e6c0      	b.n	80081ec <_dtoa_r+0x34>
 800846a:	2301      	movs	r3, #1
 800846c:	e7df      	b.n	800842e <_dtoa_r+0x276>
 800846e:	bf00      	nop
 8008470:	636f4361 	.word	0x636f4361
 8008474:	3fd287a7 	.word	0x3fd287a7
 8008478:	8b60c8b3 	.word	0x8b60c8b3
 800847c:	3fc68a28 	.word	0x3fc68a28
 8008480:	509f79fb 	.word	0x509f79fb
 8008484:	3fd34413 	.word	0x3fd34413
 8008488:	0800a549 	.word	0x0800a549
 800848c:	0800a560 	.word	0x0800a560
 8008490:	7ff00000 	.word	0x7ff00000
 8008494:	0800a545 	.word	0x0800a545
 8008498:	0800a53c 	.word	0x0800a53c
 800849c:	0800a519 	.word	0x0800a519
 80084a0:	3ff80000 	.word	0x3ff80000
 80084a4:	0800a6b0 	.word	0x0800a6b0
 80084a8:	0800a5bb 	.word	0x0800a5bb
 80084ac:	2501      	movs	r5, #1
 80084ae:	2300      	movs	r3, #0
 80084b0:	9306      	str	r3, [sp, #24]
 80084b2:	9508      	str	r5, [sp, #32]
 80084b4:	f04f 33ff 	mov.w	r3, #4294967295
 80084b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80084bc:	2200      	movs	r2, #0
 80084be:	2312      	movs	r3, #18
 80084c0:	e7b0      	b.n	8008424 <_dtoa_r+0x26c>
 80084c2:	2301      	movs	r3, #1
 80084c4:	9308      	str	r3, [sp, #32]
 80084c6:	e7f5      	b.n	80084b4 <_dtoa_r+0x2fc>
 80084c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80084ce:	e7b8      	b.n	8008442 <_dtoa_r+0x28a>
 80084d0:	3101      	adds	r1, #1
 80084d2:	6041      	str	r1, [r0, #4]
 80084d4:	0052      	lsls	r2, r2, #1
 80084d6:	e7b8      	b.n	800844a <_dtoa_r+0x292>
 80084d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084da:	9a01      	ldr	r2, [sp, #4]
 80084dc:	601a      	str	r2, [r3, #0]
 80084de:	9b03      	ldr	r3, [sp, #12]
 80084e0:	2b0e      	cmp	r3, #14
 80084e2:	f200 809d 	bhi.w	8008620 <_dtoa_r+0x468>
 80084e6:	2d00      	cmp	r5, #0
 80084e8:	f000 809a 	beq.w	8008620 <_dtoa_r+0x468>
 80084ec:	9b00      	ldr	r3, [sp, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	dd32      	ble.n	8008558 <_dtoa_r+0x3a0>
 80084f2:	4ab7      	ldr	r2, [pc, #732]	; (80087d0 <_dtoa_r+0x618>)
 80084f4:	f003 030f 	and.w	r3, r3, #15
 80084f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80084fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008500:	9b00      	ldr	r3, [sp, #0]
 8008502:	05d8      	lsls	r0, r3, #23
 8008504:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008508:	d516      	bpl.n	8008538 <_dtoa_r+0x380>
 800850a:	4bb2      	ldr	r3, [pc, #712]	; (80087d4 <_dtoa_r+0x61c>)
 800850c:	ec51 0b19 	vmov	r0, r1, d9
 8008510:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008514:	f7f8 f99a 	bl	800084c <__aeabi_ddiv>
 8008518:	f007 070f 	and.w	r7, r7, #15
 800851c:	4682      	mov	sl, r0
 800851e:	468b      	mov	fp, r1
 8008520:	2503      	movs	r5, #3
 8008522:	4eac      	ldr	r6, [pc, #688]	; (80087d4 <_dtoa_r+0x61c>)
 8008524:	b957      	cbnz	r7, 800853c <_dtoa_r+0x384>
 8008526:	4642      	mov	r2, r8
 8008528:	464b      	mov	r3, r9
 800852a:	4650      	mov	r0, sl
 800852c:	4659      	mov	r1, fp
 800852e:	f7f8 f98d 	bl	800084c <__aeabi_ddiv>
 8008532:	4682      	mov	sl, r0
 8008534:	468b      	mov	fp, r1
 8008536:	e028      	b.n	800858a <_dtoa_r+0x3d2>
 8008538:	2502      	movs	r5, #2
 800853a:	e7f2      	b.n	8008522 <_dtoa_r+0x36a>
 800853c:	07f9      	lsls	r1, r7, #31
 800853e:	d508      	bpl.n	8008552 <_dtoa_r+0x39a>
 8008540:	4640      	mov	r0, r8
 8008542:	4649      	mov	r1, r9
 8008544:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008548:	f7f8 f856 	bl	80005f8 <__aeabi_dmul>
 800854c:	3501      	adds	r5, #1
 800854e:	4680      	mov	r8, r0
 8008550:	4689      	mov	r9, r1
 8008552:	107f      	asrs	r7, r7, #1
 8008554:	3608      	adds	r6, #8
 8008556:	e7e5      	b.n	8008524 <_dtoa_r+0x36c>
 8008558:	f000 809b 	beq.w	8008692 <_dtoa_r+0x4da>
 800855c:	9b00      	ldr	r3, [sp, #0]
 800855e:	4f9d      	ldr	r7, [pc, #628]	; (80087d4 <_dtoa_r+0x61c>)
 8008560:	425e      	negs	r6, r3
 8008562:	4b9b      	ldr	r3, [pc, #620]	; (80087d0 <_dtoa_r+0x618>)
 8008564:	f006 020f 	and.w	r2, r6, #15
 8008568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800856c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008570:	ec51 0b19 	vmov	r0, r1, d9
 8008574:	f7f8 f840 	bl	80005f8 <__aeabi_dmul>
 8008578:	1136      	asrs	r6, r6, #4
 800857a:	4682      	mov	sl, r0
 800857c:	468b      	mov	fp, r1
 800857e:	2300      	movs	r3, #0
 8008580:	2502      	movs	r5, #2
 8008582:	2e00      	cmp	r6, #0
 8008584:	d17a      	bne.n	800867c <_dtoa_r+0x4c4>
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1d3      	bne.n	8008532 <_dtoa_r+0x37a>
 800858a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800858c:	2b00      	cmp	r3, #0
 800858e:	f000 8082 	beq.w	8008696 <_dtoa_r+0x4de>
 8008592:	4b91      	ldr	r3, [pc, #580]	; (80087d8 <_dtoa_r+0x620>)
 8008594:	2200      	movs	r2, #0
 8008596:	4650      	mov	r0, sl
 8008598:	4659      	mov	r1, fp
 800859a:	f7f8 fa9f 	bl	8000adc <__aeabi_dcmplt>
 800859e:	2800      	cmp	r0, #0
 80085a0:	d079      	beq.n	8008696 <_dtoa_r+0x4de>
 80085a2:	9b03      	ldr	r3, [sp, #12]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d076      	beq.n	8008696 <_dtoa_r+0x4de>
 80085a8:	9b02      	ldr	r3, [sp, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	dd36      	ble.n	800861c <_dtoa_r+0x464>
 80085ae:	9b00      	ldr	r3, [sp, #0]
 80085b0:	4650      	mov	r0, sl
 80085b2:	4659      	mov	r1, fp
 80085b4:	1e5f      	subs	r7, r3, #1
 80085b6:	2200      	movs	r2, #0
 80085b8:	4b88      	ldr	r3, [pc, #544]	; (80087dc <_dtoa_r+0x624>)
 80085ba:	f7f8 f81d 	bl	80005f8 <__aeabi_dmul>
 80085be:	9e02      	ldr	r6, [sp, #8]
 80085c0:	4682      	mov	sl, r0
 80085c2:	468b      	mov	fp, r1
 80085c4:	3501      	adds	r5, #1
 80085c6:	4628      	mov	r0, r5
 80085c8:	f7f7 ffac 	bl	8000524 <__aeabi_i2d>
 80085cc:	4652      	mov	r2, sl
 80085ce:	465b      	mov	r3, fp
 80085d0:	f7f8 f812 	bl	80005f8 <__aeabi_dmul>
 80085d4:	4b82      	ldr	r3, [pc, #520]	; (80087e0 <_dtoa_r+0x628>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	f7f7 fe58 	bl	800028c <__adddf3>
 80085dc:	46d0      	mov	r8, sl
 80085de:	46d9      	mov	r9, fp
 80085e0:	4682      	mov	sl, r0
 80085e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80085e6:	2e00      	cmp	r6, #0
 80085e8:	d158      	bne.n	800869c <_dtoa_r+0x4e4>
 80085ea:	4b7e      	ldr	r3, [pc, #504]	; (80087e4 <_dtoa_r+0x62c>)
 80085ec:	2200      	movs	r2, #0
 80085ee:	4640      	mov	r0, r8
 80085f0:	4649      	mov	r1, r9
 80085f2:	f7f7 fe49 	bl	8000288 <__aeabi_dsub>
 80085f6:	4652      	mov	r2, sl
 80085f8:	465b      	mov	r3, fp
 80085fa:	4680      	mov	r8, r0
 80085fc:	4689      	mov	r9, r1
 80085fe:	f7f8 fa8b 	bl	8000b18 <__aeabi_dcmpgt>
 8008602:	2800      	cmp	r0, #0
 8008604:	f040 8295 	bne.w	8008b32 <_dtoa_r+0x97a>
 8008608:	4652      	mov	r2, sl
 800860a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800860e:	4640      	mov	r0, r8
 8008610:	4649      	mov	r1, r9
 8008612:	f7f8 fa63 	bl	8000adc <__aeabi_dcmplt>
 8008616:	2800      	cmp	r0, #0
 8008618:	f040 8289 	bne.w	8008b2e <_dtoa_r+0x976>
 800861c:	ec5b ab19 	vmov	sl, fp, d9
 8008620:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008622:	2b00      	cmp	r3, #0
 8008624:	f2c0 8148 	blt.w	80088b8 <_dtoa_r+0x700>
 8008628:	9a00      	ldr	r2, [sp, #0]
 800862a:	2a0e      	cmp	r2, #14
 800862c:	f300 8144 	bgt.w	80088b8 <_dtoa_r+0x700>
 8008630:	4b67      	ldr	r3, [pc, #412]	; (80087d0 <_dtoa_r+0x618>)
 8008632:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008636:	e9d3 8900 	ldrd	r8, r9, [r3]
 800863a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800863c:	2b00      	cmp	r3, #0
 800863e:	f280 80d5 	bge.w	80087ec <_dtoa_r+0x634>
 8008642:	9b03      	ldr	r3, [sp, #12]
 8008644:	2b00      	cmp	r3, #0
 8008646:	f300 80d1 	bgt.w	80087ec <_dtoa_r+0x634>
 800864a:	f040 826f 	bne.w	8008b2c <_dtoa_r+0x974>
 800864e:	4b65      	ldr	r3, [pc, #404]	; (80087e4 <_dtoa_r+0x62c>)
 8008650:	2200      	movs	r2, #0
 8008652:	4640      	mov	r0, r8
 8008654:	4649      	mov	r1, r9
 8008656:	f7f7 ffcf 	bl	80005f8 <__aeabi_dmul>
 800865a:	4652      	mov	r2, sl
 800865c:	465b      	mov	r3, fp
 800865e:	f7f8 fa51 	bl	8000b04 <__aeabi_dcmpge>
 8008662:	9e03      	ldr	r6, [sp, #12]
 8008664:	4637      	mov	r7, r6
 8008666:	2800      	cmp	r0, #0
 8008668:	f040 8245 	bne.w	8008af6 <_dtoa_r+0x93e>
 800866c:	9d01      	ldr	r5, [sp, #4]
 800866e:	2331      	movs	r3, #49	; 0x31
 8008670:	f805 3b01 	strb.w	r3, [r5], #1
 8008674:	9b00      	ldr	r3, [sp, #0]
 8008676:	3301      	adds	r3, #1
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	e240      	b.n	8008afe <_dtoa_r+0x946>
 800867c:	07f2      	lsls	r2, r6, #31
 800867e:	d505      	bpl.n	800868c <_dtoa_r+0x4d4>
 8008680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008684:	f7f7 ffb8 	bl	80005f8 <__aeabi_dmul>
 8008688:	3501      	adds	r5, #1
 800868a:	2301      	movs	r3, #1
 800868c:	1076      	asrs	r6, r6, #1
 800868e:	3708      	adds	r7, #8
 8008690:	e777      	b.n	8008582 <_dtoa_r+0x3ca>
 8008692:	2502      	movs	r5, #2
 8008694:	e779      	b.n	800858a <_dtoa_r+0x3d2>
 8008696:	9f00      	ldr	r7, [sp, #0]
 8008698:	9e03      	ldr	r6, [sp, #12]
 800869a:	e794      	b.n	80085c6 <_dtoa_r+0x40e>
 800869c:	9901      	ldr	r1, [sp, #4]
 800869e:	4b4c      	ldr	r3, [pc, #304]	; (80087d0 <_dtoa_r+0x618>)
 80086a0:	4431      	add	r1, r6
 80086a2:	910d      	str	r1, [sp, #52]	; 0x34
 80086a4:	9908      	ldr	r1, [sp, #32]
 80086a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80086aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086ae:	2900      	cmp	r1, #0
 80086b0:	d043      	beq.n	800873a <_dtoa_r+0x582>
 80086b2:	494d      	ldr	r1, [pc, #308]	; (80087e8 <_dtoa_r+0x630>)
 80086b4:	2000      	movs	r0, #0
 80086b6:	f7f8 f8c9 	bl	800084c <__aeabi_ddiv>
 80086ba:	4652      	mov	r2, sl
 80086bc:	465b      	mov	r3, fp
 80086be:	f7f7 fde3 	bl	8000288 <__aeabi_dsub>
 80086c2:	9d01      	ldr	r5, [sp, #4]
 80086c4:	4682      	mov	sl, r0
 80086c6:	468b      	mov	fp, r1
 80086c8:	4649      	mov	r1, r9
 80086ca:	4640      	mov	r0, r8
 80086cc:	f7f8 fa44 	bl	8000b58 <__aeabi_d2iz>
 80086d0:	4606      	mov	r6, r0
 80086d2:	f7f7 ff27 	bl	8000524 <__aeabi_i2d>
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	4640      	mov	r0, r8
 80086dc:	4649      	mov	r1, r9
 80086de:	f7f7 fdd3 	bl	8000288 <__aeabi_dsub>
 80086e2:	3630      	adds	r6, #48	; 0x30
 80086e4:	f805 6b01 	strb.w	r6, [r5], #1
 80086e8:	4652      	mov	r2, sl
 80086ea:	465b      	mov	r3, fp
 80086ec:	4680      	mov	r8, r0
 80086ee:	4689      	mov	r9, r1
 80086f0:	f7f8 f9f4 	bl	8000adc <__aeabi_dcmplt>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d163      	bne.n	80087c0 <_dtoa_r+0x608>
 80086f8:	4642      	mov	r2, r8
 80086fa:	464b      	mov	r3, r9
 80086fc:	4936      	ldr	r1, [pc, #216]	; (80087d8 <_dtoa_r+0x620>)
 80086fe:	2000      	movs	r0, #0
 8008700:	f7f7 fdc2 	bl	8000288 <__aeabi_dsub>
 8008704:	4652      	mov	r2, sl
 8008706:	465b      	mov	r3, fp
 8008708:	f7f8 f9e8 	bl	8000adc <__aeabi_dcmplt>
 800870c:	2800      	cmp	r0, #0
 800870e:	f040 80b5 	bne.w	800887c <_dtoa_r+0x6c4>
 8008712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008714:	429d      	cmp	r5, r3
 8008716:	d081      	beq.n	800861c <_dtoa_r+0x464>
 8008718:	4b30      	ldr	r3, [pc, #192]	; (80087dc <_dtoa_r+0x624>)
 800871a:	2200      	movs	r2, #0
 800871c:	4650      	mov	r0, sl
 800871e:	4659      	mov	r1, fp
 8008720:	f7f7 ff6a 	bl	80005f8 <__aeabi_dmul>
 8008724:	4b2d      	ldr	r3, [pc, #180]	; (80087dc <_dtoa_r+0x624>)
 8008726:	4682      	mov	sl, r0
 8008728:	468b      	mov	fp, r1
 800872a:	4640      	mov	r0, r8
 800872c:	4649      	mov	r1, r9
 800872e:	2200      	movs	r2, #0
 8008730:	f7f7 ff62 	bl	80005f8 <__aeabi_dmul>
 8008734:	4680      	mov	r8, r0
 8008736:	4689      	mov	r9, r1
 8008738:	e7c6      	b.n	80086c8 <_dtoa_r+0x510>
 800873a:	4650      	mov	r0, sl
 800873c:	4659      	mov	r1, fp
 800873e:	f7f7 ff5b 	bl	80005f8 <__aeabi_dmul>
 8008742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008744:	9d01      	ldr	r5, [sp, #4]
 8008746:	930f      	str	r3, [sp, #60]	; 0x3c
 8008748:	4682      	mov	sl, r0
 800874a:	468b      	mov	fp, r1
 800874c:	4649      	mov	r1, r9
 800874e:	4640      	mov	r0, r8
 8008750:	f7f8 fa02 	bl	8000b58 <__aeabi_d2iz>
 8008754:	4606      	mov	r6, r0
 8008756:	f7f7 fee5 	bl	8000524 <__aeabi_i2d>
 800875a:	3630      	adds	r6, #48	; 0x30
 800875c:	4602      	mov	r2, r0
 800875e:	460b      	mov	r3, r1
 8008760:	4640      	mov	r0, r8
 8008762:	4649      	mov	r1, r9
 8008764:	f7f7 fd90 	bl	8000288 <__aeabi_dsub>
 8008768:	f805 6b01 	strb.w	r6, [r5], #1
 800876c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800876e:	429d      	cmp	r5, r3
 8008770:	4680      	mov	r8, r0
 8008772:	4689      	mov	r9, r1
 8008774:	f04f 0200 	mov.w	r2, #0
 8008778:	d124      	bne.n	80087c4 <_dtoa_r+0x60c>
 800877a:	4b1b      	ldr	r3, [pc, #108]	; (80087e8 <_dtoa_r+0x630>)
 800877c:	4650      	mov	r0, sl
 800877e:	4659      	mov	r1, fp
 8008780:	f7f7 fd84 	bl	800028c <__adddf3>
 8008784:	4602      	mov	r2, r0
 8008786:	460b      	mov	r3, r1
 8008788:	4640      	mov	r0, r8
 800878a:	4649      	mov	r1, r9
 800878c:	f7f8 f9c4 	bl	8000b18 <__aeabi_dcmpgt>
 8008790:	2800      	cmp	r0, #0
 8008792:	d173      	bne.n	800887c <_dtoa_r+0x6c4>
 8008794:	4652      	mov	r2, sl
 8008796:	465b      	mov	r3, fp
 8008798:	4913      	ldr	r1, [pc, #76]	; (80087e8 <_dtoa_r+0x630>)
 800879a:	2000      	movs	r0, #0
 800879c:	f7f7 fd74 	bl	8000288 <__aeabi_dsub>
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	4640      	mov	r0, r8
 80087a6:	4649      	mov	r1, r9
 80087a8:	f7f8 f998 	bl	8000adc <__aeabi_dcmplt>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	f43f af35 	beq.w	800861c <_dtoa_r+0x464>
 80087b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80087b4:	1e6b      	subs	r3, r5, #1
 80087b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80087b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087bc:	2b30      	cmp	r3, #48	; 0x30
 80087be:	d0f8      	beq.n	80087b2 <_dtoa_r+0x5fa>
 80087c0:	9700      	str	r7, [sp, #0]
 80087c2:	e049      	b.n	8008858 <_dtoa_r+0x6a0>
 80087c4:	4b05      	ldr	r3, [pc, #20]	; (80087dc <_dtoa_r+0x624>)
 80087c6:	f7f7 ff17 	bl	80005f8 <__aeabi_dmul>
 80087ca:	4680      	mov	r8, r0
 80087cc:	4689      	mov	r9, r1
 80087ce:	e7bd      	b.n	800874c <_dtoa_r+0x594>
 80087d0:	0800a6b0 	.word	0x0800a6b0
 80087d4:	0800a688 	.word	0x0800a688
 80087d8:	3ff00000 	.word	0x3ff00000
 80087dc:	40240000 	.word	0x40240000
 80087e0:	401c0000 	.word	0x401c0000
 80087e4:	40140000 	.word	0x40140000
 80087e8:	3fe00000 	.word	0x3fe00000
 80087ec:	9d01      	ldr	r5, [sp, #4]
 80087ee:	4656      	mov	r6, sl
 80087f0:	465f      	mov	r7, fp
 80087f2:	4642      	mov	r2, r8
 80087f4:	464b      	mov	r3, r9
 80087f6:	4630      	mov	r0, r6
 80087f8:	4639      	mov	r1, r7
 80087fa:	f7f8 f827 	bl	800084c <__aeabi_ddiv>
 80087fe:	f7f8 f9ab 	bl	8000b58 <__aeabi_d2iz>
 8008802:	4682      	mov	sl, r0
 8008804:	f7f7 fe8e 	bl	8000524 <__aeabi_i2d>
 8008808:	4642      	mov	r2, r8
 800880a:	464b      	mov	r3, r9
 800880c:	f7f7 fef4 	bl	80005f8 <__aeabi_dmul>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4630      	mov	r0, r6
 8008816:	4639      	mov	r1, r7
 8008818:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800881c:	f7f7 fd34 	bl	8000288 <__aeabi_dsub>
 8008820:	f805 6b01 	strb.w	r6, [r5], #1
 8008824:	9e01      	ldr	r6, [sp, #4]
 8008826:	9f03      	ldr	r7, [sp, #12]
 8008828:	1bae      	subs	r6, r5, r6
 800882a:	42b7      	cmp	r7, r6
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	d135      	bne.n	800889e <_dtoa_r+0x6e6>
 8008832:	f7f7 fd2b 	bl	800028c <__adddf3>
 8008836:	4642      	mov	r2, r8
 8008838:	464b      	mov	r3, r9
 800883a:	4606      	mov	r6, r0
 800883c:	460f      	mov	r7, r1
 800883e:	f7f8 f96b 	bl	8000b18 <__aeabi_dcmpgt>
 8008842:	b9d0      	cbnz	r0, 800887a <_dtoa_r+0x6c2>
 8008844:	4642      	mov	r2, r8
 8008846:	464b      	mov	r3, r9
 8008848:	4630      	mov	r0, r6
 800884a:	4639      	mov	r1, r7
 800884c:	f7f8 f93c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008850:	b110      	cbz	r0, 8008858 <_dtoa_r+0x6a0>
 8008852:	f01a 0f01 	tst.w	sl, #1
 8008856:	d110      	bne.n	800887a <_dtoa_r+0x6c2>
 8008858:	4620      	mov	r0, r4
 800885a:	ee18 1a10 	vmov	r1, s16
 800885e:	f000 fd13 	bl	8009288 <_Bfree>
 8008862:	2300      	movs	r3, #0
 8008864:	9800      	ldr	r0, [sp, #0]
 8008866:	702b      	strb	r3, [r5, #0]
 8008868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800886a:	3001      	adds	r0, #1
 800886c:	6018      	str	r0, [r3, #0]
 800886e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008870:	2b00      	cmp	r3, #0
 8008872:	f43f acf1 	beq.w	8008258 <_dtoa_r+0xa0>
 8008876:	601d      	str	r5, [r3, #0]
 8008878:	e4ee      	b.n	8008258 <_dtoa_r+0xa0>
 800887a:	9f00      	ldr	r7, [sp, #0]
 800887c:	462b      	mov	r3, r5
 800887e:	461d      	mov	r5, r3
 8008880:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008884:	2a39      	cmp	r2, #57	; 0x39
 8008886:	d106      	bne.n	8008896 <_dtoa_r+0x6de>
 8008888:	9a01      	ldr	r2, [sp, #4]
 800888a:	429a      	cmp	r2, r3
 800888c:	d1f7      	bne.n	800887e <_dtoa_r+0x6c6>
 800888e:	9901      	ldr	r1, [sp, #4]
 8008890:	2230      	movs	r2, #48	; 0x30
 8008892:	3701      	adds	r7, #1
 8008894:	700a      	strb	r2, [r1, #0]
 8008896:	781a      	ldrb	r2, [r3, #0]
 8008898:	3201      	adds	r2, #1
 800889a:	701a      	strb	r2, [r3, #0]
 800889c:	e790      	b.n	80087c0 <_dtoa_r+0x608>
 800889e:	4ba6      	ldr	r3, [pc, #664]	; (8008b38 <_dtoa_r+0x980>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	f7f7 fea9 	bl	80005f8 <__aeabi_dmul>
 80088a6:	2200      	movs	r2, #0
 80088a8:	2300      	movs	r3, #0
 80088aa:	4606      	mov	r6, r0
 80088ac:	460f      	mov	r7, r1
 80088ae:	f7f8 f90b 	bl	8000ac8 <__aeabi_dcmpeq>
 80088b2:	2800      	cmp	r0, #0
 80088b4:	d09d      	beq.n	80087f2 <_dtoa_r+0x63a>
 80088b6:	e7cf      	b.n	8008858 <_dtoa_r+0x6a0>
 80088b8:	9a08      	ldr	r2, [sp, #32]
 80088ba:	2a00      	cmp	r2, #0
 80088bc:	f000 80d7 	beq.w	8008a6e <_dtoa_r+0x8b6>
 80088c0:	9a06      	ldr	r2, [sp, #24]
 80088c2:	2a01      	cmp	r2, #1
 80088c4:	f300 80ba 	bgt.w	8008a3c <_dtoa_r+0x884>
 80088c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088ca:	2a00      	cmp	r2, #0
 80088cc:	f000 80b2 	beq.w	8008a34 <_dtoa_r+0x87c>
 80088d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088d4:	9e07      	ldr	r6, [sp, #28]
 80088d6:	9d04      	ldr	r5, [sp, #16]
 80088d8:	9a04      	ldr	r2, [sp, #16]
 80088da:	441a      	add	r2, r3
 80088dc:	9204      	str	r2, [sp, #16]
 80088de:	9a05      	ldr	r2, [sp, #20]
 80088e0:	2101      	movs	r1, #1
 80088e2:	441a      	add	r2, r3
 80088e4:	4620      	mov	r0, r4
 80088e6:	9205      	str	r2, [sp, #20]
 80088e8:	f000 fd86 	bl	80093f8 <__i2b>
 80088ec:	4607      	mov	r7, r0
 80088ee:	2d00      	cmp	r5, #0
 80088f0:	dd0c      	ble.n	800890c <_dtoa_r+0x754>
 80088f2:	9b05      	ldr	r3, [sp, #20]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	dd09      	ble.n	800890c <_dtoa_r+0x754>
 80088f8:	42ab      	cmp	r3, r5
 80088fa:	9a04      	ldr	r2, [sp, #16]
 80088fc:	bfa8      	it	ge
 80088fe:	462b      	movge	r3, r5
 8008900:	1ad2      	subs	r2, r2, r3
 8008902:	9204      	str	r2, [sp, #16]
 8008904:	9a05      	ldr	r2, [sp, #20]
 8008906:	1aed      	subs	r5, r5, r3
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	9305      	str	r3, [sp, #20]
 800890c:	9b07      	ldr	r3, [sp, #28]
 800890e:	b31b      	cbz	r3, 8008958 <_dtoa_r+0x7a0>
 8008910:	9b08      	ldr	r3, [sp, #32]
 8008912:	2b00      	cmp	r3, #0
 8008914:	f000 80af 	beq.w	8008a76 <_dtoa_r+0x8be>
 8008918:	2e00      	cmp	r6, #0
 800891a:	dd13      	ble.n	8008944 <_dtoa_r+0x78c>
 800891c:	4639      	mov	r1, r7
 800891e:	4632      	mov	r2, r6
 8008920:	4620      	mov	r0, r4
 8008922:	f000 fe29 	bl	8009578 <__pow5mult>
 8008926:	ee18 2a10 	vmov	r2, s16
 800892a:	4601      	mov	r1, r0
 800892c:	4607      	mov	r7, r0
 800892e:	4620      	mov	r0, r4
 8008930:	f000 fd78 	bl	8009424 <__multiply>
 8008934:	ee18 1a10 	vmov	r1, s16
 8008938:	4680      	mov	r8, r0
 800893a:	4620      	mov	r0, r4
 800893c:	f000 fca4 	bl	8009288 <_Bfree>
 8008940:	ee08 8a10 	vmov	s16, r8
 8008944:	9b07      	ldr	r3, [sp, #28]
 8008946:	1b9a      	subs	r2, r3, r6
 8008948:	d006      	beq.n	8008958 <_dtoa_r+0x7a0>
 800894a:	ee18 1a10 	vmov	r1, s16
 800894e:	4620      	mov	r0, r4
 8008950:	f000 fe12 	bl	8009578 <__pow5mult>
 8008954:	ee08 0a10 	vmov	s16, r0
 8008958:	2101      	movs	r1, #1
 800895a:	4620      	mov	r0, r4
 800895c:	f000 fd4c 	bl	80093f8 <__i2b>
 8008960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008962:	2b00      	cmp	r3, #0
 8008964:	4606      	mov	r6, r0
 8008966:	f340 8088 	ble.w	8008a7a <_dtoa_r+0x8c2>
 800896a:	461a      	mov	r2, r3
 800896c:	4601      	mov	r1, r0
 800896e:	4620      	mov	r0, r4
 8008970:	f000 fe02 	bl	8009578 <__pow5mult>
 8008974:	9b06      	ldr	r3, [sp, #24]
 8008976:	2b01      	cmp	r3, #1
 8008978:	4606      	mov	r6, r0
 800897a:	f340 8081 	ble.w	8008a80 <_dtoa_r+0x8c8>
 800897e:	f04f 0800 	mov.w	r8, #0
 8008982:	6933      	ldr	r3, [r6, #16]
 8008984:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008988:	6918      	ldr	r0, [r3, #16]
 800898a:	f000 fce5 	bl	8009358 <__hi0bits>
 800898e:	f1c0 0020 	rsb	r0, r0, #32
 8008992:	9b05      	ldr	r3, [sp, #20]
 8008994:	4418      	add	r0, r3
 8008996:	f010 001f 	ands.w	r0, r0, #31
 800899a:	f000 8092 	beq.w	8008ac2 <_dtoa_r+0x90a>
 800899e:	f1c0 0320 	rsb	r3, r0, #32
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	f340 808a 	ble.w	8008abc <_dtoa_r+0x904>
 80089a8:	f1c0 001c 	rsb	r0, r0, #28
 80089ac:	9b04      	ldr	r3, [sp, #16]
 80089ae:	4403      	add	r3, r0
 80089b0:	9304      	str	r3, [sp, #16]
 80089b2:	9b05      	ldr	r3, [sp, #20]
 80089b4:	4403      	add	r3, r0
 80089b6:	4405      	add	r5, r0
 80089b8:	9305      	str	r3, [sp, #20]
 80089ba:	9b04      	ldr	r3, [sp, #16]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	dd07      	ble.n	80089d0 <_dtoa_r+0x818>
 80089c0:	ee18 1a10 	vmov	r1, s16
 80089c4:	461a      	mov	r2, r3
 80089c6:	4620      	mov	r0, r4
 80089c8:	f000 fe30 	bl	800962c <__lshift>
 80089cc:	ee08 0a10 	vmov	s16, r0
 80089d0:	9b05      	ldr	r3, [sp, #20]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	dd05      	ble.n	80089e2 <_dtoa_r+0x82a>
 80089d6:	4631      	mov	r1, r6
 80089d8:	461a      	mov	r2, r3
 80089da:	4620      	mov	r0, r4
 80089dc:	f000 fe26 	bl	800962c <__lshift>
 80089e0:	4606      	mov	r6, r0
 80089e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d06e      	beq.n	8008ac6 <_dtoa_r+0x90e>
 80089e8:	ee18 0a10 	vmov	r0, s16
 80089ec:	4631      	mov	r1, r6
 80089ee:	f000 fe8d 	bl	800970c <__mcmp>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	da67      	bge.n	8008ac6 <_dtoa_r+0x90e>
 80089f6:	9b00      	ldr	r3, [sp, #0]
 80089f8:	3b01      	subs	r3, #1
 80089fa:	ee18 1a10 	vmov	r1, s16
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	220a      	movs	r2, #10
 8008a02:	2300      	movs	r3, #0
 8008a04:	4620      	mov	r0, r4
 8008a06:	f000 fc61 	bl	80092cc <__multadd>
 8008a0a:	9b08      	ldr	r3, [sp, #32]
 8008a0c:	ee08 0a10 	vmov	s16, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f000 81b1 	beq.w	8008d78 <_dtoa_r+0xbc0>
 8008a16:	2300      	movs	r3, #0
 8008a18:	4639      	mov	r1, r7
 8008a1a:	220a      	movs	r2, #10
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f000 fc55 	bl	80092cc <__multadd>
 8008a22:	9b02      	ldr	r3, [sp, #8]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	4607      	mov	r7, r0
 8008a28:	f300 808e 	bgt.w	8008b48 <_dtoa_r+0x990>
 8008a2c:	9b06      	ldr	r3, [sp, #24]
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	dc51      	bgt.n	8008ad6 <_dtoa_r+0x91e>
 8008a32:	e089      	b.n	8008b48 <_dtoa_r+0x990>
 8008a34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a3a:	e74b      	b.n	80088d4 <_dtoa_r+0x71c>
 8008a3c:	9b03      	ldr	r3, [sp, #12]
 8008a3e:	1e5e      	subs	r6, r3, #1
 8008a40:	9b07      	ldr	r3, [sp, #28]
 8008a42:	42b3      	cmp	r3, r6
 8008a44:	bfbf      	itttt	lt
 8008a46:	9b07      	ldrlt	r3, [sp, #28]
 8008a48:	9607      	strlt	r6, [sp, #28]
 8008a4a:	1af2      	sublt	r2, r6, r3
 8008a4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008a4e:	bfb6      	itet	lt
 8008a50:	189b      	addlt	r3, r3, r2
 8008a52:	1b9e      	subge	r6, r3, r6
 8008a54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008a56:	9b03      	ldr	r3, [sp, #12]
 8008a58:	bfb8      	it	lt
 8008a5a:	2600      	movlt	r6, #0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	bfb7      	itett	lt
 8008a60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008a64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008a68:	1a9d      	sublt	r5, r3, r2
 8008a6a:	2300      	movlt	r3, #0
 8008a6c:	e734      	b.n	80088d8 <_dtoa_r+0x720>
 8008a6e:	9e07      	ldr	r6, [sp, #28]
 8008a70:	9d04      	ldr	r5, [sp, #16]
 8008a72:	9f08      	ldr	r7, [sp, #32]
 8008a74:	e73b      	b.n	80088ee <_dtoa_r+0x736>
 8008a76:	9a07      	ldr	r2, [sp, #28]
 8008a78:	e767      	b.n	800894a <_dtoa_r+0x792>
 8008a7a:	9b06      	ldr	r3, [sp, #24]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	dc18      	bgt.n	8008ab2 <_dtoa_r+0x8fa>
 8008a80:	f1ba 0f00 	cmp.w	sl, #0
 8008a84:	d115      	bne.n	8008ab2 <_dtoa_r+0x8fa>
 8008a86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a8a:	b993      	cbnz	r3, 8008ab2 <_dtoa_r+0x8fa>
 8008a8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a90:	0d1b      	lsrs	r3, r3, #20
 8008a92:	051b      	lsls	r3, r3, #20
 8008a94:	b183      	cbz	r3, 8008ab8 <_dtoa_r+0x900>
 8008a96:	9b04      	ldr	r3, [sp, #16]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	9304      	str	r3, [sp, #16]
 8008a9c:	9b05      	ldr	r3, [sp, #20]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	9305      	str	r3, [sp, #20]
 8008aa2:	f04f 0801 	mov.w	r8, #1
 8008aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f47f af6a 	bne.w	8008982 <_dtoa_r+0x7ca>
 8008aae:	2001      	movs	r0, #1
 8008ab0:	e76f      	b.n	8008992 <_dtoa_r+0x7da>
 8008ab2:	f04f 0800 	mov.w	r8, #0
 8008ab6:	e7f6      	b.n	8008aa6 <_dtoa_r+0x8ee>
 8008ab8:	4698      	mov	r8, r3
 8008aba:	e7f4      	b.n	8008aa6 <_dtoa_r+0x8ee>
 8008abc:	f43f af7d 	beq.w	80089ba <_dtoa_r+0x802>
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	301c      	adds	r0, #28
 8008ac4:	e772      	b.n	80089ac <_dtoa_r+0x7f4>
 8008ac6:	9b03      	ldr	r3, [sp, #12]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	dc37      	bgt.n	8008b3c <_dtoa_r+0x984>
 8008acc:	9b06      	ldr	r3, [sp, #24]
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	dd34      	ble.n	8008b3c <_dtoa_r+0x984>
 8008ad2:	9b03      	ldr	r3, [sp, #12]
 8008ad4:	9302      	str	r3, [sp, #8]
 8008ad6:	9b02      	ldr	r3, [sp, #8]
 8008ad8:	b96b      	cbnz	r3, 8008af6 <_dtoa_r+0x93e>
 8008ada:	4631      	mov	r1, r6
 8008adc:	2205      	movs	r2, #5
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f000 fbf4 	bl	80092cc <__multadd>
 8008ae4:	4601      	mov	r1, r0
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	ee18 0a10 	vmov	r0, s16
 8008aec:	f000 fe0e 	bl	800970c <__mcmp>
 8008af0:	2800      	cmp	r0, #0
 8008af2:	f73f adbb 	bgt.w	800866c <_dtoa_r+0x4b4>
 8008af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af8:	9d01      	ldr	r5, [sp, #4]
 8008afa:	43db      	mvns	r3, r3
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	f04f 0800 	mov.w	r8, #0
 8008b02:	4631      	mov	r1, r6
 8008b04:	4620      	mov	r0, r4
 8008b06:	f000 fbbf 	bl	8009288 <_Bfree>
 8008b0a:	2f00      	cmp	r7, #0
 8008b0c:	f43f aea4 	beq.w	8008858 <_dtoa_r+0x6a0>
 8008b10:	f1b8 0f00 	cmp.w	r8, #0
 8008b14:	d005      	beq.n	8008b22 <_dtoa_r+0x96a>
 8008b16:	45b8      	cmp	r8, r7
 8008b18:	d003      	beq.n	8008b22 <_dtoa_r+0x96a>
 8008b1a:	4641      	mov	r1, r8
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f000 fbb3 	bl	8009288 <_Bfree>
 8008b22:	4639      	mov	r1, r7
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 fbaf 	bl	8009288 <_Bfree>
 8008b2a:	e695      	b.n	8008858 <_dtoa_r+0x6a0>
 8008b2c:	2600      	movs	r6, #0
 8008b2e:	4637      	mov	r7, r6
 8008b30:	e7e1      	b.n	8008af6 <_dtoa_r+0x93e>
 8008b32:	9700      	str	r7, [sp, #0]
 8008b34:	4637      	mov	r7, r6
 8008b36:	e599      	b.n	800866c <_dtoa_r+0x4b4>
 8008b38:	40240000 	.word	0x40240000
 8008b3c:	9b08      	ldr	r3, [sp, #32]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f000 80ca 	beq.w	8008cd8 <_dtoa_r+0xb20>
 8008b44:	9b03      	ldr	r3, [sp, #12]
 8008b46:	9302      	str	r3, [sp, #8]
 8008b48:	2d00      	cmp	r5, #0
 8008b4a:	dd05      	ble.n	8008b58 <_dtoa_r+0x9a0>
 8008b4c:	4639      	mov	r1, r7
 8008b4e:	462a      	mov	r2, r5
 8008b50:	4620      	mov	r0, r4
 8008b52:	f000 fd6b 	bl	800962c <__lshift>
 8008b56:	4607      	mov	r7, r0
 8008b58:	f1b8 0f00 	cmp.w	r8, #0
 8008b5c:	d05b      	beq.n	8008c16 <_dtoa_r+0xa5e>
 8008b5e:	6879      	ldr	r1, [r7, #4]
 8008b60:	4620      	mov	r0, r4
 8008b62:	f000 fb51 	bl	8009208 <_Balloc>
 8008b66:	4605      	mov	r5, r0
 8008b68:	b928      	cbnz	r0, 8008b76 <_dtoa_r+0x9be>
 8008b6a:	4b87      	ldr	r3, [pc, #540]	; (8008d88 <_dtoa_r+0xbd0>)
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b72:	f7ff bb3b 	b.w	80081ec <_dtoa_r+0x34>
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	3202      	adds	r2, #2
 8008b7a:	0092      	lsls	r2, r2, #2
 8008b7c:	f107 010c 	add.w	r1, r7, #12
 8008b80:	300c      	adds	r0, #12
 8008b82:	f000 fb33 	bl	80091ec <memcpy>
 8008b86:	2201      	movs	r2, #1
 8008b88:	4629      	mov	r1, r5
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f000 fd4e 	bl	800962c <__lshift>
 8008b90:	9b01      	ldr	r3, [sp, #4]
 8008b92:	f103 0901 	add.w	r9, r3, #1
 8008b96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	9305      	str	r3, [sp, #20]
 8008b9e:	f00a 0301 	and.w	r3, sl, #1
 8008ba2:	46b8      	mov	r8, r7
 8008ba4:	9304      	str	r3, [sp, #16]
 8008ba6:	4607      	mov	r7, r0
 8008ba8:	4631      	mov	r1, r6
 8008baa:	ee18 0a10 	vmov	r0, s16
 8008bae:	f7ff fa75 	bl	800809c <quorem>
 8008bb2:	4641      	mov	r1, r8
 8008bb4:	9002      	str	r0, [sp, #8]
 8008bb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008bba:	ee18 0a10 	vmov	r0, s16
 8008bbe:	f000 fda5 	bl	800970c <__mcmp>
 8008bc2:	463a      	mov	r2, r7
 8008bc4:	9003      	str	r0, [sp, #12]
 8008bc6:	4631      	mov	r1, r6
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f000 fdbb 	bl	8009744 <__mdiff>
 8008bce:	68c2      	ldr	r2, [r0, #12]
 8008bd0:	f109 3bff 	add.w	fp, r9, #4294967295
 8008bd4:	4605      	mov	r5, r0
 8008bd6:	bb02      	cbnz	r2, 8008c1a <_dtoa_r+0xa62>
 8008bd8:	4601      	mov	r1, r0
 8008bda:	ee18 0a10 	vmov	r0, s16
 8008bde:	f000 fd95 	bl	800970c <__mcmp>
 8008be2:	4602      	mov	r2, r0
 8008be4:	4629      	mov	r1, r5
 8008be6:	4620      	mov	r0, r4
 8008be8:	9207      	str	r2, [sp, #28]
 8008bea:	f000 fb4d 	bl	8009288 <_Bfree>
 8008bee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008bf2:	ea43 0102 	orr.w	r1, r3, r2
 8008bf6:	9b04      	ldr	r3, [sp, #16]
 8008bf8:	430b      	orrs	r3, r1
 8008bfa:	464d      	mov	r5, r9
 8008bfc:	d10f      	bne.n	8008c1e <_dtoa_r+0xa66>
 8008bfe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c02:	d02a      	beq.n	8008c5a <_dtoa_r+0xaa2>
 8008c04:	9b03      	ldr	r3, [sp, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	dd02      	ble.n	8008c10 <_dtoa_r+0xa58>
 8008c0a:	9b02      	ldr	r3, [sp, #8]
 8008c0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008c10:	f88b a000 	strb.w	sl, [fp]
 8008c14:	e775      	b.n	8008b02 <_dtoa_r+0x94a>
 8008c16:	4638      	mov	r0, r7
 8008c18:	e7ba      	b.n	8008b90 <_dtoa_r+0x9d8>
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	e7e2      	b.n	8008be4 <_dtoa_r+0xa2c>
 8008c1e:	9b03      	ldr	r3, [sp, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	db04      	blt.n	8008c2e <_dtoa_r+0xa76>
 8008c24:	9906      	ldr	r1, [sp, #24]
 8008c26:	430b      	orrs	r3, r1
 8008c28:	9904      	ldr	r1, [sp, #16]
 8008c2a:	430b      	orrs	r3, r1
 8008c2c:	d122      	bne.n	8008c74 <_dtoa_r+0xabc>
 8008c2e:	2a00      	cmp	r2, #0
 8008c30:	ddee      	ble.n	8008c10 <_dtoa_r+0xa58>
 8008c32:	ee18 1a10 	vmov	r1, s16
 8008c36:	2201      	movs	r2, #1
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f000 fcf7 	bl	800962c <__lshift>
 8008c3e:	4631      	mov	r1, r6
 8008c40:	ee08 0a10 	vmov	s16, r0
 8008c44:	f000 fd62 	bl	800970c <__mcmp>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	dc03      	bgt.n	8008c54 <_dtoa_r+0xa9c>
 8008c4c:	d1e0      	bne.n	8008c10 <_dtoa_r+0xa58>
 8008c4e:	f01a 0f01 	tst.w	sl, #1
 8008c52:	d0dd      	beq.n	8008c10 <_dtoa_r+0xa58>
 8008c54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c58:	d1d7      	bne.n	8008c0a <_dtoa_r+0xa52>
 8008c5a:	2339      	movs	r3, #57	; 0x39
 8008c5c:	f88b 3000 	strb.w	r3, [fp]
 8008c60:	462b      	mov	r3, r5
 8008c62:	461d      	mov	r5, r3
 8008c64:	3b01      	subs	r3, #1
 8008c66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c6a:	2a39      	cmp	r2, #57	; 0x39
 8008c6c:	d071      	beq.n	8008d52 <_dtoa_r+0xb9a>
 8008c6e:	3201      	adds	r2, #1
 8008c70:	701a      	strb	r2, [r3, #0]
 8008c72:	e746      	b.n	8008b02 <_dtoa_r+0x94a>
 8008c74:	2a00      	cmp	r2, #0
 8008c76:	dd07      	ble.n	8008c88 <_dtoa_r+0xad0>
 8008c78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c7c:	d0ed      	beq.n	8008c5a <_dtoa_r+0xaa2>
 8008c7e:	f10a 0301 	add.w	r3, sl, #1
 8008c82:	f88b 3000 	strb.w	r3, [fp]
 8008c86:	e73c      	b.n	8008b02 <_dtoa_r+0x94a>
 8008c88:	9b05      	ldr	r3, [sp, #20]
 8008c8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008c8e:	4599      	cmp	r9, r3
 8008c90:	d047      	beq.n	8008d22 <_dtoa_r+0xb6a>
 8008c92:	ee18 1a10 	vmov	r1, s16
 8008c96:	2300      	movs	r3, #0
 8008c98:	220a      	movs	r2, #10
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	f000 fb16 	bl	80092cc <__multadd>
 8008ca0:	45b8      	cmp	r8, r7
 8008ca2:	ee08 0a10 	vmov	s16, r0
 8008ca6:	f04f 0300 	mov.w	r3, #0
 8008caa:	f04f 020a 	mov.w	r2, #10
 8008cae:	4641      	mov	r1, r8
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	d106      	bne.n	8008cc2 <_dtoa_r+0xb0a>
 8008cb4:	f000 fb0a 	bl	80092cc <__multadd>
 8008cb8:	4680      	mov	r8, r0
 8008cba:	4607      	mov	r7, r0
 8008cbc:	f109 0901 	add.w	r9, r9, #1
 8008cc0:	e772      	b.n	8008ba8 <_dtoa_r+0x9f0>
 8008cc2:	f000 fb03 	bl	80092cc <__multadd>
 8008cc6:	4639      	mov	r1, r7
 8008cc8:	4680      	mov	r8, r0
 8008cca:	2300      	movs	r3, #0
 8008ccc:	220a      	movs	r2, #10
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f000 fafc 	bl	80092cc <__multadd>
 8008cd4:	4607      	mov	r7, r0
 8008cd6:	e7f1      	b.n	8008cbc <_dtoa_r+0xb04>
 8008cd8:	9b03      	ldr	r3, [sp, #12]
 8008cda:	9302      	str	r3, [sp, #8]
 8008cdc:	9d01      	ldr	r5, [sp, #4]
 8008cde:	ee18 0a10 	vmov	r0, s16
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	f7ff f9da 	bl	800809c <quorem>
 8008ce8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008cec:	9b01      	ldr	r3, [sp, #4]
 8008cee:	f805 ab01 	strb.w	sl, [r5], #1
 8008cf2:	1aea      	subs	r2, r5, r3
 8008cf4:	9b02      	ldr	r3, [sp, #8]
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	dd09      	ble.n	8008d0e <_dtoa_r+0xb56>
 8008cfa:	ee18 1a10 	vmov	r1, s16
 8008cfe:	2300      	movs	r3, #0
 8008d00:	220a      	movs	r2, #10
 8008d02:	4620      	mov	r0, r4
 8008d04:	f000 fae2 	bl	80092cc <__multadd>
 8008d08:	ee08 0a10 	vmov	s16, r0
 8008d0c:	e7e7      	b.n	8008cde <_dtoa_r+0xb26>
 8008d0e:	9b02      	ldr	r3, [sp, #8]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	bfc8      	it	gt
 8008d14:	461d      	movgt	r5, r3
 8008d16:	9b01      	ldr	r3, [sp, #4]
 8008d18:	bfd8      	it	le
 8008d1a:	2501      	movle	r5, #1
 8008d1c:	441d      	add	r5, r3
 8008d1e:	f04f 0800 	mov.w	r8, #0
 8008d22:	ee18 1a10 	vmov	r1, s16
 8008d26:	2201      	movs	r2, #1
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f000 fc7f 	bl	800962c <__lshift>
 8008d2e:	4631      	mov	r1, r6
 8008d30:	ee08 0a10 	vmov	s16, r0
 8008d34:	f000 fcea 	bl	800970c <__mcmp>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	dc91      	bgt.n	8008c60 <_dtoa_r+0xaa8>
 8008d3c:	d102      	bne.n	8008d44 <_dtoa_r+0xb8c>
 8008d3e:	f01a 0f01 	tst.w	sl, #1
 8008d42:	d18d      	bne.n	8008c60 <_dtoa_r+0xaa8>
 8008d44:	462b      	mov	r3, r5
 8008d46:	461d      	mov	r5, r3
 8008d48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d4c:	2a30      	cmp	r2, #48	; 0x30
 8008d4e:	d0fa      	beq.n	8008d46 <_dtoa_r+0xb8e>
 8008d50:	e6d7      	b.n	8008b02 <_dtoa_r+0x94a>
 8008d52:	9a01      	ldr	r2, [sp, #4]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d184      	bne.n	8008c62 <_dtoa_r+0xaaa>
 8008d58:	9b00      	ldr	r3, [sp, #0]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	2331      	movs	r3, #49	; 0x31
 8008d60:	7013      	strb	r3, [r2, #0]
 8008d62:	e6ce      	b.n	8008b02 <_dtoa_r+0x94a>
 8008d64:	4b09      	ldr	r3, [pc, #36]	; (8008d8c <_dtoa_r+0xbd4>)
 8008d66:	f7ff ba95 	b.w	8008294 <_dtoa_r+0xdc>
 8008d6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f47f aa6e 	bne.w	800824e <_dtoa_r+0x96>
 8008d72:	4b07      	ldr	r3, [pc, #28]	; (8008d90 <_dtoa_r+0xbd8>)
 8008d74:	f7ff ba8e 	b.w	8008294 <_dtoa_r+0xdc>
 8008d78:	9b02      	ldr	r3, [sp, #8]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	dcae      	bgt.n	8008cdc <_dtoa_r+0xb24>
 8008d7e:	9b06      	ldr	r3, [sp, #24]
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	f73f aea8 	bgt.w	8008ad6 <_dtoa_r+0x91e>
 8008d86:	e7a9      	b.n	8008cdc <_dtoa_r+0xb24>
 8008d88:	0800a5bb 	.word	0x0800a5bb
 8008d8c:	0800a518 	.word	0x0800a518
 8008d90:	0800a53c 	.word	0x0800a53c

08008d94 <__sflush_r>:
 8008d94:	898a      	ldrh	r2, [r1, #12]
 8008d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d9a:	4605      	mov	r5, r0
 8008d9c:	0710      	lsls	r0, r2, #28
 8008d9e:	460c      	mov	r4, r1
 8008da0:	d458      	bmi.n	8008e54 <__sflush_r+0xc0>
 8008da2:	684b      	ldr	r3, [r1, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	dc05      	bgt.n	8008db4 <__sflush_r+0x20>
 8008da8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	dc02      	bgt.n	8008db4 <__sflush_r+0x20>
 8008dae:	2000      	movs	r0, #0
 8008db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008db6:	2e00      	cmp	r6, #0
 8008db8:	d0f9      	beq.n	8008dae <__sflush_r+0x1a>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008dc0:	682f      	ldr	r7, [r5, #0]
 8008dc2:	602b      	str	r3, [r5, #0]
 8008dc4:	d032      	beq.n	8008e2c <__sflush_r+0x98>
 8008dc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	075a      	lsls	r2, r3, #29
 8008dcc:	d505      	bpl.n	8008dda <__sflush_r+0x46>
 8008dce:	6863      	ldr	r3, [r4, #4]
 8008dd0:	1ac0      	subs	r0, r0, r3
 8008dd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008dd4:	b10b      	cbz	r3, 8008dda <__sflush_r+0x46>
 8008dd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dd8:	1ac0      	subs	r0, r0, r3
 8008dda:	2300      	movs	r3, #0
 8008ddc:	4602      	mov	r2, r0
 8008dde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008de0:	6a21      	ldr	r1, [r4, #32]
 8008de2:	4628      	mov	r0, r5
 8008de4:	47b0      	blx	r6
 8008de6:	1c43      	adds	r3, r0, #1
 8008de8:	89a3      	ldrh	r3, [r4, #12]
 8008dea:	d106      	bne.n	8008dfa <__sflush_r+0x66>
 8008dec:	6829      	ldr	r1, [r5, #0]
 8008dee:	291d      	cmp	r1, #29
 8008df0:	d82c      	bhi.n	8008e4c <__sflush_r+0xb8>
 8008df2:	4a2a      	ldr	r2, [pc, #168]	; (8008e9c <__sflush_r+0x108>)
 8008df4:	40ca      	lsrs	r2, r1
 8008df6:	07d6      	lsls	r6, r2, #31
 8008df8:	d528      	bpl.n	8008e4c <__sflush_r+0xb8>
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	6062      	str	r2, [r4, #4]
 8008dfe:	04d9      	lsls	r1, r3, #19
 8008e00:	6922      	ldr	r2, [r4, #16]
 8008e02:	6022      	str	r2, [r4, #0]
 8008e04:	d504      	bpl.n	8008e10 <__sflush_r+0x7c>
 8008e06:	1c42      	adds	r2, r0, #1
 8008e08:	d101      	bne.n	8008e0e <__sflush_r+0x7a>
 8008e0a:	682b      	ldr	r3, [r5, #0]
 8008e0c:	b903      	cbnz	r3, 8008e10 <__sflush_r+0x7c>
 8008e0e:	6560      	str	r0, [r4, #84]	; 0x54
 8008e10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e12:	602f      	str	r7, [r5, #0]
 8008e14:	2900      	cmp	r1, #0
 8008e16:	d0ca      	beq.n	8008dae <__sflush_r+0x1a>
 8008e18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e1c:	4299      	cmp	r1, r3
 8008e1e:	d002      	beq.n	8008e26 <__sflush_r+0x92>
 8008e20:	4628      	mov	r0, r5
 8008e22:	f000 fd8b 	bl	800993c <_free_r>
 8008e26:	2000      	movs	r0, #0
 8008e28:	6360      	str	r0, [r4, #52]	; 0x34
 8008e2a:	e7c1      	b.n	8008db0 <__sflush_r+0x1c>
 8008e2c:	6a21      	ldr	r1, [r4, #32]
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4628      	mov	r0, r5
 8008e32:	47b0      	blx	r6
 8008e34:	1c41      	adds	r1, r0, #1
 8008e36:	d1c7      	bne.n	8008dc8 <__sflush_r+0x34>
 8008e38:	682b      	ldr	r3, [r5, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d0c4      	beq.n	8008dc8 <__sflush_r+0x34>
 8008e3e:	2b1d      	cmp	r3, #29
 8008e40:	d001      	beq.n	8008e46 <__sflush_r+0xb2>
 8008e42:	2b16      	cmp	r3, #22
 8008e44:	d101      	bne.n	8008e4a <__sflush_r+0xb6>
 8008e46:	602f      	str	r7, [r5, #0]
 8008e48:	e7b1      	b.n	8008dae <__sflush_r+0x1a>
 8008e4a:	89a3      	ldrh	r3, [r4, #12]
 8008e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e50:	81a3      	strh	r3, [r4, #12]
 8008e52:	e7ad      	b.n	8008db0 <__sflush_r+0x1c>
 8008e54:	690f      	ldr	r7, [r1, #16]
 8008e56:	2f00      	cmp	r7, #0
 8008e58:	d0a9      	beq.n	8008dae <__sflush_r+0x1a>
 8008e5a:	0793      	lsls	r3, r2, #30
 8008e5c:	680e      	ldr	r6, [r1, #0]
 8008e5e:	bf08      	it	eq
 8008e60:	694b      	ldreq	r3, [r1, #20]
 8008e62:	600f      	str	r7, [r1, #0]
 8008e64:	bf18      	it	ne
 8008e66:	2300      	movne	r3, #0
 8008e68:	eba6 0807 	sub.w	r8, r6, r7
 8008e6c:	608b      	str	r3, [r1, #8]
 8008e6e:	f1b8 0f00 	cmp.w	r8, #0
 8008e72:	dd9c      	ble.n	8008dae <__sflush_r+0x1a>
 8008e74:	6a21      	ldr	r1, [r4, #32]
 8008e76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e78:	4643      	mov	r3, r8
 8008e7a:	463a      	mov	r2, r7
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	47b0      	blx	r6
 8008e80:	2800      	cmp	r0, #0
 8008e82:	dc06      	bgt.n	8008e92 <__sflush_r+0xfe>
 8008e84:	89a3      	ldrh	r3, [r4, #12]
 8008e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e8a:	81a3      	strh	r3, [r4, #12]
 8008e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e90:	e78e      	b.n	8008db0 <__sflush_r+0x1c>
 8008e92:	4407      	add	r7, r0
 8008e94:	eba8 0800 	sub.w	r8, r8, r0
 8008e98:	e7e9      	b.n	8008e6e <__sflush_r+0xda>
 8008e9a:	bf00      	nop
 8008e9c:	20400001 	.word	0x20400001

08008ea0 <_fflush_r>:
 8008ea0:	b538      	push	{r3, r4, r5, lr}
 8008ea2:	690b      	ldr	r3, [r1, #16]
 8008ea4:	4605      	mov	r5, r0
 8008ea6:	460c      	mov	r4, r1
 8008ea8:	b913      	cbnz	r3, 8008eb0 <_fflush_r+0x10>
 8008eaa:	2500      	movs	r5, #0
 8008eac:	4628      	mov	r0, r5
 8008eae:	bd38      	pop	{r3, r4, r5, pc}
 8008eb0:	b118      	cbz	r0, 8008eba <_fflush_r+0x1a>
 8008eb2:	6983      	ldr	r3, [r0, #24]
 8008eb4:	b90b      	cbnz	r3, 8008eba <_fflush_r+0x1a>
 8008eb6:	f000 f887 	bl	8008fc8 <__sinit>
 8008eba:	4b14      	ldr	r3, [pc, #80]	; (8008f0c <_fflush_r+0x6c>)
 8008ebc:	429c      	cmp	r4, r3
 8008ebe:	d11b      	bne.n	8008ef8 <_fflush_r+0x58>
 8008ec0:	686c      	ldr	r4, [r5, #4]
 8008ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0ef      	beq.n	8008eaa <_fflush_r+0xa>
 8008eca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ecc:	07d0      	lsls	r0, r2, #31
 8008ece:	d404      	bmi.n	8008eda <_fflush_r+0x3a>
 8008ed0:	0599      	lsls	r1, r3, #22
 8008ed2:	d402      	bmi.n	8008eda <_fflush_r+0x3a>
 8008ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ed6:	f000 f91a 	bl	800910e <__retarget_lock_acquire_recursive>
 8008eda:	4628      	mov	r0, r5
 8008edc:	4621      	mov	r1, r4
 8008ede:	f7ff ff59 	bl	8008d94 <__sflush_r>
 8008ee2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ee4:	07da      	lsls	r2, r3, #31
 8008ee6:	4605      	mov	r5, r0
 8008ee8:	d4e0      	bmi.n	8008eac <_fflush_r+0xc>
 8008eea:	89a3      	ldrh	r3, [r4, #12]
 8008eec:	059b      	lsls	r3, r3, #22
 8008eee:	d4dd      	bmi.n	8008eac <_fflush_r+0xc>
 8008ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ef2:	f000 f90d 	bl	8009110 <__retarget_lock_release_recursive>
 8008ef6:	e7d9      	b.n	8008eac <_fflush_r+0xc>
 8008ef8:	4b05      	ldr	r3, [pc, #20]	; (8008f10 <_fflush_r+0x70>)
 8008efa:	429c      	cmp	r4, r3
 8008efc:	d101      	bne.n	8008f02 <_fflush_r+0x62>
 8008efe:	68ac      	ldr	r4, [r5, #8]
 8008f00:	e7df      	b.n	8008ec2 <_fflush_r+0x22>
 8008f02:	4b04      	ldr	r3, [pc, #16]	; (8008f14 <_fflush_r+0x74>)
 8008f04:	429c      	cmp	r4, r3
 8008f06:	bf08      	it	eq
 8008f08:	68ec      	ldreq	r4, [r5, #12]
 8008f0a:	e7da      	b.n	8008ec2 <_fflush_r+0x22>
 8008f0c:	0800a5ec 	.word	0x0800a5ec
 8008f10:	0800a60c 	.word	0x0800a60c
 8008f14:	0800a5cc 	.word	0x0800a5cc

08008f18 <std>:
 8008f18:	2300      	movs	r3, #0
 8008f1a:	b510      	push	{r4, lr}
 8008f1c:	4604      	mov	r4, r0
 8008f1e:	e9c0 3300 	strd	r3, r3, [r0]
 8008f22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f26:	6083      	str	r3, [r0, #8]
 8008f28:	8181      	strh	r1, [r0, #12]
 8008f2a:	6643      	str	r3, [r0, #100]	; 0x64
 8008f2c:	81c2      	strh	r2, [r0, #14]
 8008f2e:	6183      	str	r3, [r0, #24]
 8008f30:	4619      	mov	r1, r3
 8008f32:	2208      	movs	r2, #8
 8008f34:	305c      	adds	r0, #92	; 0x5c
 8008f36:	f7fe fad1 	bl	80074dc <memset>
 8008f3a:	4b05      	ldr	r3, [pc, #20]	; (8008f50 <std+0x38>)
 8008f3c:	6263      	str	r3, [r4, #36]	; 0x24
 8008f3e:	4b05      	ldr	r3, [pc, #20]	; (8008f54 <std+0x3c>)
 8008f40:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f42:	4b05      	ldr	r3, [pc, #20]	; (8008f58 <std+0x40>)
 8008f44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f46:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <std+0x44>)
 8008f48:	6224      	str	r4, [r4, #32]
 8008f4a:	6323      	str	r3, [r4, #48]	; 0x30
 8008f4c:	bd10      	pop	{r4, pc}
 8008f4e:	bf00      	nop
 8008f50:	0800a089 	.word	0x0800a089
 8008f54:	0800a0ab 	.word	0x0800a0ab
 8008f58:	0800a0e3 	.word	0x0800a0e3
 8008f5c:	0800a107 	.word	0x0800a107

08008f60 <_cleanup_r>:
 8008f60:	4901      	ldr	r1, [pc, #4]	; (8008f68 <_cleanup_r+0x8>)
 8008f62:	f000 b8af 	b.w	80090c4 <_fwalk_reent>
 8008f66:	bf00      	nop
 8008f68:	08008ea1 	.word	0x08008ea1

08008f6c <__sfmoreglue>:
 8008f6c:	b570      	push	{r4, r5, r6, lr}
 8008f6e:	2268      	movs	r2, #104	; 0x68
 8008f70:	1e4d      	subs	r5, r1, #1
 8008f72:	4355      	muls	r5, r2
 8008f74:	460e      	mov	r6, r1
 8008f76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f7a:	f000 fd4b 	bl	8009a14 <_malloc_r>
 8008f7e:	4604      	mov	r4, r0
 8008f80:	b140      	cbz	r0, 8008f94 <__sfmoreglue+0x28>
 8008f82:	2100      	movs	r1, #0
 8008f84:	e9c0 1600 	strd	r1, r6, [r0]
 8008f88:	300c      	adds	r0, #12
 8008f8a:	60a0      	str	r0, [r4, #8]
 8008f8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f90:	f7fe faa4 	bl	80074dc <memset>
 8008f94:	4620      	mov	r0, r4
 8008f96:	bd70      	pop	{r4, r5, r6, pc}

08008f98 <__sfp_lock_acquire>:
 8008f98:	4801      	ldr	r0, [pc, #4]	; (8008fa0 <__sfp_lock_acquire+0x8>)
 8008f9a:	f000 b8b8 	b.w	800910e <__retarget_lock_acquire_recursive>
 8008f9e:	bf00      	nop
 8008fa0:	200004dd 	.word	0x200004dd

08008fa4 <__sfp_lock_release>:
 8008fa4:	4801      	ldr	r0, [pc, #4]	; (8008fac <__sfp_lock_release+0x8>)
 8008fa6:	f000 b8b3 	b.w	8009110 <__retarget_lock_release_recursive>
 8008faa:	bf00      	nop
 8008fac:	200004dd 	.word	0x200004dd

08008fb0 <__sinit_lock_acquire>:
 8008fb0:	4801      	ldr	r0, [pc, #4]	; (8008fb8 <__sinit_lock_acquire+0x8>)
 8008fb2:	f000 b8ac 	b.w	800910e <__retarget_lock_acquire_recursive>
 8008fb6:	bf00      	nop
 8008fb8:	200004de 	.word	0x200004de

08008fbc <__sinit_lock_release>:
 8008fbc:	4801      	ldr	r0, [pc, #4]	; (8008fc4 <__sinit_lock_release+0x8>)
 8008fbe:	f000 b8a7 	b.w	8009110 <__retarget_lock_release_recursive>
 8008fc2:	bf00      	nop
 8008fc4:	200004de 	.word	0x200004de

08008fc8 <__sinit>:
 8008fc8:	b510      	push	{r4, lr}
 8008fca:	4604      	mov	r4, r0
 8008fcc:	f7ff fff0 	bl	8008fb0 <__sinit_lock_acquire>
 8008fd0:	69a3      	ldr	r3, [r4, #24]
 8008fd2:	b11b      	cbz	r3, 8008fdc <__sinit+0x14>
 8008fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fd8:	f7ff bff0 	b.w	8008fbc <__sinit_lock_release>
 8008fdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008fe0:	6523      	str	r3, [r4, #80]	; 0x50
 8008fe2:	4b13      	ldr	r3, [pc, #76]	; (8009030 <__sinit+0x68>)
 8008fe4:	4a13      	ldr	r2, [pc, #76]	; (8009034 <__sinit+0x6c>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008fea:	42a3      	cmp	r3, r4
 8008fec:	bf04      	itt	eq
 8008fee:	2301      	moveq	r3, #1
 8008ff0:	61a3      	streq	r3, [r4, #24]
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f000 f820 	bl	8009038 <__sfp>
 8008ff8:	6060      	str	r0, [r4, #4]
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f000 f81c 	bl	8009038 <__sfp>
 8009000:	60a0      	str	r0, [r4, #8]
 8009002:	4620      	mov	r0, r4
 8009004:	f000 f818 	bl	8009038 <__sfp>
 8009008:	2200      	movs	r2, #0
 800900a:	60e0      	str	r0, [r4, #12]
 800900c:	2104      	movs	r1, #4
 800900e:	6860      	ldr	r0, [r4, #4]
 8009010:	f7ff ff82 	bl	8008f18 <std>
 8009014:	68a0      	ldr	r0, [r4, #8]
 8009016:	2201      	movs	r2, #1
 8009018:	2109      	movs	r1, #9
 800901a:	f7ff ff7d 	bl	8008f18 <std>
 800901e:	68e0      	ldr	r0, [r4, #12]
 8009020:	2202      	movs	r2, #2
 8009022:	2112      	movs	r1, #18
 8009024:	f7ff ff78 	bl	8008f18 <std>
 8009028:	2301      	movs	r3, #1
 800902a:	61a3      	str	r3, [r4, #24]
 800902c:	e7d2      	b.n	8008fd4 <__sinit+0xc>
 800902e:	bf00      	nop
 8009030:	0800a504 	.word	0x0800a504
 8009034:	08008f61 	.word	0x08008f61

08009038 <__sfp>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	4607      	mov	r7, r0
 800903c:	f7ff ffac 	bl	8008f98 <__sfp_lock_acquire>
 8009040:	4b1e      	ldr	r3, [pc, #120]	; (80090bc <__sfp+0x84>)
 8009042:	681e      	ldr	r6, [r3, #0]
 8009044:	69b3      	ldr	r3, [r6, #24]
 8009046:	b913      	cbnz	r3, 800904e <__sfp+0x16>
 8009048:	4630      	mov	r0, r6
 800904a:	f7ff ffbd 	bl	8008fc8 <__sinit>
 800904e:	3648      	adds	r6, #72	; 0x48
 8009050:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009054:	3b01      	subs	r3, #1
 8009056:	d503      	bpl.n	8009060 <__sfp+0x28>
 8009058:	6833      	ldr	r3, [r6, #0]
 800905a:	b30b      	cbz	r3, 80090a0 <__sfp+0x68>
 800905c:	6836      	ldr	r6, [r6, #0]
 800905e:	e7f7      	b.n	8009050 <__sfp+0x18>
 8009060:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009064:	b9d5      	cbnz	r5, 800909c <__sfp+0x64>
 8009066:	4b16      	ldr	r3, [pc, #88]	; (80090c0 <__sfp+0x88>)
 8009068:	60e3      	str	r3, [r4, #12]
 800906a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800906e:	6665      	str	r5, [r4, #100]	; 0x64
 8009070:	f000 f84c 	bl	800910c <__retarget_lock_init_recursive>
 8009074:	f7ff ff96 	bl	8008fa4 <__sfp_lock_release>
 8009078:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800907c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009080:	6025      	str	r5, [r4, #0]
 8009082:	61a5      	str	r5, [r4, #24]
 8009084:	2208      	movs	r2, #8
 8009086:	4629      	mov	r1, r5
 8009088:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800908c:	f7fe fa26 	bl	80074dc <memset>
 8009090:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009094:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009098:	4620      	mov	r0, r4
 800909a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800909c:	3468      	adds	r4, #104	; 0x68
 800909e:	e7d9      	b.n	8009054 <__sfp+0x1c>
 80090a0:	2104      	movs	r1, #4
 80090a2:	4638      	mov	r0, r7
 80090a4:	f7ff ff62 	bl	8008f6c <__sfmoreglue>
 80090a8:	4604      	mov	r4, r0
 80090aa:	6030      	str	r0, [r6, #0]
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d1d5      	bne.n	800905c <__sfp+0x24>
 80090b0:	f7ff ff78 	bl	8008fa4 <__sfp_lock_release>
 80090b4:	230c      	movs	r3, #12
 80090b6:	603b      	str	r3, [r7, #0]
 80090b8:	e7ee      	b.n	8009098 <__sfp+0x60>
 80090ba:	bf00      	nop
 80090bc:	0800a504 	.word	0x0800a504
 80090c0:	ffff0001 	.word	0xffff0001

080090c4 <_fwalk_reent>:
 80090c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090c8:	4606      	mov	r6, r0
 80090ca:	4688      	mov	r8, r1
 80090cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80090d0:	2700      	movs	r7, #0
 80090d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090d6:	f1b9 0901 	subs.w	r9, r9, #1
 80090da:	d505      	bpl.n	80090e8 <_fwalk_reent+0x24>
 80090dc:	6824      	ldr	r4, [r4, #0]
 80090de:	2c00      	cmp	r4, #0
 80090e0:	d1f7      	bne.n	80090d2 <_fwalk_reent+0xe>
 80090e2:	4638      	mov	r0, r7
 80090e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090e8:	89ab      	ldrh	r3, [r5, #12]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d907      	bls.n	80090fe <_fwalk_reent+0x3a>
 80090ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090f2:	3301      	adds	r3, #1
 80090f4:	d003      	beq.n	80090fe <_fwalk_reent+0x3a>
 80090f6:	4629      	mov	r1, r5
 80090f8:	4630      	mov	r0, r6
 80090fa:	47c0      	blx	r8
 80090fc:	4307      	orrs	r7, r0
 80090fe:	3568      	adds	r5, #104	; 0x68
 8009100:	e7e9      	b.n	80090d6 <_fwalk_reent+0x12>
	...

08009104 <_localeconv_r>:
 8009104:	4800      	ldr	r0, [pc, #0]	; (8009108 <_localeconv_r+0x4>)
 8009106:	4770      	bx	lr
 8009108:	200001bc 	.word	0x200001bc

0800910c <__retarget_lock_init_recursive>:
 800910c:	4770      	bx	lr

0800910e <__retarget_lock_acquire_recursive>:
 800910e:	4770      	bx	lr

08009110 <__retarget_lock_release_recursive>:
 8009110:	4770      	bx	lr

08009112 <__swhatbuf_r>:
 8009112:	b570      	push	{r4, r5, r6, lr}
 8009114:	460e      	mov	r6, r1
 8009116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800911a:	2900      	cmp	r1, #0
 800911c:	b096      	sub	sp, #88	; 0x58
 800911e:	4614      	mov	r4, r2
 8009120:	461d      	mov	r5, r3
 8009122:	da08      	bge.n	8009136 <__swhatbuf_r+0x24>
 8009124:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	602a      	str	r2, [r5, #0]
 800912c:	061a      	lsls	r2, r3, #24
 800912e:	d410      	bmi.n	8009152 <__swhatbuf_r+0x40>
 8009130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009134:	e00e      	b.n	8009154 <__swhatbuf_r+0x42>
 8009136:	466a      	mov	r2, sp
 8009138:	f001 f83c 	bl	800a1b4 <_fstat_r>
 800913c:	2800      	cmp	r0, #0
 800913e:	dbf1      	blt.n	8009124 <__swhatbuf_r+0x12>
 8009140:	9a01      	ldr	r2, [sp, #4]
 8009142:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009146:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800914a:	425a      	negs	r2, r3
 800914c:	415a      	adcs	r2, r3
 800914e:	602a      	str	r2, [r5, #0]
 8009150:	e7ee      	b.n	8009130 <__swhatbuf_r+0x1e>
 8009152:	2340      	movs	r3, #64	; 0x40
 8009154:	2000      	movs	r0, #0
 8009156:	6023      	str	r3, [r4, #0]
 8009158:	b016      	add	sp, #88	; 0x58
 800915a:	bd70      	pop	{r4, r5, r6, pc}

0800915c <__smakebuf_r>:
 800915c:	898b      	ldrh	r3, [r1, #12]
 800915e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009160:	079d      	lsls	r5, r3, #30
 8009162:	4606      	mov	r6, r0
 8009164:	460c      	mov	r4, r1
 8009166:	d507      	bpl.n	8009178 <__smakebuf_r+0x1c>
 8009168:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	6123      	str	r3, [r4, #16]
 8009170:	2301      	movs	r3, #1
 8009172:	6163      	str	r3, [r4, #20]
 8009174:	b002      	add	sp, #8
 8009176:	bd70      	pop	{r4, r5, r6, pc}
 8009178:	ab01      	add	r3, sp, #4
 800917a:	466a      	mov	r2, sp
 800917c:	f7ff ffc9 	bl	8009112 <__swhatbuf_r>
 8009180:	9900      	ldr	r1, [sp, #0]
 8009182:	4605      	mov	r5, r0
 8009184:	4630      	mov	r0, r6
 8009186:	f000 fc45 	bl	8009a14 <_malloc_r>
 800918a:	b948      	cbnz	r0, 80091a0 <__smakebuf_r+0x44>
 800918c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009190:	059a      	lsls	r2, r3, #22
 8009192:	d4ef      	bmi.n	8009174 <__smakebuf_r+0x18>
 8009194:	f023 0303 	bic.w	r3, r3, #3
 8009198:	f043 0302 	orr.w	r3, r3, #2
 800919c:	81a3      	strh	r3, [r4, #12]
 800919e:	e7e3      	b.n	8009168 <__smakebuf_r+0xc>
 80091a0:	4b0d      	ldr	r3, [pc, #52]	; (80091d8 <__smakebuf_r+0x7c>)
 80091a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	6020      	str	r0, [r4, #0]
 80091a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ac:	81a3      	strh	r3, [r4, #12]
 80091ae:	9b00      	ldr	r3, [sp, #0]
 80091b0:	6163      	str	r3, [r4, #20]
 80091b2:	9b01      	ldr	r3, [sp, #4]
 80091b4:	6120      	str	r0, [r4, #16]
 80091b6:	b15b      	cbz	r3, 80091d0 <__smakebuf_r+0x74>
 80091b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091bc:	4630      	mov	r0, r6
 80091be:	f001 f80b 	bl	800a1d8 <_isatty_r>
 80091c2:	b128      	cbz	r0, 80091d0 <__smakebuf_r+0x74>
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	f023 0303 	bic.w	r3, r3, #3
 80091ca:	f043 0301 	orr.w	r3, r3, #1
 80091ce:	81a3      	strh	r3, [r4, #12]
 80091d0:	89a0      	ldrh	r0, [r4, #12]
 80091d2:	4305      	orrs	r5, r0
 80091d4:	81a5      	strh	r5, [r4, #12]
 80091d6:	e7cd      	b.n	8009174 <__smakebuf_r+0x18>
 80091d8:	08008f61 	.word	0x08008f61

080091dc <malloc>:
 80091dc:	4b02      	ldr	r3, [pc, #8]	; (80091e8 <malloc+0xc>)
 80091de:	4601      	mov	r1, r0
 80091e0:	6818      	ldr	r0, [r3, #0]
 80091e2:	f000 bc17 	b.w	8009a14 <_malloc_r>
 80091e6:	bf00      	nop
 80091e8:	20000068 	.word	0x20000068

080091ec <memcpy>:
 80091ec:	440a      	add	r2, r1
 80091ee:	4291      	cmp	r1, r2
 80091f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80091f4:	d100      	bne.n	80091f8 <memcpy+0xc>
 80091f6:	4770      	bx	lr
 80091f8:	b510      	push	{r4, lr}
 80091fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009202:	4291      	cmp	r1, r2
 8009204:	d1f9      	bne.n	80091fa <memcpy+0xe>
 8009206:	bd10      	pop	{r4, pc}

08009208 <_Balloc>:
 8009208:	b570      	push	{r4, r5, r6, lr}
 800920a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800920c:	4604      	mov	r4, r0
 800920e:	460d      	mov	r5, r1
 8009210:	b976      	cbnz	r6, 8009230 <_Balloc+0x28>
 8009212:	2010      	movs	r0, #16
 8009214:	f7ff ffe2 	bl	80091dc <malloc>
 8009218:	4602      	mov	r2, r0
 800921a:	6260      	str	r0, [r4, #36]	; 0x24
 800921c:	b920      	cbnz	r0, 8009228 <_Balloc+0x20>
 800921e:	4b18      	ldr	r3, [pc, #96]	; (8009280 <_Balloc+0x78>)
 8009220:	4818      	ldr	r0, [pc, #96]	; (8009284 <_Balloc+0x7c>)
 8009222:	2166      	movs	r1, #102	; 0x66
 8009224:	f000 ff86 	bl	800a134 <__assert_func>
 8009228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800922c:	6006      	str	r6, [r0, #0]
 800922e:	60c6      	str	r6, [r0, #12]
 8009230:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009232:	68f3      	ldr	r3, [r6, #12]
 8009234:	b183      	cbz	r3, 8009258 <_Balloc+0x50>
 8009236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800923e:	b9b8      	cbnz	r0, 8009270 <_Balloc+0x68>
 8009240:	2101      	movs	r1, #1
 8009242:	fa01 f605 	lsl.w	r6, r1, r5
 8009246:	1d72      	adds	r2, r6, #5
 8009248:	0092      	lsls	r2, r2, #2
 800924a:	4620      	mov	r0, r4
 800924c:	f000 fb60 	bl	8009910 <_calloc_r>
 8009250:	b160      	cbz	r0, 800926c <_Balloc+0x64>
 8009252:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009256:	e00e      	b.n	8009276 <_Balloc+0x6e>
 8009258:	2221      	movs	r2, #33	; 0x21
 800925a:	2104      	movs	r1, #4
 800925c:	4620      	mov	r0, r4
 800925e:	f000 fb57 	bl	8009910 <_calloc_r>
 8009262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009264:	60f0      	str	r0, [r6, #12]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e4      	bne.n	8009236 <_Balloc+0x2e>
 800926c:	2000      	movs	r0, #0
 800926e:	bd70      	pop	{r4, r5, r6, pc}
 8009270:	6802      	ldr	r2, [r0, #0]
 8009272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009276:	2300      	movs	r3, #0
 8009278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800927c:	e7f7      	b.n	800926e <_Balloc+0x66>
 800927e:	bf00      	nop
 8009280:	0800a549 	.word	0x0800a549
 8009284:	0800a62c 	.word	0x0800a62c

08009288 <_Bfree>:
 8009288:	b570      	push	{r4, r5, r6, lr}
 800928a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800928c:	4605      	mov	r5, r0
 800928e:	460c      	mov	r4, r1
 8009290:	b976      	cbnz	r6, 80092b0 <_Bfree+0x28>
 8009292:	2010      	movs	r0, #16
 8009294:	f7ff ffa2 	bl	80091dc <malloc>
 8009298:	4602      	mov	r2, r0
 800929a:	6268      	str	r0, [r5, #36]	; 0x24
 800929c:	b920      	cbnz	r0, 80092a8 <_Bfree+0x20>
 800929e:	4b09      	ldr	r3, [pc, #36]	; (80092c4 <_Bfree+0x3c>)
 80092a0:	4809      	ldr	r0, [pc, #36]	; (80092c8 <_Bfree+0x40>)
 80092a2:	218a      	movs	r1, #138	; 0x8a
 80092a4:	f000 ff46 	bl	800a134 <__assert_func>
 80092a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092ac:	6006      	str	r6, [r0, #0]
 80092ae:	60c6      	str	r6, [r0, #12]
 80092b0:	b13c      	cbz	r4, 80092c2 <_Bfree+0x3a>
 80092b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80092b4:	6862      	ldr	r2, [r4, #4]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092bc:	6021      	str	r1, [r4, #0]
 80092be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80092c2:	bd70      	pop	{r4, r5, r6, pc}
 80092c4:	0800a549 	.word	0x0800a549
 80092c8:	0800a62c 	.word	0x0800a62c

080092cc <__multadd>:
 80092cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092d0:	690d      	ldr	r5, [r1, #16]
 80092d2:	4607      	mov	r7, r0
 80092d4:	460c      	mov	r4, r1
 80092d6:	461e      	mov	r6, r3
 80092d8:	f101 0c14 	add.w	ip, r1, #20
 80092dc:	2000      	movs	r0, #0
 80092de:	f8dc 3000 	ldr.w	r3, [ip]
 80092e2:	b299      	uxth	r1, r3
 80092e4:	fb02 6101 	mla	r1, r2, r1, r6
 80092e8:	0c1e      	lsrs	r6, r3, #16
 80092ea:	0c0b      	lsrs	r3, r1, #16
 80092ec:	fb02 3306 	mla	r3, r2, r6, r3
 80092f0:	b289      	uxth	r1, r1
 80092f2:	3001      	adds	r0, #1
 80092f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092f8:	4285      	cmp	r5, r0
 80092fa:	f84c 1b04 	str.w	r1, [ip], #4
 80092fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009302:	dcec      	bgt.n	80092de <__multadd+0x12>
 8009304:	b30e      	cbz	r6, 800934a <__multadd+0x7e>
 8009306:	68a3      	ldr	r3, [r4, #8]
 8009308:	42ab      	cmp	r3, r5
 800930a:	dc19      	bgt.n	8009340 <__multadd+0x74>
 800930c:	6861      	ldr	r1, [r4, #4]
 800930e:	4638      	mov	r0, r7
 8009310:	3101      	adds	r1, #1
 8009312:	f7ff ff79 	bl	8009208 <_Balloc>
 8009316:	4680      	mov	r8, r0
 8009318:	b928      	cbnz	r0, 8009326 <__multadd+0x5a>
 800931a:	4602      	mov	r2, r0
 800931c:	4b0c      	ldr	r3, [pc, #48]	; (8009350 <__multadd+0x84>)
 800931e:	480d      	ldr	r0, [pc, #52]	; (8009354 <__multadd+0x88>)
 8009320:	21b5      	movs	r1, #181	; 0xb5
 8009322:	f000 ff07 	bl	800a134 <__assert_func>
 8009326:	6922      	ldr	r2, [r4, #16]
 8009328:	3202      	adds	r2, #2
 800932a:	f104 010c 	add.w	r1, r4, #12
 800932e:	0092      	lsls	r2, r2, #2
 8009330:	300c      	adds	r0, #12
 8009332:	f7ff ff5b 	bl	80091ec <memcpy>
 8009336:	4621      	mov	r1, r4
 8009338:	4638      	mov	r0, r7
 800933a:	f7ff ffa5 	bl	8009288 <_Bfree>
 800933e:	4644      	mov	r4, r8
 8009340:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009344:	3501      	adds	r5, #1
 8009346:	615e      	str	r6, [r3, #20]
 8009348:	6125      	str	r5, [r4, #16]
 800934a:	4620      	mov	r0, r4
 800934c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009350:	0800a5bb 	.word	0x0800a5bb
 8009354:	0800a62c 	.word	0x0800a62c

08009358 <__hi0bits>:
 8009358:	0c03      	lsrs	r3, r0, #16
 800935a:	041b      	lsls	r3, r3, #16
 800935c:	b9d3      	cbnz	r3, 8009394 <__hi0bits+0x3c>
 800935e:	0400      	lsls	r0, r0, #16
 8009360:	2310      	movs	r3, #16
 8009362:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009366:	bf04      	itt	eq
 8009368:	0200      	lsleq	r0, r0, #8
 800936a:	3308      	addeq	r3, #8
 800936c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009370:	bf04      	itt	eq
 8009372:	0100      	lsleq	r0, r0, #4
 8009374:	3304      	addeq	r3, #4
 8009376:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800937a:	bf04      	itt	eq
 800937c:	0080      	lsleq	r0, r0, #2
 800937e:	3302      	addeq	r3, #2
 8009380:	2800      	cmp	r0, #0
 8009382:	db05      	blt.n	8009390 <__hi0bits+0x38>
 8009384:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009388:	f103 0301 	add.w	r3, r3, #1
 800938c:	bf08      	it	eq
 800938e:	2320      	moveq	r3, #32
 8009390:	4618      	mov	r0, r3
 8009392:	4770      	bx	lr
 8009394:	2300      	movs	r3, #0
 8009396:	e7e4      	b.n	8009362 <__hi0bits+0xa>

08009398 <__lo0bits>:
 8009398:	6803      	ldr	r3, [r0, #0]
 800939a:	f013 0207 	ands.w	r2, r3, #7
 800939e:	4601      	mov	r1, r0
 80093a0:	d00b      	beq.n	80093ba <__lo0bits+0x22>
 80093a2:	07da      	lsls	r2, r3, #31
 80093a4:	d423      	bmi.n	80093ee <__lo0bits+0x56>
 80093a6:	0798      	lsls	r0, r3, #30
 80093a8:	bf49      	itett	mi
 80093aa:	085b      	lsrmi	r3, r3, #1
 80093ac:	089b      	lsrpl	r3, r3, #2
 80093ae:	2001      	movmi	r0, #1
 80093b0:	600b      	strmi	r3, [r1, #0]
 80093b2:	bf5c      	itt	pl
 80093b4:	600b      	strpl	r3, [r1, #0]
 80093b6:	2002      	movpl	r0, #2
 80093b8:	4770      	bx	lr
 80093ba:	b298      	uxth	r0, r3
 80093bc:	b9a8      	cbnz	r0, 80093ea <__lo0bits+0x52>
 80093be:	0c1b      	lsrs	r3, r3, #16
 80093c0:	2010      	movs	r0, #16
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	b90a      	cbnz	r2, 80093ca <__lo0bits+0x32>
 80093c6:	3008      	adds	r0, #8
 80093c8:	0a1b      	lsrs	r3, r3, #8
 80093ca:	071a      	lsls	r2, r3, #28
 80093cc:	bf04      	itt	eq
 80093ce:	091b      	lsreq	r3, r3, #4
 80093d0:	3004      	addeq	r0, #4
 80093d2:	079a      	lsls	r2, r3, #30
 80093d4:	bf04      	itt	eq
 80093d6:	089b      	lsreq	r3, r3, #2
 80093d8:	3002      	addeq	r0, #2
 80093da:	07da      	lsls	r2, r3, #31
 80093dc:	d403      	bmi.n	80093e6 <__lo0bits+0x4e>
 80093de:	085b      	lsrs	r3, r3, #1
 80093e0:	f100 0001 	add.w	r0, r0, #1
 80093e4:	d005      	beq.n	80093f2 <__lo0bits+0x5a>
 80093e6:	600b      	str	r3, [r1, #0]
 80093e8:	4770      	bx	lr
 80093ea:	4610      	mov	r0, r2
 80093ec:	e7e9      	b.n	80093c2 <__lo0bits+0x2a>
 80093ee:	2000      	movs	r0, #0
 80093f0:	4770      	bx	lr
 80093f2:	2020      	movs	r0, #32
 80093f4:	4770      	bx	lr
	...

080093f8 <__i2b>:
 80093f8:	b510      	push	{r4, lr}
 80093fa:	460c      	mov	r4, r1
 80093fc:	2101      	movs	r1, #1
 80093fe:	f7ff ff03 	bl	8009208 <_Balloc>
 8009402:	4602      	mov	r2, r0
 8009404:	b928      	cbnz	r0, 8009412 <__i2b+0x1a>
 8009406:	4b05      	ldr	r3, [pc, #20]	; (800941c <__i2b+0x24>)
 8009408:	4805      	ldr	r0, [pc, #20]	; (8009420 <__i2b+0x28>)
 800940a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800940e:	f000 fe91 	bl	800a134 <__assert_func>
 8009412:	2301      	movs	r3, #1
 8009414:	6144      	str	r4, [r0, #20]
 8009416:	6103      	str	r3, [r0, #16]
 8009418:	bd10      	pop	{r4, pc}
 800941a:	bf00      	nop
 800941c:	0800a5bb 	.word	0x0800a5bb
 8009420:	0800a62c 	.word	0x0800a62c

08009424 <__multiply>:
 8009424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009428:	4691      	mov	r9, r2
 800942a:	690a      	ldr	r2, [r1, #16]
 800942c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009430:	429a      	cmp	r2, r3
 8009432:	bfb8      	it	lt
 8009434:	460b      	movlt	r3, r1
 8009436:	460c      	mov	r4, r1
 8009438:	bfbc      	itt	lt
 800943a:	464c      	movlt	r4, r9
 800943c:	4699      	movlt	r9, r3
 800943e:	6927      	ldr	r7, [r4, #16]
 8009440:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009444:	68a3      	ldr	r3, [r4, #8]
 8009446:	6861      	ldr	r1, [r4, #4]
 8009448:	eb07 060a 	add.w	r6, r7, sl
 800944c:	42b3      	cmp	r3, r6
 800944e:	b085      	sub	sp, #20
 8009450:	bfb8      	it	lt
 8009452:	3101      	addlt	r1, #1
 8009454:	f7ff fed8 	bl	8009208 <_Balloc>
 8009458:	b930      	cbnz	r0, 8009468 <__multiply+0x44>
 800945a:	4602      	mov	r2, r0
 800945c:	4b44      	ldr	r3, [pc, #272]	; (8009570 <__multiply+0x14c>)
 800945e:	4845      	ldr	r0, [pc, #276]	; (8009574 <__multiply+0x150>)
 8009460:	f240 115d 	movw	r1, #349	; 0x15d
 8009464:	f000 fe66 	bl	800a134 <__assert_func>
 8009468:	f100 0514 	add.w	r5, r0, #20
 800946c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009470:	462b      	mov	r3, r5
 8009472:	2200      	movs	r2, #0
 8009474:	4543      	cmp	r3, r8
 8009476:	d321      	bcc.n	80094bc <__multiply+0x98>
 8009478:	f104 0314 	add.w	r3, r4, #20
 800947c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009480:	f109 0314 	add.w	r3, r9, #20
 8009484:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009488:	9202      	str	r2, [sp, #8]
 800948a:	1b3a      	subs	r2, r7, r4
 800948c:	3a15      	subs	r2, #21
 800948e:	f022 0203 	bic.w	r2, r2, #3
 8009492:	3204      	adds	r2, #4
 8009494:	f104 0115 	add.w	r1, r4, #21
 8009498:	428f      	cmp	r7, r1
 800949a:	bf38      	it	cc
 800949c:	2204      	movcc	r2, #4
 800949e:	9201      	str	r2, [sp, #4]
 80094a0:	9a02      	ldr	r2, [sp, #8]
 80094a2:	9303      	str	r3, [sp, #12]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d80c      	bhi.n	80094c2 <__multiply+0x9e>
 80094a8:	2e00      	cmp	r6, #0
 80094aa:	dd03      	ble.n	80094b4 <__multiply+0x90>
 80094ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d05a      	beq.n	800956a <__multiply+0x146>
 80094b4:	6106      	str	r6, [r0, #16]
 80094b6:	b005      	add	sp, #20
 80094b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094bc:	f843 2b04 	str.w	r2, [r3], #4
 80094c0:	e7d8      	b.n	8009474 <__multiply+0x50>
 80094c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80094c6:	f1ba 0f00 	cmp.w	sl, #0
 80094ca:	d024      	beq.n	8009516 <__multiply+0xf2>
 80094cc:	f104 0e14 	add.w	lr, r4, #20
 80094d0:	46a9      	mov	r9, r5
 80094d2:	f04f 0c00 	mov.w	ip, #0
 80094d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80094da:	f8d9 1000 	ldr.w	r1, [r9]
 80094de:	fa1f fb82 	uxth.w	fp, r2
 80094e2:	b289      	uxth	r1, r1
 80094e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80094e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80094ec:	f8d9 2000 	ldr.w	r2, [r9]
 80094f0:	4461      	add	r1, ip
 80094f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80094fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80094fe:	b289      	uxth	r1, r1
 8009500:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009504:	4577      	cmp	r7, lr
 8009506:	f849 1b04 	str.w	r1, [r9], #4
 800950a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800950e:	d8e2      	bhi.n	80094d6 <__multiply+0xb2>
 8009510:	9a01      	ldr	r2, [sp, #4]
 8009512:	f845 c002 	str.w	ip, [r5, r2]
 8009516:	9a03      	ldr	r2, [sp, #12]
 8009518:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800951c:	3304      	adds	r3, #4
 800951e:	f1b9 0f00 	cmp.w	r9, #0
 8009522:	d020      	beq.n	8009566 <__multiply+0x142>
 8009524:	6829      	ldr	r1, [r5, #0]
 8009526:	f104 0c14 	add.w	ip, r4, #20
 800952a:	46ae      	mov	lr, r5
 800952c:	f04f 0a00 	mov.w	sl, #0
 8009530:	f8bc b000 	ldrh.w	fp, [ip]
 8009534:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009538:	fb09 220b 	mla	r2, r9, fp, r2
 800953c:	4492      	add	sl, r2
 800953e:	b289      	uxth	r1, r1
 8009540:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009544:	f84e 1b04 	str.w	r1, [lr], #4
 8009548:	f85c 2b04 	ldr.w	r2, [ip], #4
 800954c:	f8be 1000 	ldrh.w	r1, [lr]
 8009550:	0c12      	lsrs	r2, r2, #16
 8009552:	fb09 1102 	mla	r1, r9, r2, r1
 8009556:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800955a:	4567      	cmp	r7, ip
 800955c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009560:	d8e6      	bhi.n	8009530 <__multiply+0x10c>
 8009562:	9a01      	ldr	r2, [sp, #4]
 8009564:	50a9      	str	r1, [r5, r2]
 8009566:	3504      	adds	r5, #4
 8009568:	e79a      	b.n	80094a0 <__multiply+0x7c>
 800956a:	3e01      	subs	r6, #1
 800956c:	e79c      	b.n	80094a8 <__multiply+0x84>
 800956e:	bf00      	nop
 8009570:	0800a5bb 	.word	0x0800a5bb
 8009574:	0800a62c 	.word	0x0800a62c

08009578 <__pow5mult>:
 8009578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800957c:	4615      	mov	r5, r2
 800957e:	f012 0203 	ands.w	r2, r2, #3
 8009582:	4606      	mov	r6, r0
 8009584:	460f      	mov	r7, r1
 8009586:	d007      	beq.n	8009598 <__pow5mult+0x20>
 8009588:	4c25      	ldr	r4, [pc, #148]	; (8009620 <__pow5mult+0xa8>)
 800958a:	3a01      	subs	r2, #1
 800958c:	2300      	movs	r3, #0
 800958e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009592:	f7ff fe9b 	bl	80092cc <__multadd>
 8009596:	4607      	mov	r7, r0
 8009598:	10ad      	asrs	r5, r5, #2
 800959a:	d03d      	beq.n	8009618 <__pow5mult+0xa0>
 800959c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800959e:	b97c      	cbnz	r4, 80095c0 <__pow5mult+0x48>
 80095a0:	2010      	movs	r0, #16
 80095a2:	f7ff fe1b 	bl	80091dc <malloc>
 80095a6:	4602      	mov	r2, r0
 80095a8:	6270      	str	r0, [r6, #36]	; 0x24
 80095aa:	b928      	cbnz	r0, 80095b8 <__pow5mult+0x40>
 80095ac:	4b1d      	ldr	r3, [pc, #116]	; (8009624 <__pow5mult+0xac>)
 80095ae:	481e      	ldr	r0, [pc, #120]	; (8009628 <__pow5mult+0xb0>)
 80095b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80095b4:	f000 fdbe 	bl	800a134 <__assert_func>
 80095b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095bc:	6004      	str	r4, [r0, #0]
 80095be:	60c4      	str	r4, [r0, #12]
 80095c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80095c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095c8:	b94c      	cbnz	r4, 80095de <__pow5mult+0x66>
 80095ca:	f240 2171 	movw	r1, #625	; 0x271
 80095ce:	4630      	mov	r0, r6
 80095d0:	f7ff ff12 	bl	80093f8 <__i2b>
 80095d4:	2300      	movs	r3, #0
 80095d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80095da:	4604      	mov	r4, r0
 80095dc:	6003      	str	r3, [r0, #0]
 80095de:	f04f 0900 	mov.w	r9, #0
 80095e2:	07eb      	lsls	r3, r5, #31
 80095e4:	d50a      	bpl.n	80095fc <__pow5mult+0x84>
 80095e6:	4639      	mov	r1, r7
 80095e8:	4622      	mov	r2, r4
 80095ea:	4630      	mov	r0, r6
 80095ec:	f7ff ff1a 	bl	8009424 <__multiply>
 80095f0:	4639      	mov	r1, r7
 80095f2:	4680      	mov	r8, r0
 80095f4:	4630      	mov	r0, r6
 80095f6:	f7ff fe47 	bl	8009288 <_Bfree>
 80095fa:	4647      	mov	r7, r8
 80095fc:	106d      	asrs	r5, r5, #1
 80095fe:	d00b      	beq.n	8009618 <__pow5mult+0xa0>
 8009600:	6820      	ldr	r0, [r4, #0]
 8009602:	b938      	cbnz	r0, 8009614 <__pow5mult+0x9c>
 8009604:	4622      	mov	r2, r4
 8009606:	4621      	mov	r1, r4
 8009608:	4630      	mov	r0, r6
 800960a:	f7ff ff0b 	bl	8009424 <__multiply>
 800960e:	6020      	str	r0, [r4, #0]
 8009610:	f8c0 9000 	str.w	r9, [r0]
 8009614:	4604      	mov	r4, r0
 8009616:	e7e4      	b.n	80095e2 <__pow5mult+0x6a>
 8009618:	4638      	mov	r0, r7
 800961a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800961e:	bf00      	nop
 8009620:	0800a778 	.word	0x0800a778
 8009624:	0800a549 	.word	0x0800a549
 8009628:	0800a62c 	.word	0x0800a62c

0800962c <__lshift>:
 800962c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009630:	460c      	mov	r4, r1
 8009632:	6849      	ldr	r1, [r1, #4]
 8009634:	6923      	ldr	r3, [r4, #16]
 8009636:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800963a:	68a3      	ldr	r3, [r4, #8]
 800963c:	4607      	mov	r7, r0
 800963e:	4691      	mov	r9, r2
 8009640:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009644:	f108 0601 	add.w	r6, r8, #1
 8009648:	42b3      	cmp	r3, r6
 800964a:	db0b      	blt.n	8009664 <__lshift+0x38>
 800964c:	4638      	mov	r0, r7
 800964e:	f7ff fddb 	bl	8009208 <_Balloc>
 8009652:	4605      	mov	r5, r0
 8009654:	b948      	cbnz	r0, 800966a <__lshift+0x3e>
 8009656:	4602      	mov	r2, r0
 8009658:	4b2a      	ldr	r3, [pc, #168]	; (8009704 <__lshift+0xd8>)
 800965a:	482b      	ldr	r0, [pc, #172]	; (8009708 <__lshift+0xdc>)
 800965c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009660:	f000 fd68 	bl	800a134 <__assert_func>
 8009664:	3101      	adds	r1, #1
 8009666:	005b      	lsls	r3, r3, #1
 8009668:	e7ee      	b.n	8009648 <__lshift+0x1c>
 800966a:	2300      	movs	r3, #0
 800966c:	f100 0114 	add.w	r1, r0, #20
 8009670:	f100 0210 	add.w	r2, r0, #16
 8009674:	4618      	mov	r0, r3
 8009676:	4553      	cmp	r3, sl
 8009678:	db37      	blt.n	80096ea <__lshift+0xbe>
 800967a:	6920      	ldr	r0, [r4, #16]
 800967c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009680:	f104 0314 	add.w	r3, r4, #20
 8009684:	f019 091f 	ands.w	r9, r9, #31
 8009688:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800968c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009690:	d02f      	beq.n	80096f2 <__lshift+0xc6>
 8009692:	f1c9 0e20 	rsb	lr, r9, #32
 8009696:	468a      	mov	sl, r1
 8009698:	f04f 0c00 	mov.w	ip, #0
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	fa02 f209 	lsl.w	r2, r2, r9
 80096a2:	ea42 020c 	orr.w	r2, r2, ip
 80096a6:	f84a 2b04 	str.w	r2, [sl], #4
 80096aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ae:	4298      	cmp	r0, r3
 80096b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80096b4:	d8f2      	bhi.n	800969c <__lshift+0x70>
 80096b6:	1b03      	subs	r3, r0, r4
 80096b8:	3b15      	subs	r3, #21
 80096ba:	f023 0303 	bic.w	r3, r3, #3
 80096be:	3304      	adds	r3, #4
 80096c0:	f104 0215 	add.w	r2, r4, #21
 80096c4:	4290      	cmp	r0, r2
 80096c6:	bf38      	it	cc
 80096c8:	2304      	movcc	r3, #4
 80096ca:	f841 c003 	str.w	ip, [r1, r3]
 80096ce:	f1bc 0f00 	cmp.w	ip, #0
 80096d2:	d001      	beq.n	80096d8 <__lshift+0xac>
 80096d4:	f108 0602 	add.w	r6, r8, #2
 80096d8:	3e01      	subs	r6, #1
 80096da:	4638      	mov	r0, r7
 80096dc:	612e      	str	r6, [r5, #16]
 80096de:	4621      	mov	r1, r4
 80096e0:	f7ff fdd2 	bl	8009288 <_Bfree>
 80096e4:	4628      	mov	r0, r5
 80096e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80096ee:	3301      	adds	r3, #1
 80096f0:	e7c1      	b.n	8009676 <__lshift+0x4a>
 80096f2:	3904      	subs	r1, #4
 80096f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80096fc:	4298      	cmp	r0, r3
 80096fe:	d8f9      	bhi.n	80096f4 <__lshift+0xc8>
 8009700:	e7ea      	b.n	80096d8 <__lshift+0xac>
 8009702:	bf00      	nop
 8009704:	0800a5bb 	.word	0x0800a5bb
 8009708:	0800a62c 	.word	0x0800a62c

0800970c <__mcmp>:
 800970c:	b530      	push	{r4, r5, lr}
 800970e:	6902      	ldr	r2, [r0, #16]
 8009710:	690c      	ldr	r4, [r1, #16]
 8009712:	1b12      	subs	r2, r2, r4
 8009714:	d10e      	bne.n	8009734 <__mcmp+0x28>
 8009716:	f100 0314 	add.w	r3, r0, #20
 800971a:	3114      	adds	r1, #20
 800971c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009720:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009724:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009728:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800972c:	42a5      	cmp	r5, r4
 800972e:	d003      	beq.n	8009738 <__mcmp+0x2c>
 8009730:	d305      	bcc.n	800973e <__mcmp+0x32>
 8009732:	2201      	movs	r2, #1
 8009734:	4610      	mov	r0, r2
 8009736:	bd30      	pop	{r4, r5, pc}
 8009738:	4283      	cmp	r3, r0
 800973a:	d3f3      	bcc.n	8009724 <__mcmp+0x18>
 800973c:	e7fa      	b.n	8009734 <__mcmp+0x28>
 800973e:	f04f 32ff 	mov.w	r2, #4294967295
 8009742:	e7f7      	b.n	8009734 <__mcmp+0x28>

08009744 <__mdiff>:
 8009744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009748:	460c      	mov	r4, r1
 800974a:	4606      	mov	r6, r0
 800974c:	4611      	mov	r1, r2
 800974e:	4620      	mov	r0, r4
 8009750:	4690      	mov	r8, r2
 8009752:	f7ff ffdb 	bl	800970c <__mcmp>
 8009756:	1e05      	subs	r5, r0, #0
 8009758:	d110      	bne.n	800977c <__mdiff+0x38>
 800975a:	4629      	mov	r1, r5
 800975c:	4630      	mov	r0, r6
 800975e:	f7ff fd53 	bl	8009208 <_Balloc>
 8009762:	b930      	cbnz	r0, 8009772 <__mdiff+0x2e>
 8009764:	4b3a      	ldr	r3, [pc, #232]	; (8009850 <__mdiff+0x10c>)
 8009766:	4602      	mov	r2, r0
 8009768:	f240 2132 	movw	r1, #562	; 0x232
 800976c:	4839      	ldr	r0, [pc, #228]	; (8009854 <__mdiff+0x110>)
 800976e:	f000 fce1 	bl	800a134 <__assert_func>
 8009772:	2301      	movs	r3, #1
 8009774:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977c:	bfa4      	itt	ge
 800977e:	4643      	movge	r3, r8
 8009780:	46a0      	movge	r8, r4
 8009782:	4630      	mov	r0, r6
 8009784:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009788:	bfa6      	itte	ge
 800978a:	461c      	movge	r4, r3
 800978c:	2500      	movge	r5, #0
 800978e:	2501      	movlt	r5, #1
 8009790:	f7ff fd3a 	bl	8009208 <_Balloc>
 8009794:	b920      	cbnz	r0, 80097a0 <__mdiff+0x5c>
 8009796:	4b2e      	ldr	r3, [pc, #184]	; (8009850 <__mdiff+0x10c>)
 8009798:	4602      	mov	r2, r0
 800979a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800979e:	e7e5      	b.n	800976c <__mdiff+0x28>
 80097a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80097a4:	6926      	ldr	r6, [r4, #16]
 80097a6:	60c5      	str	r5, [r0, #12]
 80097a8:	f104 0914 	add.w	r9, r4, #20
 80097ac:	f108 0514 	add.w	r5, r8, #20
 80097b0:	f100 0e14 	add.w	lr, r0, #20
 80097b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80097b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80097bc:	f108 0210 	add.w	r2, r8, #16
 80097c0:	46f2      	mov	sl, lr
 80097c2:	2100      	movs	r1, #0
 80097c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80097c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80097cc:	fa1f f883 	uxth.w	r8, r3
 80097d0:	fa11 f18b 	uxtah	r1, r1, fp
 80097d4:	0c1b      	lsrs	r3, r3, #16
 80097d6:	eba1 0808 	sub.w	r8, r1, r8
 80097da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80097de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80097e2:	fa1f f888 	uxth.w	r8, r8
 80097e6:	1419      	asrs	r1, r3, #16
 80097e8:	454e      	cmp	r6, r9
 80097ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80097ee:	f84a 3b04 	str.w	r3, [sl], #4
 80097f2:	d8e7      	bhi.n	80097c4 <__mdiff+0x80>
 80097f4:	1b33      	subs	r3, r6, r4
 80097f6:	3b15      	subs	r3, #21
 80097f8:	f023 0303 	bic.w	r3, r3, #3
 80097fc:	3304      	adds	r3, #4
 80097fe:	3415      	adds	r4, #21
 8009800:	42a6      	cmp	r6, r4
 8009802:	bf38      	it	cc
 8009804:	2304      	movcc	r3, #4
 8009806:	441d      	add	r5, r3
 8009808:	4473      	add	r3, lr
 800980a:	469e      	mov	lr, r3
 800980c:	462e      	mov	r6, r5
 800980e:	4566      	cmp	r6, ip
 8009810:	d30e      	bcc.n	8009830 <__mdiff+0xec>
 8009812:	f10c 0203 	add.w	r2, ip, #3
 8009816:	1b52      	subs	r2, r2, r5
 8009818:	f022 0203 	bic.w	r2, r2, #3
 800981c:	3d03      	subs	r5, #3
 800981e:	45ac      	cmp	ip, r5
 8009820:	bf38      	it	cc
 8009822:	2200      	movcc	r2, #0
 8009824:	441a      	add	r2, r3
 8009826:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800982a:	b17b      	cbz	r3, 800984c <__mdiff+0x108>
 800982c:	6107      	str	r7, [r0, #16]
 800982e:	e7a3      	b.n	8009778 <__mdiff+0x34>
 8009830:	f856 8b04 	ldr.w	r8, [r6], #4
 8009834:	fa11 f288 	uxtah	r2, r1, r8
 8009838:	1414      	asrs	r4, r2, #16
 800983a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800983e:	b292      	uxth	r2, r2
 8009840:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009844:	f84e 2b04 	str.w	r2, [lr], #4
 8009848:	1421      	asrs	r1, r4, #16
 800984a:	e7e0      	b.n	800980e <__mdiff+0xca>
 800984c:	3f01      	subs	r7, #1
 800984e:	e7ea      	b.n	8009826 <__mdiff+0xe2>
 8009850:	0800a5bb 	.word	0x0800a5bb
 8009854:	0800a62c 	.word	0x0800a62c

08009858 <__d2b>:
 8009858:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800985c:	4689      	mov	r9, r1
 800985e:	2101      	movs	r1, #1
 8009860:	ec57 6b10 	vmov	r6, r7, d0
 8009864:	4690      	mov	r8, r2
 8009866:	f7ff fccf 	bl	8009208 <_Balloc>
 800986a:	4604      	mov	r4, r0
 800986c:	b930      	cbnz	r0, 800987c <__d2b+0x24>
 800986e:	4602      	mov	r2, r0
 8009870:	4b25      	ldr	r3, [pc, #148]	; (8009908 <__d2b+0xb0>)
 8009872:	4826      	ldr	r0, [pc, #152]	; (800990c <__d2b+0xb4>)
 8009874:	f240 310a 	movw	r1, #778	; 0x30a
 8009878:	f000 fc5c 	bl	800a134 <__assert_func>
 800987c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009880:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009884:	bb35      	cbnz	r5, 80098d4 <__d2b+0x7c>
 8009886:	2e00      	cmp	r6, #0
 8009888:	9301      	str	r3, [sp, #4]
 800988a:	d028      	beq.n	80098de <__d2b+0x86>
 800988c:	4668      	mov	r0, sp
 800988e:	9600      	str	r6, [sp, #0]
 8009890:	f7ff fd82 	bl	8009398 <__lo0bits>
 8009894:	9900      	ldr	r1, [sp, #0]
 8009896:	b300      	cbz	r0, 80098da <__d2b+0x82>
 8009898:	9a01      	ldr	r2, [sp, #4]
 800989a:	f1c0 0320 	rsb	r3, r0, #32
 800989e:	fa02 f303 	lsl.w	r3, r2, r3
 80098a2:	430b      	orrs	r3, r1
 80098a4:	40c2      	lsrs	r2, r0
 80098a6:	6163      	str	r3, [r4, #20]
 80098a8:	9201      	str	r2, [sp, #4]
 80098aa:	9b01      	ldr	r3, [sp, #4]
 80098ac:	61a3      	str	r3, [r4, #24]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	bf14      	ite	ne
 80098b2:	2202      	movne	r2, #2
 80098b4:	2201      	moveq	r2, #1
 80098b6:	6122      	str	r2, [r4, #16]
 80098b8:	b1d5      	cbz	r5, 80098f0 <__d2b+0x98>
 80098ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80098be:	4405      	add	r5, r0
 80098c0:	f8c9 5000 	str.w	r5, [r9]
 80098c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80098c8:	f8c8 0000 	str.w	r0, [r8]
 80098cc:	4620      	mov	r0, r4
 80098ce:	b003      	add	sp, #12
 80098d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098d8:	e7d5      	b.n	8009886 <__d2b+0x2e>
 80098da:	6161      	str	r1, [r4, #20]
 80098dc:	e7e5      	b.n	80098aa <__d2b+0x52>
 80098de:	a801      	add	r0, sp, #4
 80098e0:	f7ff fd5a 	bl	8009398 <__lo0bits>
 80098e4:	9b01      	ldr	r3, [sp, #4]
 80098e6:	6163      	str	r3, [r4, #20]
 80098e8:	2201      	movs	r2, #1
 80098ea:	6122      	str	r2, [r4, #16]
 80098ec:	3020      	adds	r0, #32
 80098ee:	e7e3      	b.n	80098b8 <__d2b+0x60>
 80098f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80098f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80098f8:	f8c9 0000 	str.w	r0, [r9]
 80098fc:	6918      	ldr	r0, [r3, #16]
 80098fe:	f7ff fd2b 	bl	8009358 <__hi0bits>
 8009902:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009906:	e7df      	b.n	80098c8 <__d2b+0x70>
 8009908:	0800a5bb 	.word	0x0800a5bb
 800990c:	0800a62c 	.word	0x0800a62c

08009910 <_calloc_r>:
 8009910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009912:	fba1 2402 	umull	r2, r4, r1, r2
 8009916:	b94c      	cbnz	r4, 800992c <_calloc_r+0x1c>
 8009918:	4611      	mov	r1, r2
 800991a:	9201      	str	r2, [sp, #4]
 800991c:	f000 f87a 	bl	8009a14 <_malloc_r>
 8009920:	9a01      	ldr	r2, [sp, #4]
 8009922:	4605      	mov	r5, r0
 8009924:	b930      	cbnz	r0, 8009934 <_calloc_r+0x24>
 8009926:	4628      	mov	r0, r5
 8009928:	b003      	add	sp, #12
 800992a:	bd30      	pop	{r4, r5, pc}
 800992c:	220c      	movs	r2, #12
 800992e:	6002      	str	r2, [r0, #0]
 8009930:	2500      	movs	r5, #0
 8009932:	e7f8      	b.n	8009926 <_calloc_r+0x16>
 8009934:	4621      	mov	r1, r4
 8009936:	f7fd fdd1 	bl	80074dc <memset>
 800993a:	e7f4      	b.n	8009926 <_calloc_r+0x16>

0800993c <_free_r>:
 800993c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800993e:	2900      	cmp	r1, #0
 8009940:	d044      	beq.n	80099cc <_free_r+0x90>
 8009942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009946:	9001      	str	r0, [sp, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	f1a1 0404 	sub.w	r4, r1, #4
 800994e:	bfb8      	it	lt
 8009950:	18e4      	addlt	r4, r4, r3
 8009952:	f000 fc8f 	bl	800a274 <__malloc_lock>
 8009956:	4a1e      	ldr	r2, [pc, #120]	; (80099d0 <_free_r+0x94>)
 8009958:	9801      	ldr	r0, [sp, #4]
 800995a:	6813      	ldr	r3, [r2, #0]
 800995c:	b933      	cbnz	r3, 800996c <_free_r+0x30>
 800995e:	6063      	str	r3, [r4, #4]
 8009960:	6014      	str	r4, [r2, #0]
 8009962:	b003      	add	sp, #12
 8009964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009968:	f000 bc8a 	b.w	800a280 <__malloc_unlock>
 800996c:	42a3      	cmp	r3, r4
 800996e:	d908      	bls.n	8009982 <_free_r+0x46>
 8009970:	6825      	ldr	r5, [r4, #0]
 8009972:	1961      	adds	r1, r4, r5
 8009974:	428b      	cmp	r3, r1
 8009976:	bf01      	itttt	eq
 8009978:	6819      	ldreq	r1, [r3, #0]
 800997a:	685b      	ldreq	r3, [r3, #4]
 800997c:	1949      	addeq	r1, r1, r5
 800997e:	6021      	streq	r1, [r4, #0]
 8009980:	e7ed      	b.n	800995e <_free_r+0x22>
 8009982:	461a      	mov	r2, r3
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	b10b      	cbz	r3, 800998c <_free_r+0x50>
 8009988:	42a3      	cmp	r3, r4
 800998a:	d9fa      	bls.n	8009982 <_free_r+0x46>
 800998c:	6811      	ldr	r1, [r2, #0]
 800998e:	1855      	adds	r5, r2, r1
 8009990:	42a5      	cmp	r5, r4
 8009992:	d10b      	bne.n	80099ac <_free_r+0x70>
 8009994:	6824      	ldr	r4, [r4, #0]
 8009996:	4421      	add	r1, r4
 8009998:	1854      	adds	r4, r2, r1
 800999a:	42a3      	cmp	r3, r4
 800999c:	6011      	str	r1, [r2, #0]
 800999e:	d1e0      	bne.n	8009962 <_free_r+0x26>
 80099a0:	681c      	ldr	r4, [r3, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	6053      	str	r3, [r2, #4]
 80099a6:	4421      	add	r1, r4
 80099a8:	6011      	str	r1, [r2, #0]
 80099aa:	e7da      	b.n	8009962 <_free_r+0x26>
 80099ac:	d902      	bls.n	80099b4 <_free_r+0x78>
 80099ae:	230c      	movs	r3, #12
 80099b0:	6003      	str	r3, [r0, #0]
 80099b2:	e7d6      	b.n	8009962 <_free_r+0x26>
 80099b4:	6825      	ldr	r5, [r4, #0]
 80099b6:	1961      	adds	r1, r4, r5
 80099b8:	428b      	cmp	r3, r1
 80099ba:	bf04      	itt	eq
 80099bc:	6819      	ldreq	r1, [r3, #0]
 80099be:	685b      	ldreq	r3, [r3, #4]
 80099c0:	6063      	str	r3, [r4, #4]
 80099c2:	bf04      	itt	eq
 80099c4:	1949      	addeq	r1, r1, r5
 80099c6:	6021      	streq	r1, [r4, #0]
 80099c8:	6054      	str	r4, [r2, #4]
 80099ca:	e7ca      	b.n	8009962 <_free_r+0x26>
 80099cc:	b003      	add	sp, #12
 80099ce:	bd30      	pop	{r4, r5, pc}
 80099d0:	200004e0 	.word	0x200004e0

080099d4 <sbrk_aligned>:
 80099d4:	b570      	push	{r4, r5, r6, lr}
 80099d6:	4e0e      	ldr	r6, [pc, #56]	; (8009a10 <sbrk_aligned+0x3c>)
 80099d8:	460c      	mov	r4, r1
 80099da:	6831      	ldr	r1, [r6, #0]
 80099dc:	4605      	mov	r5, r0
 80099de:	b911      	cbnz	r1, 80099e6 <sbrk_aligned+0x12>
 80099e0:	f000 fb42 	bl	800a068 <_sbrk_r>
 80099e4:	6030      	str	r0, [r6, #0]
 80099e6:	4621      	mov	r1, r4
 80099e8:	4628      	mov	r0, r5
 80099ea:	f000 fb3d 	bl	800a068 <_sbrk_r>
 80099ee:	1c43      	adds	r3, r0, #1
 80099f0:	d00a      	beq.n	8009a08 <sbrk_aligned+0x34>
 80099f2:	1cc4      	adds	r4, r0, #3
 80099f4:	f024 0403 	bic.w	r4, r4, #3
 80099f8:	42a0      	cmp	r0, r4
 80099fa:	d007      	beq.n	8009a0c <sbrk_aligned+0x38>
 80099fc:	1a21      	subs	r1, r4, r0
 80099fe:	4628      	mov	r0, r5
 8009a00:	f000 fb32 	bl	800a068 <_sbrk_r>
 8009a04:	3001      	adds	r0, #1
 8009a06:	d101      	bne.n	8009a0c <sbrk_aligned+0x38>
 8009a08:	f04f 34ff 	mov.w	r4, #4294967295
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	bd70      	pop	{r4, r5, r6, pc}
 8009a10:	200004e4 	.word	0x200004e4

08009a14 <_malloc_r>:
 8009a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a18:	1ccd      	adds	r5, r1, #3
 8009a1a:	f025 0503 	bic.w	r5, r5, #3
 8009a1e:	3508      	adds	r5, #8
 8009a20:	2d0c      	cmp	r5, #12
 8009a22:	bf38      	it	cc
 8009a24:	250c      	movcc	r5, #12
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	4607      	mov	r7, r0
 8009a2a:	db01      	blt.n	8009a30 <_malloc_r+0x1c>
 8009a2c:	42a9      	cmp	r1, r5
 8009a2e:	d905      	bls.n	8009a3c <_malloc_r+0x28>
 8009a30:	230c      	movs	r3, #12
 8009a32:	603b      	str	r3, [r7, #0]
 8009a34:	2600      	movs	r6, #0
 8009a36:	4630      	mov	r0, r6
 8009a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a3c:	4e2e      	ldr	r6, [pc, #184]	; (8009af8 <_malloc_r+0xe4>)
 8009a3e:	f000 fc19 	bl	800a274 <__malloc_lock>
 8009a42:	6833      	ldr	r3, [r6, #0]
 8009a44:	461c      	mov	r4, r3
 8009a46:	bb34      	cbnz	r4, 8009a96 <_malloc_r+0x82>
 8009a48:	4629      	mov	r1, r5
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	f7ff ffc2 	bl	80099d4 <sbrk_aligned>
 8009a50:	1c43      	adds	r3, r0, #1
 8009a52:	4604      	mov	r4, r0
 8009a54:	d14d      	bne.n	8009af2 <_malloc_r+0xde>
 8009a56:	6834      	ldr	r4, [r6, #0]
 8009a58:	4626      	mov	r6, r4
 8009a5a:	2e00      	cmp	r6, #0
 8009a5c:	d140      	bne.n	8009ae0 <_malloc_r+0xcc>
 8009a5e:	6823      	ldr	r3, [r4, #0]
 8009a60:	4631      	mov	r1, r6
 8009a62:	4638      	mov	r0, r7
 8009a64:	eb04 0803 	add.w	r8, r4, r3
 8009a68:	f000 fafe 	bl	800a068 <_sbrk_r>
 8009a6c:	4580      	cmp	r8, r0
 8009a6e:	d13a      	bne.n	8009ae6 <_malloc_r+0xd2>
 8009a70:	6821      	ldr	r1, [r4, #0]
 8009a72:	3503      	adds	r5, #3
 8009a74:	1a6d      	subs	r5, r5, r1
 8009a76:	f025 0503 	bic.w	r5, r5, #3
 8009a7a:	3508      	adds	r5, #8
 8009a7c:	2d0c      	cmp	r5, #12
 8009a7e:	bf38      	it	cc
 8009a80:	250c      	movcc	r5, #12
 8009a82:	4629      	mov	r1, r5
 8009a84:	4638      	mov	r0, r7
 8009a86:	f7ff ffa5 	bl	80099d4 <sbrk_aligned>
 8009a8a:	3001      	adds	r0, #1
 8009a8c:	d02b      	beq.n	8009ae6 <_malloc_r+0xd2>
 8009a8e:	6823      	ldr	r3, [r4, #0]
 8009a90:	442b      	add	r3, r5
 8009a92:	6023      	str	r3, [r4, #0]
 8009a94:	e00e      	b.n	8009ab4 <_malloc_r+0xa0>
 8009a96:	6822      	ldr	r2, [r4, #0]
 8009a98:	1b52      	subs	r2, r2, r5
 8009a9a:	d41e      	bmi.n	8009ada <_malloc_r+0xc6>
 8009a9c:	2a0b      	cmp	r2, #11
 8009a9e:	d916      	bls.n	8009ace <_malloc_r+0xba>
 8009aa0:	1961      	adds	r1, r4, r5
 8009aa2:	42a3      	cmp	r3, r4
 8009aa4:	6025      	str	r5, [r4, #0]
 8009aa6:	bf18      	it	ne
 8009aa8:	6059      	strne	r1, [r3, #4]
 8009aaa:	6863      	ldr	r3, [r4, #4]
 8009aac:	bf08      	it	eq
 8009aae:	6031      	streq	r1, [r6, #0]
 8009ab0:	5162      	str	r2, [r4, r5]
 8009ab2:	604b      	str	r3, [r1, #4]
 8009ab4:	4638      	mov	r0, r7
 8009ab6:	f104 060b 	add.w	r6, r4, #11
 8009aba:	f000 fbe1 	bl	800a280 <__malloc_unlock>
 8009abe:	f026 0607 	bic.w	r6, r6, #7
 8009ac2:	1d23      	adds	r3, r4, #4
 8009ac4:	1af2      	subs	r2, r6, r3
 8009ac6:	d0b6      	beq.n	8009a36 <_malloc_r+0x22>
 8009ac8:	1b9b      	subs	r3, r3, r6
 8009aca:	50a3      	str	r3, [r4, r2]
 8009acc:	e7b3      	b.n	8009a36 <_malloc_r+0x22>
 8009ace:	6862      	ldr	r2, [r4, #4]
 8009ad0:	42a3      	cmp	r3, r4
 8009ad2:	bf0c      	ite	eq
 8009ad4:	6032      	streq	r2, [r6, #0]
 8009ad6:	605a      	strne	r2, [r3, #4]
 8009ad8:	e7ec      	b.n	8009ab4 <_malloc_r+0xa0>
 8009ada:	4623      	mov	r3, r4
 8009adc:	6864      	ldr	r4, [r4, #4]
 8009ade:	e7b2      	b.n	8009a46 <_malloc_r+0x32>
 8009ae0:	4634      	mov	r4, r6
 8009ae2:	6876      	ldr	r6, [r6, #4]
 8009ae4:	e7b9      	b.n	8009a5a <_malloc_r+0x46>
 8009ae6:	230c      	movs	r3, #12
 8009ae8:	603b      	str	r3, [r7, #0]
 8009aea:	4638      	mov	r0, r7
 8009aec:	f000 fbc8 	bl	800a280 <__malloc_unlock>
 8009af0:	e7a1      	b.n	8009a36 <_malloc_r+0x22>
 8009af2:	6025      	str	r5, [r4, #0]
 8009af4:	e7de      	b.n	8009ab4 <_malloc_r+0xa0>
 8009af6:	bf00      	nop
 8009af8:	200004e0 	.word	0x200004e0

08009afc <__ssputs_r>:
 8009afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b00:	688e      	ldr	r6, [r1, #8]
 8009b02:	429e      	cmp	r6, r3
 8009b04:	4682      	mov	sl, r0
 8009b06:	460c      	mov	r4, r1
 8009b08:	4690      	mov	r8, r2
 8009b0a:	461f      	mov	r7, r3
 8009b0c:	d838      	bhi.n	8009b80 <__ssputs_r+0x84>
 8009b0e:	898a      	ldrh	r2, [r1, #12]
 8009b10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b14:	d032      	beq.n	8009b7c <__ssputs_r+0x80>
 8009b16:	6825      	ldr	r5, [r4, #0]
 8009b18:	6909      	ldr	r1, [r1, #16]
 8009b1a:	eba5 0901 	sub.w	r9, r5, r1
 8009b1e:	6965      	ldr	r5, [r4, #20]
 8009b20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b28:	3301      	adds	r3, #1
 8009b2a:	444b      	add	r3, r9
 8009b2c:	106d      	asrs	r5, r5, #1
 8009b2e:	429d      	cmp	r5, r3
 8009b30:	bf38      	it	cc
 8009b32:	461d      	movcc	r5, r3
 8009b34:	0553      	lsls	r3, r2, #21
 8009b36:	d531      	bpl.n	8009b9c <__ssputs_r+0xa0>
 8009b38:	4629      	mov	r1, r5
 8009b3a:	f7ff ff6b 	bl	8009a14 <_malloc_r>
 8009b3e:	4606      	mov	r6, r0
 8009b40:	b950      	cbnz	r0, 8009b58 <__ssputs_r+0x5c>
 8009b42:	230c      	movs	r3, #12
 8009b44:	f8ca 3000 	str.w	r3, [sl]
 8009b48:	89a3      	ldrh	r3, [r4, #12]
 8009b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b4e:	81a3      	strh	r3, [r4, #12]
 8009b50:	f04f 30ff 	mov.w	r0, #4294967295
 8009b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b58:	6921      	ldr	r1, [r4, #16]
 8009b5a:	464a      	mov	r2, r9
 8009b5c:	f7ff fb46 	bl	80091ec <memcpy>
 8009b60:	89a3      	ldrh	r3, [r4, #12]
 8009b62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b6a:	81a3      	strh	r3, [r4, #12]
 8009b6c:	6126      	str	r6, [r4, #16]
 8009b6e:	6165      	str	r5, [r4, #20]
 8009b70:	444e      	add	r6, r9
 8009b72:	eba5 0509 	sub.w	r5, r5, r9
 8009b76:	6026      	str	r6, [r4, #0]
 8009b78:	60a5      	str	r5, [r4, #8]
 8009b7a:	463e      	mov	r6, r7
 8009b7c:	42be      	cmp	r6, r7
 8009b7e:	d900      	bls.n	8009b82 <__ssputs_r+0x86>
 8009b80:	463e      	mov	r6, r7
 8009b82:	6820      	ldr	r0, [r4, #0]
 8009b84:	4632      	mov	r2, r6
 8009b86:	4641      	mov	r1, r8
 8009b88:	f000 fb5a 	bl	800a240 <memmove>
 8009b8c:	68a3      	ldr	r3, [r4, #8]
 8009b8e:	1b9b      	subs	r3, r3, r6
 8009b90:	60a3      	str	r3, [r4, #8]
 8009b92:	6823      	ldr	r3, [r4, #0]
 8009b94:	4433      	add	r3, r6
 8009b96:	6023      	str	r3, [r4, #0]
 8009b98:	2000      	movs	r0, #0
 8009b9a:	e7db      	b.n	8009b54 <__ssputs_r+0x58>
 8009b9c:	462a      	mov	r2, r5
 8009b9e:	f000 fb75 	bl	800a28c <_realloc_r>
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	d1e1      	bne.n	8009b6c <__ssputs_r+0x70>
 8009ba8:	6921      	ldr	r1, [r4, #16]
 8009baa:	4650      	mov	r0, sl
 8009bac:	f7ff fec6 	bl	800993c <_free_r>
 8009bb0:	e7c7      	b.n	8009b42 <__ssputs_r+0x46>
	...

08009bb4 <_svfiprintf_r>:
 8009bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb8:	4698      	mov	r8, r3
 8009bba:	898b      	ldrh	r3, [r1, #12]
 8009bbc:	061b      	lsls	r3, r3, #24
 8009bbe:	b09d      	sub	sp, #116	; 0x74
 8009bc0:	4607      	mov	r7, r0
 8009bc2:	460d      	mov	r5, r1
 8009bc4:	4614      	mov	r4, r2
 8009bc6:	d50e      	bpl.n	8009be6 <_svfiprintf_r+0x32>
 8009bc8:	690b      	ldr	r3, [r1, #16]
 8009bca:	b963      	cbnz	r3, 8009be6 <_svfiprintf_r+0x32>
 8009bcc:	2140      	movs	r1, #64	; 0x40
 8009bce:	f7ff ff21 	bl	8009a14 <_malloc_r>
 8009bd2:	6028      	str	r0, [r5, #0]
 8009bd4:	6128      	str	r0, [r5, #16]
 8009bd6:	b920      	cbnz	r0, 8009be2 <_svfiprintf_r+0x2e>
 8009bd8:	230c      	movs	r3, #12
 8009bda:	603b      	str	r3, [r7, #0]
 8009bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009be0:	e0d1      	b.n	8009d86 <_svfiprintf_r+0x1d2>
 8009be2:	2340      	movs	r3, #64	; 0x40
 8009be4:	616b      	str	r3, [r5, #20]
 8009be6:	2300      	movs	r3, #0
 8009be8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bea:	2320      	movs	r3, #32
 8009bec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bf4:	2330      	movs	r3, #48	; 0x30
 8009bf6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009da0 <_svfiprintf_r+0x1ec>
 8009bfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bfe:	f04f 0901 	mov.w	r9, #1
 8009c02:	4623      	mov	r3, r4
 8009c04:	469a      	mov	sl, r3
 8009c06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c0a:	b10a      	cbz	r2, 8009c10 <_svfiprintf_r+0x5c>
 8009c0c:	2a25      	cmp	r2, #37	; 0x25
 8009c0e:	d1f9      	bne.n	8009c04 <_svfiprintf_r+0x50>
 8009c10:	ebba 0b04 	subs.w	fp, sl, r4
 8009c14:	d00b      	beq.n	8009c2e <_svfiprintf_r+0x7a>
 8009c16:	465b      	mov	r3, fp
 8009c18:	4622      	mov	r2, r4
 8009c1a:	4629      	mov	r1, r5
 8009c1c:	4638      	mov	r0, r7
 8009c1e:	f7ff ff6d 	bl	8009afc <__ssputs_r>
 8009c22:	3001      	adds	r0, #1
 8009c24:	f000 80aa 	beq.w	8009d7c <_svfiprintf_r+0x1c8>
 8009c28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c2a:	445a      	add	r2, fp
 8009c2c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f000 80a2 	beq.w	8009d7c <_svfiprintf_r+0x1c8>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c42:	f10a 0a01 	add.w	sl, sl, #1
 8009c46:	9304      	str	r3, [sp, #16]
 8009c48:	9307      	str	r3, [sp, #28]
 8009c4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c4e:	931a      	str	r3, [sp, #104]	; 0x68
 8009c50:	4654      	mov	r4, sl
 8009c52:	2205      	movs	r2, #5
 8009c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c58:	4851      	ldr	r0, [pc, #324]	; (8009da0 <_svfiprintf_r+0x1ec>)
 8009c5a:	f7f6 fac1 	bl	80001e0 <memchr>
 8009c5e:	9a04      	ldr	r2, [sp, #16]
 8009c60:	b9d8      	cbnz	r0, 8009c9a <_svfiprintf_r+0xe6>
 8009c62:	06d0      	lsls	r0, r2, #27
 8009c64:	bf44      	itt	mi
 8009c66:	2320      	movmi	r3, #32
 8009c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c6c:	0711      	lsls	r1, r2, #28
 8009c6e:	bf44      	itt	mi
 8009c70:	232b      	movmi	r3, #43	; 0x2b
 8009c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c76:	f89a 3000 	ldrb.w	r3, [sl]
 8009c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c7c:	d015      	beq.n	8009caa <_svfiprintf_r+0xf6>
 8009c7e:	9a07      	ldr	r2, [sp, #28]
 8009c80:	4654      	mov	r4, sl
 8009c82:	2000      	movs	r0, #0
 8009c84:	f04f 0c0a 	mov.w	ip, #10
 8009c88:	4621      	mov	r1, r4
 8009c8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c8e:	3b30      	subs	r3, #48	; 0x30
 8009c90:	2b09      	cmp	r3, #9
 8009c92:	d94e      	bls.n	8009d32 <_svfiprintf_r+0x17e>
 8009c94:	b1b0      	cbz	r0, 8009cc4 <_svfiprintf_r+0x110>
 8009c96:	9207      	str	r2, [sp, #28]
 8009c98:	e014      	b.n	8009cc4 <_svfiprintf_r+0x110>
 8009c9a:	eba0 0308 	sub.w	r3, r0, r8
 8009c9e:	fa09 f303 	lsl.w	r3, r9, r3
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	9304      	str	r3, [sp, #16]
 8009ca6:	46a2      	mov	sl, r4
 8009ca8:	e7d2      	b.n	8009c50 <_svfiprintf_r+0x9c>
 8009caa:	9b03      	ldr	r3, [sp, #12]
 8009cac:	1d19      	adds	r1, r3, #4
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	9103      	str	r1, [sp, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	bfbb      	ittet	lt
 8009cb6:	425b      	neglt	r3, r3
 8009cb8:	f042 0202 	orrlt.w	r2, r2, #2
 8009cbc:	9307      	strge	r3, [sp, #28]
 8009cbe:	9307      	strlt	r3, [sp, #28]
 8009cc0:	bfb8      	it	lt
 8009cc2:	9204      	strlt	r2, [sp, #16]
 8009cc4:	7823      	ldrb	r3, [r4, #0]
 8009cc6:	2b2e      	cmp	r3, #46	; 0x2e
 8009cc8:	d10c      	bne.n	8009ce4 <_svfiprintf_r+0x130>
 8009cca:	7863      	ldrb	r3, [r4, #1]
 8009ccc:	2b2a      	cmp	r3, #42	; 0x2a
 8009cce:	d135      	bne.n	8009d3c <_svfiprintf_r+0x188>
 8009cd0:	9b03      	ldr	r3, [sp, #12]
 8009cd2:	1d1a      	adds	r2, r3, #4
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	9203      	str	r2, [sp, #12]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	bfb8      	it	lt
 8009cdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ce0:	3402      	adds	r4, #2
 8009ce2:	9305      	str	r3, [sp, #20]
 8009ce4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009db0 <_svfiprintf_r+0x1fc>
 8009ce8:	7821      	ldrb	r1, [r4, #0]
 8009cea:	2203      	movs	r2, #3
 8009cec:	4650      	mov	r0, sl
 8009cee:	f7f6 fa77 	bl	80001e0 <memchr>
 8009cf2:	b140      	cbz	r0, 8009d06 <_svfiprintf_r+0x152>
 8009cf4:	2340      	movs	r3, #64	; 0x40
 8009cf6:	eba0 000a 	sub.w	r0, r0, sl
 8009cfa:	fa03 f000 	lsl.w	r0, r3, r0
 8009cfe:	9b04      	ldr	r3, [sp, #16]
 8009d00:	4303      	orrs	r3, r0
 8009d02:	3401      	adds	r4, #1
 8009d04:	9304      	str	r3, [sp, #16]
 8009d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d0a:	4826      	ldr	r0, [pc, #152]	; (8009da4 <_svfiprintf_r+0x1f0>)
 8009d0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d10:	2206      	movs	r2, #6
 8009d12:	f7f6 fa65 	bl	80001e0 <memchr>
 8009d16:	2800      	cmp	r0, #0
 8009d18:	d038      	beq.n	8009d8c <_svfiprintf_r+0x1d8>
 8009d1a:	4b23      	ldr	r3, [pc, #140]	; (8009da8 <_svfiprintf_r+0x1f4>)
 8009d1c:	bb1b      	cbnz	r3, 8009d66 <_svfiprintf_r+0x1b2>
 8009d1e:	9b03      	ldr	r3, [sp, #12]
 8009d20:	3307      	adds	r3, #7
 8009d22:	f023 0307 	bic.w	r3, r3, #7
 8009d26:	3308      	adds	r3, #8
 8009d28:	9303      	str	r3, [sp, #12]
 8009d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d2c:	4433      	add	r3, r6
 8009d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d30:	e767      	b.n	8009c02 <_svfiprintf_r+0x4e>
 8009d32:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d36:	460c      	mov	r4, r1
 8009d38:	2001      	movs	r0, #1
 8009d3a:	e7a5      	b.n	8009c88 <_svfiprintf_r+0xd4>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	3401      	adds	r4, #1
 8009d40:	9305      	str	r3, [sp, #20]
 8009d42:	4619      	mov	r1, r3
 8009d44:	f04f 0c0a 	mov.w	ip, #10
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d4e:	3a30      	subs	r2, #48	; 0x30
 8009d50:	2a09      	cmp	r2, #9
 8009d52:	d903      	bls.n	8009d5c <_svfiprintf_r+0x1a8>
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d0c5      	beq.n	8009ce4 <_svfiprintf_r+0x130>
 8009d58:	9105      	str	r1, [sp, #20]
 8009d5a:	e7c3      	b.n	8009ce4 <_svfiprintf_r+0x130>
 8009d5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d60:	4604      	mov	r4, r0
 8009d62:	2301      	movs	r3, #1
 8009d64:	e7f0      	b.n	8009d48 <_svfiprintf_r+0x194>
 8009d66:	ab03      	add	r3, sp, #12
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	462a      	mov	r2, r5
 8009d6c:	4b0f      	ldr	r3, [pc, #60]	; (8009dac <_svfiprintf_r+0x1f8>)
 8009d6e:	a904      	add	r1, sp, #16
 8009d70:	4638      	mov	r0, r7
 8009d72:	f7fd fc5b 	bl	800762c <_printf_float>
 8009d76:	1c42      	adds	r2, r0, #1
 8009d78:	4606      	mov	r6, r0
 8009d7a:	d1d6      	bne.n	8009d2a <_svfiprintf_r+0x176>
 8009d7c:	89ab      	ldrh	r3, [r5, #12]
 8009d7e:	065b      	lsls	r3, r3, #25
 8009d80:	f53f af2c 	bmi.w	8009bdc <_svfiprintf_r+0x28>
 8009d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d86:	b01d      	add	sp, #116	; 0x74
 8009d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8c:	ab03      	add	r3, sp, #12
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	462a      	mov	r2, r5
 8009d92:	4b06      	ldr	r3, [pc, #24]	; (8009dac <_svfiprintf_r+0x1f8>)
 8009d94:	a904      	add	r1, sp, #16
 8009d96:	4638      	mov	r0, r7
 8009d98:	f7fd feec 	bl	8007b74 <_printf_i>
 8009d9c:	e7eb      	b.n	8009d76 <_svfiprintf_r+0x1c2>
 8009d9e:	bf00      	nop
 8009da0:	0800a784 	.word	0x0800a784
 8009da4:	0800a78e 	.word	0x0800a78e
 8009da8:	0800762d 	.word	0x0800762d
 8009dac:	08009afd 	.word	0x08009afd
 8009db0:	0800a78a 	.word	0x0800a78a

08009db4 <__sfputc_r>:
 8009db4:	6893      	ldr	r3, [r2, #8]
 8009db6:	3b01      	subs	r3, #1
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	b410      	push	{r4}
 8009dbc:	6093      	str	r3, [r2, #8]
 8009dbe:	da08      	bge.n	8009dd2 <__sfputc_r+0x1e>
 8009dc0:	6994      	ldr	r4, [r2, #24]
 8009dc2:	42a3      	cmp	r3, r4
 8009dc4:	db01      	blt.n	8009dca <__sfputc_r+0x16>
 8009dc6:	290a      	cmp	r1, #10
 8009dc8:	d103      	bne.n	8009dd2 <__sfputc_r+0x1e>
 8009dca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dce:	f7fe b8a5 	b.w	8007f1c <__swbuf_r>
 8009dd2:	6813      	ldr	r3, [r2, #0]
 8009dd4:	1c58      	adds	r0, r3, #1
 8009dd6:	6010      	str	r0, [r2, #0]
 8009dd8:	7019      	strb	r1, [r3, #0]
 8009dda:	4608      	mov	r0, r1
 8009ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <__sfputs_r>:
 8009de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de4:	4606      	mov	r6, r0
 8009de6:	460f      	mov	r7, r1
 8009de8:	4614      	mov	r4, r2
 8009dea:	18d5      	adds	r5, r2, r3
 8009dec:	42ac      	cmp	r4, r5
 8009dee:	d101      	bne.n	8009df4 <__sfputs_r+0x12>
 8009df0:	2000      	movs	r0, #0
 8009df2:	e007      	b.n	8009e04 <__sfputs_r+0x22>
 8009df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009df8:	463a      	mov	r2, r7
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f7ff ffda 	bl	8009db4 <__sfputc_r>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d1f3      	bne.n	8009dec <__sfputs_r+0xa>
 8009e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e08 <_vfiprintf_r>:
 8009e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0c:	460d      	mov	r5, r1
 8009e0e:	b09d      	sub	sp, #116	; 0x74
 8009e10:	4614      	mov	r4, r2
 8009e12:	4698      	mov	r8, r3
 8009e14:	4606      	mov	r6, r0
 8009e16:	b118      	cbz	r0, 8009e20 <_vfiprintf_r+0x18>
 8009e18:	6983      	ldr	r3, [r0, #24]
 8009e1a:	b90b      	cbnz	r3, 8009e20 <_vfiprintf_r+0x18>
 8009e1c:	f7ff f8d4 	bl	8008fc8 <__sinit>
 8009e20:	4b89      	ldr	r3, [pc, #548]	; (800a048 <_vfiprintf_r+0x240>)
 8009e22:	429d      	cmp	r5, r3
 8009e24:	d11b      	bne.n	8009e5e <_vfiprintf_r+0x56>
 8009e26:	6875      	ldr	r5, [r6, #4]
 8009e28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e2a:	07d9      	lsls	r1, r3, #31
 8009e2c:	d405      	bmi.n	8009e3a <_vfiprintf_r+0x32>
 8009e2e:	89ab      	ldrh	r3, [r5, #12]
 8009e30:	059a      	lsls	r2, r3, #22
 8009e32:	d402      	bmi.n	8009e3a <_vfiprintf_r+0x32>
 8009e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e36:	f7ff f96a 	bl	800910e <__retarget_lock_acquire_recursive>
 8009e3a:	89ab      	ldrh	r3, [r5, #12]
 8009e3c:	071b      	lsls	r3, r3, #28
 8009e3e:	d501      	bpl.n	8009e44 <_vfiprintf_r+0x3c>
 8009e40:	692b      	ldr	r3, [r5, #16]
 8009e42:	b9eb      	cbnz	r3, 8009e80 <_vfiprintf_r+0x78>
 8009e44:	4629      	mov	r1, r5
 8009e46:	4630      	mov	r0, r6
 8009e48:	f7fe f8ba 	bl	8007fc0 <__swsetup_r>
 8009e4c:	b1c0      	cbz	r0, 8009e80 <_vfiprintf_r+0x78>
 8009e4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e50:	07dc      	lsls	r4, r3, #31
 8009e52:	d50e      	bpl.n	8009e72 <_vfiprintf_r+0x6a>
 8009e54:	f04f 30ff 	mov.w	r0, #4294967295
 8009e58:	b01d      	add	sp, #116	; 0x74
 8009e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5e:	4b7b      	ldr	r3, [pc, #492]	; (800a04c <_vfiprintf_r+0x244>)
 8009e60:	429d      	cmp	r5, r3
 8009e62:	d101      	bne.n	8009e68 <_vfiprintf_r+0x60>
 8009e64:	68b5      	ldr	r5, [r6, #8]
 8009e66:	e7df      	b.n	8009e28 <_vfiprintf_r+0x20>
 8009e68:	4b79      	ldr	r3, [pc, #484]	; (800a050 <_vfiprintf_r+0x248>)
 8009e6a:	429d      	cmp	r5, r3
 8009e6c:	bf08      	it	eq
 8009e6e:	68f5      	ldreq	r5, [r6, #12]
 8009e70:	e7da      	b.n	8009e28 <_vfiprintf_r+0x20>
 8009e72:	89ab      	ldrh	r3, [r5, #12]
 8009e74:	0598      	lsls	r0, r3, #22
 8009e76:	d4ed      	bmi.n	8009e54 <_vfiprintf_r+0x4c>
 8009e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e7a:	f7ff f949 	bl	8009110 <__retarget_lock_release_recursive>
 8009e7e:	e7e9      	b.n	8009e54 <_vfiprintf_r+0x4c>
 8009e80:	2300      	movs	r3, #0
 8009e82:	9309      	str	r3, [sp, #36]	; 0x24
 8009e84:	2320      	movs	r3, #32
 8009e86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e8e:	2330      	movs	r3, #48	; 0x30
 8009e90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a054 <_vfiprintf_r+0x24c>
 8009e94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e98:	f04f 0901 	mov.w	r9, #1
 8009e9c:	4623      	mov	r3, r4
 8009e9e:	469a      	mov	sl, r3
 8009ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ea4:	b10a      	cbz	r2, 8009eaa <_vfiprintf_r+0xa2>
 8009ea6:	2a25      	cmp	r2, #37	; 0x25
 8009ea8:	d1f9      	bne.n	8009e9e <_vfiprintf_r+0x96>
 8009eaa:	ebba 0b04 	subs.w	fp, sl, r4
 8009eae:	d00b      	beq.n	8009ec8 <_vfiprintf_r+0xc0>
 8009eb0:	465b      	mov	r3, fp
 8009eb2:	4622      	mov	r2, r4
 8009eb4:	4629      	mov	r1, r5
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	f7ff ff93 	bl	8009de2 <__sfputs_r>
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	f000 80aa 	beq.w	800a016 <_vfiprintf_r+0x20e>
 8009ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ec4:	445a      	add	r2, fp
 8009ec6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f000 80a2 	beq.w	800a016 <_vfiprintf_r+0x20e>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009edc:	f10a 0a01 	add.w	sl, sl, #1
 8009ee0:	9304      	str	r3, [sp, #16]
 8009ee2:	9307      	str	r3, [sp, #28]
 8009ee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ee8:	931a      	str	r3, [sp, #104]	; 0x68
 8009eea:	4654      	mov	r4, sl
 8009eec:	2205      	movs	r2, #5
 8009eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ef2:	4858      	ldr	r0, [pc, #352]	; (800a054 <_vfiprintf_r+0x24c>)
 8009ef4:	f7f6 f974 	bl	80001e0 <memchr>
 8009ef8:	9a04      	ldr	r2, [sp, #16]
 8009efa:	b9d8      	cbnz	r0, 8009f34 <_vfiprintf_r+0x12c>
 8009efc:	06d1      	lsls	r1, r2, #27
 8009efe:	bf44      	itt	mi
 8009f00:	2320      	movmi	r3, #32
 8009f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f06:	0713      	lsls	r3, r2, #28
 8009f08:	bf44      	itt	mi
 8009f0a:	232b      	movmi	r3, #43	; 0x2b
 8009f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f10:	f89a 3000 	ldrb.w	r3, [sl]
 8009f14:	2b2a      	cmp	r3, #42	; 0x2a
 8009f16:	d015      	beq.n	8009f44 <_vfiprintf_r+0x13c>
 8009f18:	9a07      	ldr	r2, [sp, #28]
 8009f1a:	4654      	mov	r4, sl
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	f04f 0c0a 	mov.w	ip, #10
 8009f22:	4621      	mov	r1, r4
 8009f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f28:	3b30      	subs	r3, #48	; 0x30
 8009f2a:	2b09      	cmp	r3, #9
 8009f2c:	d94e      	bls.n	8009fcc <_vfiprintf_r+0x1c4>
 8009f2e:	b1b0      	cbz	r0, 8009f5e <_vfiprintf_r+0x156>
 8009f30:	9207      	str	r2, [sp, #28]
 8009f32:	e014      	b.n	8009f5e <_vfiprintf_r+0x156>
 8009f34:	eba0 0308 	sub.w	r3, r0, r8
 8009f38:	fa09 f303 	lsl.w	r3, r9, r3
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	9304      	str	r3, [sp, #16]
 8009f40:	46a2      	mov	sl, r4
 8009f42:	e7d2      	b.n	8009eea <_vfiprintf_r+0xe2>
 8009f44:	9b03      	ldr	r3, [sp, #12]
 8009f46:	1d19      	adds	r1, r3, #4
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	9103      	str	r1, [sp, #12]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	bfbb      	ittet	lt
 8009f50:	425b      	neglt	r3, r3
 8009f52:	f042 0202 	orrlt.w	r2, r2, #2
 8009f56:	9307      	strge	r3, [sp, #28]
 8009f58:	9307      	strlt	r3, [sp, #28]
 8009f5a:	bfb8      	it	lt
 8009f5c:	9204      	strlt	r2, [sp, #16]
 8009f5e:	7823      	ldrb	r3, [r4, #0]
 8009f60:	2b2e      	cmp	r3, #46	; 0x2e
 8009f62:	d10c      	bne.n	8009f7e <_vfiprintf_r+0x176>
 8009f64:	7863      	ldrb	r3, [r4, #1]
 8009f66:	2b2a      	cmp	r3, #42	; 0x2a
 8009f68:	d135      	bne.n	8009fd6 <_vfiprintf_r+0x1ce>
 8009f6a:	9b03      	ldr	r3, [sp, #12]
 8009f6c:	1d1a      	adds	r2, r3, #4
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	9203      	str	r2, [sp, #12]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	bfb8      	it	lt
 8009f76:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f7a:	3402      	adds	r4, #2
 8009f7c:	9305      	str	r3, [sp, #20]
 8009f7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a064 <_vfiprintf_r+0x25c>
 8009f82:	7821      	ldrb	r1, [r4, #0]
 8009f84:	2203      	movs	r2, #3
 8009f86:	4650      	mov	r0, sl
 8009f88:	f7f6 f92a 	bl	80001e0 <memchr>
 8009f8c:	b140      	cbz	r0, 8009fa0 <_vfiprintf_r+0x198>
 8009f8e:	2340      	movs	r3, #64	; 0x40
 8009f90:	eba0 000a 	sub.w	r0, r0, sl
 8009f94:	fa03 f000 	lsl.w	r0, r3, r0
 8009f98:	9b04      	ldr	r3, [sp, #16]
 8009f9a:	4303      	orrs	r3, r0
 8009f9c:	3401      	adds	r4, #1
 8009f9e:	9304      	str	r3, [sp, #16]
 8009fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa4:	482c      	ldr	r0, [pc, #176]	; (800a058 <_vfiprintf_r+0x250>)
 8009fa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009faa:	2206      	movs	r2, #6
 8009fac:	f7f6 f918 	bl	80001e0 <memchr>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	d03f      	beq.n	800a034 <_vfiprintf_r+0x22c>
 8009fb4:	4b29      	ldr	r3, [pc, #164]	; (800a05c <_vfiprintf_r+0x254>)
 8009fb6:	bb1b      	cbnz	r3, 800a000 <_vfiprintf_r+0x1f8>
 8009fb8:	9b03      	ldr	r3, [sp, #12]
 8009fba:	3307      	adds	r3, #7
 8009fbc:	f023 0307 	bic.w	r3, r3, #7
 8009fc0:	3308      	adds	r3, #8
 8009fc2:	9303      	str	r3, [sp, #12]
 8009fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fc6:	443b      	add	r3, r7
 8009fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8009fca:	e767      	b.n	8009e9c <_vfiprintf_r+0x94>
 8009fcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fd0:	460c      	mov	r4, r1
 8009fd2:	2001      	movs	r0, #1
 8009fd4:	e7a5      	b.n	8009f22 <_vfiprintf_r+0x11a>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	3401      	adds	r4, #1
 8009fda:	9305      	str	r3, [sp, #20]
 8009fdc:	4619      	mov	r1, r3
 8009fde:	f04f 0c0a 	mov.w	ip, #10
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fe8:	3a30      	subs	r2, #48	; 0x30
 8009fea:	2a09      	cmp	r2, #9
 8009fec:	d903      	bls.n	8009ff6 <_vfiprintf_r+0x1ee>
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d0c5      	beq.n	8009f7e <_vfiprintf_r+0x176>
 8009ff2:	9105      	str	r1, [sp, #20]
 8009ff4:	e7c3      	b.n	8009f7e <_vfiprintf_r+0x176>
 8009ff6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e7f0      	b.n	8009fe2 <_vfiprintf_r+0x1da>
 800a000:	ab03      	add	r3, sp, #12
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	462a      	mov	r2, r5
 800a006:	4b16      	ldr	r3, [pc, #88]	; (800a060 <_vfiprintf_r+0x258>)
 800a008:	a904      	add	r1, sp, #16
 800a00a:	4630      	mov	r0, r6
 800a00c:	f7fd fb0e 	bl	800762c <_printf_float>
 800a010:	4607      	mov	r7, r0
 800a012:	1c78      	adds	r0, r7, #1
 800a014:	d1d6      	bne.n	8009fc4 <_vfiprintf_r+0x1bc>
 800a016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a018:	07d9      	lsls	r1, r3, #31
 800a01a:	d405      	bmi.n	800a028 <_vfiprintf_r+0x220>
 800a01c:	89ab      	ldrh	r3, [r5, #12]
 800a01e:	059a      	lsls	r2, r3, #22
 800a020:	d402      	bmi.n	800a028 <_vfiprintf_r+0x220>
 800a022:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a024:	f7ff f874 	bl	8009110 <__retarget_lock_release_recursive>
 800a028:	89ab      	ldrh	r3, [r5, #12]
 800a02a:	065b      	lsls	r3, r3, #25
 800a02c:	f53f af12 	bmi.w	8009e54 <_vfiprintf_r+0x4c>
 800a030:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a032:	e711      	b.n	8009e58 <_vfiprintf_r+0x50>
 800a034:	ab03      	add	r3, sp, #12
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	462a      	mov	r2, r5
 800a03a:	4b09      	ldr	r3, [pc, #36]	; (800a060 <_vfiprintf_r+0x258>)
 800a03c:	a904      	add	r1, sp, #16
 800a03e:	4630      	mov	r0, r6
 800a040:	f7fd fd98 	bl	8007b74 <_printf_i>
 800a044:	e7e4      	b.n	800a010 <_vfiprintf_r+0x208>
 800a046:	bf00      	nop
 800a048:	0800a5ec 	.word	0x0800a5ec
 800a04c:	0800a60c 	.word	0x0800a60c
 800a050:	0800a5cc 	.word	0x0800a5cc
 800a054:	0800a784 	.word	0x0800a784
 800a058:	0800a78e 	.word	0x0800a78e
 800a05c:	0800762d 	.word	0x0800762d
 800a060:	08009de3 	.word	0x08009de3
 800a064:	0800a78a 	.word	0x0800a78a

0800a068 <_sbrk_r>:
 800a068:	b538      	push	{r3, r4, r5, lr}
 800a06a:	4d06      	ldr	r5, [pc, #24]	; (800a084 <_sbrk_r+0x1c>)
 800a06c:	2300      	movs	r3, #0
 800a06e:	4604      	mov	r4, r0
 800a070:	4608      	mov	r0, r1
 800a072:	602b      	str	r3, [r5, #0]
 800a074:	f7f8 f9ea 	bl	800244c <_sbrk>
 800a078:	1c43      	adds	r3, r0, #1
 800a07a:	d102      	bne.n	800a082 <_sbrk_r+0x1a>
 800a07c:	682b      	ldr	r3, [r5, #0]
 800a07e:	b103      	cbz	r3, 800a082 <_sbrk_r+0x1a>
 800a080:	6023      	str	r3, [r4, #0]
 800a082:	bd38      	pop	{r3, r4, r5, pc}
 800a084:	200004e8 	.word	0x200004e8

0800a088 <__sread>:
 800a088:	b510      	push	{r4, lr}
 800a08a:	460c      	mov	r4, r1
 800a08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a090:	f000 f92c 	bl	800a2ec <_read_r>
 800a094:	2800      	cmp	r0, #0
 800a096:	bfab      	itete	ge
 800a098:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a09a:	89a3      	ldrhlt	r3, [r4, #12]
 800a09c:	181b      	addge	r3, r3, r0
 800a09e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a0a2:	bfac      	ite	ge
 800a0a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a0a6:	81a3      	strhlt	r3, [r4, #12]
 800a0a8:	bd10      	pop	{r4, pc}

0800a0aa <__swrite>:
 800a0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ae:	461f      	mov	r7, r3
 800a0b0:	898b      	ldrh	r3, [r1, #12]
 800a0b2:	05db      	lsls	r3, r3, #23
 800a0b4:	4605      	mov	r5, r0
 800a0b6:	460c      	mov	r4, r1
 800a0b8:	4616      	mov	r6, r2
 800a0ba:	d505      	bpl.n	800a0c8 <__swrite+0x1e>
 800a0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f000 f898 	bl	800a1f8 <_lseek_r>
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0d2:	81a3      	strh	r3, [r4, #12]
 800a0d4:	4632      	mov	r2, r6
 800a0d6:	463b      	mov	r3, r7
 800a0d8:	4628      	mov	r0, r5
 800a0da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0de:	f000 b817 	b.w	800a110 <_write_r>

0800a0e2 <__sseek>:
 800a0e2:	b510      	push	{r4, lr}
 800a0e4:	460c      	mov	r4, r1
 800a0e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0ea:	f000 f885 	bl	800a1f8 <_lseek_r>
 800a0ee:	1c43      	adds	r3, r0, #1
 800a0f0:	89a3      	ldrh	r3, [r4, #12]
 800a0f2:	bf15      	itete	ne
 800a0f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0fe:	81a3      	strheq	r3, [r4, #12]
 800a100:	bf18      	it	ne
 800a102:	81a3      	strhne	r3, [r4, #12]
 800a104:	bd10      	pop	{r4, pc}

0800a106 <__sclose>:
 800a106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a10a:	f000 b831 	b.w	800a170 <_close_r>
	...

0800a110 <_write_r>:
 800a110:	b538      	push	{r3, r4, r5, lr}
 800a112:	4d07      	ldr	r5, [pc, #28]	; (800a130 <_write_r+0x20>)
 800a114:	4604      	mov	r4, r0
 800a116:	4608      	mov	r0, r1
 800a118:	4611      	mov	r1, r2
 800a11a:	2200      	movs	r2, #0
 800a11c:	602a      	str	r2, [r5, #0]
 800a11e:	461a      	mov	r2, r3
 800a120:	f7f8 f943 	bl	80023aa <_write>
 800a124:	1c43      	adds	r3, r0, #1
 800a126:	d102      	bne.n	800a12e <_write_r+0x1e>
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	b103      	cbz	r3, 800a12e <_write_r+0x1e>
 800a12c:	6023      	str	r3, [r4, #0]
 800a12e:	bd38      	pop	{r3, r4, r5, pc}
 800a130:	200004e8 	.word	0x200004e8

0800a134 <__assert_func>:
 800a134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a136:	4614      	mov	r4, r2
 800a138:	461a      	mov	r2, r3
 800a13a:	4b09      	ldr	r3, [pc, #36]	; (800a160 <__assert_func+0x2c>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4605      	mov	r5, r0
 800a140:	68d8      	ldr	r0, [r3, #12]
 800a142:	b14c      	cbz	r4, 800a158 <__assert_func+0x24>
 800a144:	4b07      	ldr	r3, [pc, #28]	; (800a164 <__assert_func+0x30>)
 800a146:	9100      	str	r1, [sp, #0]
 800a148:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a14c:	4906      	ldr	r1, [pc, #24]	; (800a168 <__assert_func+0x34>)
 800a14e:	462b      	mov	r3, r5
 800a150:	f000 f81e 	bl	800a190 <fiprintf>
 800a154:	f000 f8e9 	bl	800a32a <abort>
 800a158:	4b04      	ldr	r3, [pc, #16]	; (800a16c <__assert_func+0x38>)
 800a15a:	461c      	mov	r4, r3
 800a15c:	e7f3      	b.n	800a146 <__assert_func+0x12>
 800a15e:	bf00      	nop
 800a160:	20000068 	.word	0x20000068
 800a164:	0800a795 	.word	0x0800a795
 800a168:	0800a7a2 	.word	0x0800a7a2
 800a16c:	0800a7d0 	.word	0x0800a7d0

0800a170 <_close_r>:
 800a170:	b538      	push	{r3, r4, r5, lr}
 800a172:	4d06      	ldr	r5, [pc, #24]	; (800a18c <_close_r+0x1c>)
 800a174:	2300      	movs	r3, #0
 800a176:	4604      	mov	r4, r0
 800a178:	4608      	mov	r0, r1
 800a17a:	602b      	str	r3, [r5, #0]
 800a17c:	f7f8 f931 	bl	80023e2 <_close>
 800a180:	1c43      	adds	r3, r0, #1
 800a182:	d102      	bne.n	800a18a <_close_r+0x1a>
 800a184:	682b      	ldr	r3, [r5, #0]
 800a186:	b103      	cbz	r3, 800a18a <_close_r+0x1a>
 800a188:	6023      	str	r3, [r4, #0]
 800a18a:	bd38      	pop	{r3, r4, r5, pc}
 800a18c:	200004e8 	.word	0x200004e8

0800a190 <fiprintf>:
 800a190:	b40e      	push	{r1, r2, r3}
 800a192:	b503      	push	{r0, r1, lr}
 800a194:	4601      	mov	r1, r0
 800a196:	ab03      	add	r3, sp, #12
 800a198:	4805      	ldr	r0, [pc, #20]	; (800a1b0 <fiprintf+0x20>)
 800a19a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a19e:	6800      	ldr	r0, [r0, #0]
 800a1a0:	9301      	str	r3, [sp, #4]
 800a1a2:	f7ff fe31 	bl	8009e08 <_vfiprintf_r>
 800a1a6:	b002      	add	sp, #8
 800a1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1ac:	b003      	add	sp, #12
 800a1ae:	4770      	bx	lr
 800a1b0:	20000068 	.word	0x20000068

0800a1b4 <_fstat_r>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	4d07      	ldr	r5, [pc, #28]	; (800a1d4 <_fstat_r+0x20>)
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	4608      	mov	r0, r1
 800a1be:	4611      	mov	r1, r2
 800a1c0:	602b      	str	r3, [r5, #0]
 800a1c2:	f7f8 f91a 	bl	80023fa <_fstat>
 800a1c6:	1c43      	adds	r3, r0, #1
 800a1c8:	d102      	bne.n	800a1d0 <_fstat_r+0x1c>
 800a1ca:	682b      	ldr	r3, [r5, #0]
 800a1cc:	b103      	cbz	r3, 800a1d0 <_fstat_r+0x1c>
 800a1ce:	6023      	str	r3, [r4, #0]
 800a1d0:	bd38      	pop	{r3, r4, r5, pc}
 800a1d2:	bf00      	nop
 800a1d4:	200004e8 	.word	0x200004e8

0800a1d8 <_isatty_r>:
 800a1d8:	b538      	push	{r3, r4, r5, lr}
 800a1da:	4d06      	ldr	r5, [pc, #24]	; (800a1f4 <_isatty_r+0x1c>)
 800a1dc:	2300      	movs	r3, #0
 800a1de:	4604      	mov	r4, r0
 800a1e0:	4608      	mov	r0, r1
 800a1e2:	602b      	str	r3, [r5, #0]
 800a1e4:	f7f8 f919 	bl	800241a <_isatty>
 800a1e8:	1c43      	adds	r3, r0, #1
 800a1ea:	d102      	bne.n	800a1f2 <_isatty_r+0x1a>
 800a1ec:	682b      	ldr	r3, [r5, #0]
 800a1ee:	b103      	cbz	r3, 800a1f2 <_isatty_r+0x1a>
 800a1f0:	6023      	str	r3, [r4, #0]
 800a1f2:	bd38      	pop	{r3, r4, r5, pc}
 800a1f4:	200004e8 	.word	0x200004e8

0800a1f8 <_lseek_r>:
 800a1f8:	b538      	push	{r3, r4, r5, lr}
 800a1fa:	4d07      	ldr	r5, [pc, #28]	; (800a218 <_lseek_r+0x20>)
 800a1fc:	4604      	mov	r4, r0
 800a1fe:	4608      	mov	r0, r1
 800a200:	4611      	mov	r1, r2
 800a202:	2200      	movs	r2, #0
 800a204:	602a      	str	r2, [r5, #0]
 800a206:	461a      	mov	r2, r3
 800a208:	f7f8 f912 	bl	8002430 <_lseek>
 800a20c:	1c43      	adds	r3, r0, #1
 800a20e:	d102      	bne.n	800a216 <_lseek_r+0x1e>
 800a210:	682b      	ldr	r3, [r5, #0]
 800a212:	b103      	cbz	r3, 800a216 <_lseek_r+0x1e>
 800a214:	6023      	str	r3, [r4, #0]
 800a216:	bd38      	pop	{r3, r4, r5, pc}
 800a218:	200004e8 	.word	0x200004e8

0800a21c <__ascii_mbtowc>:
 800a21c:	b082      	sub	sp, #8
 800a21e:	b901      	cbnz	r1, 800a222 <__ascii_mbtowc+0x6>
 800a220:	a901      	add	r1, sp, #4
 800a222:	b142      	cbz	r2, 800a236 <__ascii_mbtowc+0x1a>
 800a224:	b14b      	cbz	r3, 800a23a <__ascii_mbtowc+0x1e>
 800a226:	7813      	ldrb	r3, [r2, #0]
 800a228:	600b      	str	r3, [r1, #0]
 800a22a:	7812      	ldrb	r2, [r2, #0]
 800a22c:	1e10      	subs	r0, r2, #0
 800a22e:	bf18      	it	ne
 800a230:	2001      	movne	r0, #1
 800a232:	b002      	add	sp, #8
 800a234:	4770      	bx	lr
 800a236:	4610      	mov	r0, r2
 800a238:	e7fb      	b.n	800a232 <__ascii_mbtowc+0x16>
 800a23a:	f06f 0001 	mvn.w	r0, #1
 800a23e:	e7f8      	b.n	800a232 <__ascii_mbtowc+0x16>

0800a240 <memmove>:
 800a240:	4288      	cmp	r0, r1
 800a242:	b510      	push	{r4, lr}
 800a244:	eb01 0402 	add.w	r4, r1, r2
 800a248:	d902      	bls.n	800a250 <memmove+0x10>
 800a24a:	4284      	cmp	r4, r0
 800a24c:	4623      	mov	r3, r4
 800a24e:	d807      	bhi.n	800a260 <memmove+0x20>
 800a250:	1e43      	subs	r3, r0, #1
 800a252:	42a1      	cmp	r1, r4
 800a254:	d008      	beq.n	800a268 <memmove+0x28>
 800a256:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a25a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a25e:	e7f8      	b.n	800a252 <memmove+0x12>
 800a260:	4402      	add	r2, r0
 800a262:	4601      	mov	r1, r0
 800a264:	428a      	cmp	r2, r1
 800a266:	d100      	bne.n	800a26a <memmove+0x2a>
 800a268:	bd10      	pop	{r4, pc}
 800a26a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a26e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a272:	e7f7      	b.n	800a264 <memmove+0x24>

0800a274 <__malloc_lock>:
 800a274:	4801      	ldr	r0, [pc, #4]	; (800a27c <__malloc_lock+0x8>)
 800a276:	f7fe bf4a 	b.w	800910e <__retarget_lock_acquire_recursive>
 800a27a:	bf00      	nop
 800a27c:	200004dc 	.word	0x200004dc

0800a280 <__malloc_unlock>:
 800a280:	4801      	ldr	r0, [pc, #4]	; (800a288 <__malloc_unlock+0x8>)
 800a282:	f7fe bf45 	b.w	8009110 <__retarget_lock_release_recursive>
 800a286:	bf00      	nop
 800a288:	200004dc 	.word	0x200004dc

0800a28c <_realloc_r>:
 800a28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a290:	4680      	mov	r8, r0
 800a292:	4614      	mov	r4, r2
 800a294:	460e      	mov	r6, r1
 800a296:	b921      	cbnz	r1, 800a2a2 <_realloc_r+0x16>
 800a298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a29c:	4611      	mov	r1, r2
 800a29e:	f7ff bbb9 	b.w	8009a14 <_malloc_r>
 800a2a2:	b92a      	cbnz	r2, 800a2b0 <_realloc_r+0x24>
 800a2a4:	f7ff fb4a 	bl	800993c <_free_r>
 800a2a8:	4625      	mov	r5, r4
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2b0:	f000 f842 	bl	800a338 <_malloc_usable_size_r>
 800a2b4:	4284      	cmp	r4, r0
 800a2b6:	4607      	mov	r7, r0
 800a2b8:	d802      	bhi.n	800a2c0 <_realloc_r+0x34>
 800a2ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2be:	d812      	bhi.n	800a2e6 <_realloc_r+0x5a>
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	4640      	mov	r0, r8
 800a2c4:	f7ff fba6 	bl	8009a14 <_malloc_r>
 800a2c8:	4605      	mov	r5, r0
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	d0ed      	beq.n	800a2aa <_realloc_r+0x1e>
 800a2ce:	42bc      	cmp	r4, r7
 800a2d0:	4622      	mov	r2, r4
 800a2d2:	4631      	mov	r1, r6
 800a2d4:	bf28      	it	cs
 800a2d6:	463a      	movcs	r2, r7
 800a2d8:	f7fe ff88 	bl	80091ec <memcpy>
 800a2dc:	4631      	mov	r1, r6
 800a2de:	4640      	mov	r0, r8
 800a2e0:	f7ff fb2c 	bl	800993c <_free_r>
 800a2e4:	e7e1      	b.n	800a2aa <_realloc_r+0x1e>
 800a2e6:	4635      	mov	r5, r6
 800a2e8:	e7df      	b.n	800a2aa <_realloc_r+0x1e>
	...

0800a2ec <_read_r>:
 800a2ec:	b538      	push	{r3, r4, r5, lr}
 800a2ee:	4d07      	ldr	r5, [pc, #28]	; (800a30c <_read_r+0x20>)
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	4608      	mov	r0, r1
 800a2f4:	4611      	mov	r1, r2
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	602a      	str	r2, [r5, #0]
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	f7f8 f838 	bl	8002370 <_read>
 800a300:	1c43      	adds	r3, r0, #1
 800a302:	d102      	bne.n	800a30a <_read_r+0x1e>
 800a304:	682b      	ldr	r3, [r5, #0]
 800a306:	b103      	cbz	r3, 800a30a <_read_r+0x1e>
 800a308:	6023      	str	r3, [r4, #0]
 800a30a:	bd38      	pop	{r3, r4, r5, pc}
 800a30c:	200004e8 	.word	0x200004e8

0800a310 <__ascii_wctomb>:
 800a310:	b149      	cbz	r1, 800a326 <__ascii_wctomb+0x16>
 800a312:	2aff      	cmp	r2, #255	; 0xff
 800a314:	bf85      	ittet	hi
 800a316:	238a      	movhi	r3, #138	; 0x8a
 800a318:	6003      	strhi	r3, [r0, #0]
 800a31a:	700a      	strbls	r2, [r1, #0]
 800a31c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a320:	bf98      	it	ls
 800a322:	2001      	movls	r0, #1
 800a324:	4770      	bx	lr
 800a326:	4608      	mov	r0, r1
 800a328:	4770      	bx	lr

0800a32a <abort>:
 800a32a:	b508      	push	{r3, lr}
 800a32c:	2006      	movs	r0, #6
 800a32e:	f000 f833 	bl	800a398 <raise>
 800a332:	2001      	movs	r0, #1
 800a334:	f7f8 f812 	bl	800235c <_exit>

0800a338 <_malloc_usable_size_r>:
 800a338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a33c:	1f18      	subs	r0, r3, #4
 800a33e:	2b00      	cmp	r3, #0
 800a340:	bfbc      	itt	lt
 800a342:	580b      	ldrlt	r3, [r1, r0]
 800a344:	18c0      	addlt	r0, r0, r3
 800a346:	4770      	bx	lr

0800a348 <_raise_r>:
 800a348:	291f      	cmp	r1, #31
 800a34a:	b538      	push	{r3, r4, r5, lr}
 800a34c:	4604      	mov	r4, r0
 800a34e:	460d      	mov	r5, r1
 800a350:	d904      	bls.n	800a35c <_raise_r+0x14>
 800a352:	2316      	movs	r3, #22
 800a354:	6003      	str	r3, [r0, #0]
 800a356:	f04f 30ff 	mov.w	r0, #4294967295
 800a35a:	bd38      	pop	{r3, r4, r5, pc}
 800a35c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a35e:	b112      	cbz	r2, 800a366 <_raise_r+0x1e>
 800a360:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a364:	b94b      	cbnz	r3, 800a37a <_raise_r+0x32>
 800a366:	4620      	mov	r0, r4
 800a368:	f000 f830 	bl	800a3cc <_getpid_r>
 800a36c:	462a      	mov	r2, r5
 800a36e:	4601      	mov	r1, r0
 800a370:	4620      	mov	r0, r4
 800a372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a376:	f000 b817 	b.w	800a3a8 <_kill_r>
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d00a      	beq.n	800a394 <_raise_r+0x4c>
 800a37e:	1c59      	adds	r1, r3, #1
 800a380:	d103      	bne.n	800a38a <_raise_r+0x42>
 800a382:	2316      	movs	r3, #22
 800a384:	6003      	str	r3, [r0, #0]
 800a386:	2001      	movs	r0, #1
 800a388:	e7e7      	b.n	800a35a <_raise_r+0x12>
 800a38a:	2400      	movs	r4, #0
 800a38c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a390:	4628      	mov	r0, r5
 800a392:	4798      	blx	r3
 800a394:	2000      	movs	r0, #0
 800a396:	e7e0      	b.n	800a35a <_raise_r+0x12>

0800a398 <raise>:
 800a398:	4b02      	ldr	r3, [pc, #8]	; (800a3a4 <raise+0xc>)
 800a39a:	4601      	mov	r1, r0
 800a39c:	6818      	ldr	r0, [r3, #0]
 800a39e:	f7ff bfd3 	b.w	800a348 <_raise_r>
 800a3a2:	bf00      	nop
 800a3a4:	20000068 	.word	0x20000068

0800a3a8 <_kill_r>:
 800a3a8:	b538      	push	{r3, r4, r5, lr}
 800a3aa:	4d07      	ldr	r5, [pc, #28]	; (800a3c8 <_kill_r+0x20>)
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	4608      	mov	r0, r1
 800a3b2:	4611      	mov	r1, r2
 800a3b4:	602b      	str	r3, [r5, #0]
 800a3b6:	f7f7 ffc1 	bl	800233c <_kill>
 800a3ba:	1c43      	adds	r3, r0, #1
 800a3bc:	d102      	bne.n	800a3c4 <_kill_r+0x1c>
 800a3be:	682b      	ldr	r3, [r5, #0]
 800a3c0:	b103      	cbz	r3, 800a3c4 <_kill_r+0x1c>
 800a3c2:	6023      	str	r3, [r4, #0]
 800a3c4:	bd38      	pop	{r3, r4, r5, pc}
 800a3c6:	bf00      	nop
 800a3c8:	200004e8 	.word	0x200004e8

0800a3cc <_getpid_r>:
 800a3cc:	f7f7 bfae 	b.w	800232c <_getpid>

0800a3d0 <_init>:
 800a3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d2:	bf00      	nop
 800a3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3d6:	bc08      	pop	{r3}
 800a3d8:	469e      	mov	lr, r3
 800a3da:	4770      	bx	lr

0800a3dc <_fini>:
 800a3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3de:	bf00      	nop
 800a3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3e2:	bc08      	pop	{r3}
 800a3e4:	469e      	mov	lr, r3
 800a3e6:	4770      	bx	lr
